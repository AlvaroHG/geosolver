libdc1394 error: Failed to initialize libdc1394
/usr/local/lib/python2.7/dist-packages/sklearn/utils/class_weight.py:62: DeprecationWarning: The class_weight='auto' heuristic is deprecated in 0.17 in favor of a new heuristic class_weight='balanced'. 'auto' will be removed in 0.19
  " 0.19", DeprecationWarning)
/usr/local/lib/python2.7/dist-packages/sklearn/utils/class_weight.py:62: DeprecationWarning: The class_weight='auto' heuristic is deprecated in 0.17 in favor of a new heuristic class_weight='balanced'. 'auto' will be removed in 0.19
  " 0.19", DeprecationWarning)
/usr/local/lib/python2.7/dist-packages/sklearn/utils/class_weight.py:62: DeprecationWarning: The class_weight='auto' heuristic is deprecated in 0.17 in favor of a new heuristic class_weight='balanced'. 'auto' will be removed in 0.19
  " 0.19", DeprecationWarning)
accessing: http://localhost:8000/questions/download/aaai
accessing: http://localhost:8000/questions/download/emnlp
accessing: http://localhost:8000/questions/download/euclid
accessing: http://localhost:8000/questions/download/official
accessing: http://localhost:8000/questions/download/practice
accessing: http://localhost:8000/semantics/download/all
accessing: http://localhost:8000/labels/download/all
[1152, 1038, 1039, 1040, 1042, 1043, 1044, 1045, 1046, 1047, 1050, 1051, 1052, 1053, 1054, 1056, 1057, 1058, 1059, 1063, 1064, 1065, 1067, 1070, 1071, 1083, 1087, 1089, 1090, 1092, 1095, 1096, 1097, 1099, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1114, 1119, 1120, 1121, 1122, 1123, 1124, 1127, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151]
training: 2
training: 3
training: 4
training: 6
training: 9
training: 12
training: 14
training: 16
training: 17
training: 18
training: 19
training: 20
training: 21
training: 24
training: 25
training: 26
training: 27
training: 28
training: 29
training: 30
training: 31
training: 32
training: 33
training: 34
training: 36
training: 38
training: 39
training: 40
training: 41
training: 43
training: 46
training: 47
training: 48
training: 49
training: 52
training: 53
training: 54
training: 55
training: 56
training: 57
training: 58
training: 59
training: 60
training: 61
training: 62
training: 63
training: 64
training: 65
training: 66
training: 67
training: 68
training: 69
training: 70
training: 71
training: 73
training: 74
training: 75
training: 77
training: 1486
training: 79
training: 80
training: 82
training: 83
training: 84
training: 85
training: 86
Fitting RFUnaryModel:
# of positive examples: 209
# of negative examples: 796
length of feature vector: 71
Fitting RFCoreModel:
# of positive examples: 39
# of negative examples: 1014
length of feature vector: 189
Fitting RFIsModel:
# of positive examples: 58
# of negative examples: 2626
length of feature vector: 156
test ids: 1025, 1027, 1029, 1030, 1031, 1032, 1035, 1037, 1038, 1039, 1040, 1042, 1043, 1044, 1045, 1046, 1047, 1050, 1051, 1052, 1053, 1054, 1056, 1057, 1058, 1059, 1063, 1064, 1065, 1067, 1070, 1071, 1083, 1087, 1089, 1090, 1092, 1095, 1096, 1097, 1099, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1114, 1119, 1120, 1121, 1122, 1123, 1124, 1127, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 963, 968, 969, 971, 973, 974, 975, 977, 979, 981, 985, 988, 989, 990, 993, 995, 997, 1000, 1003, 1004, 1005, 1006, 1011, 1014, 1017, 1018, 1019, 1020
--------------------------------------------------------------------------------
id: 1152
full unit_test entry
WWWWWWW opt_model
No legal next available.
f and t: Equals(Add($x:number,$y:number),$What:number) Equals@0[@s_0](Add@0[@s_0]($x:number@0[@s_0], $y:number@0[@s_0]), $What:number@0[@s_0])
local entities: []
completed formulas:

Equals(90(),Div(MeasureOf(Angle($point_0:point,$point_3:point,$point_2:point)),Degree())) TV(norm=1.366, conf=0.98) [90.0, 91.36552235820609]
Equals(18(),LengthOf(Line($point_1:point,$point_2:point))) TV(norm=118.929, conf=0.00) [18.0, 136.92948236008925]
Equals(Add($x:number,$y:number),$What:number) None None
Equals($y:number,LengthOf(Line($point_2:point,$point_3:point))) None None
Ge(180,90()) TV(norm=0.000, conf=1.00) [180, 90.0]
Equals($x:number,LengthOf(Line($point_0:point,$point_2:point))) None None
Equals(30(),LengthOf(Line($point_1:point,$point_3:point))) TV(norm=154.734, conf=0.00) [30.0, 184.73378024897175]
Equals(10(),LengthOf(Line($point_0:point,$point_3:point))) TV(norm=82.406, conf=0.00) [10.0, 92.405594955991049]
Equals(90(),Div(MeasureOf(Angle($point_1:point,$point_2:point,$point_3:point)),Degree())) TV(norm=1.053, conf=0.99) [90.0, 91.05292243440748]
Solving...
Given formulas: set([Equals(90(),Div(MeasureOf(Angle($point_0:point,$point_3:point,$point_2:point)),Degree())), Equals(18(),LengthOf(Line($point_1:point,$point_2:point))), Equals(Add($x:number,$y:number),$What:number), Equals($y:number,LengthOf(Line($point_2:point,$point_3:point))), Ge(180,90()), Equals($x:numbERROR:root:1152
ERROR:root:global name 'quetion' is not defined
Traceback (most recent call last):
  File "/home/alvaroh/geosolver/geosolver/run.py", line 164, in full_unit_test
    result = _full_unit_test(combined_model, question, label_data)
  File "/home/alvaroh/geosolver/geosolver/run.py", line 388, in _full_unit_test
    print("Correct for non-multiple choice: {0}, golden: {1}".format(ans, quetion.answer))
NameError: global name 'quetion' is not defined
er,LengthOf(Line($point_0:point,$point_2:point))), Equals(30(),LengthOf(Line($point_1:point,$point_3:point))), Equals(10(),LengthOf(Line($point_0:point,$point_3:point))), Equals(90(),Div(MeasureOf(Angle($point_1:point,$point_2:point,$point_3:point)),Degree()))])
iteration 1:
    nfev: 61004
     fun: 2.4262049205248104e-06
       x: array([ 17.94143164, -32.24580224, -25.63640759,   1.19879405,
        49.99999789,  10.01131958,  -3.31289228,  23.99999907,  25.99999881])
 message: ['requested number of basinhopping iterations completed successfully']
    njev: 4714
     nit: 100
62.17 seconds
ans: 49.9999978941
Exceptiont in full_unit_test
RESULT: (e,p,c) = True, False, False 

(e,p,c) = True, False, False
--------------------------------------------------------------------------------
1/64 complete, 0 correct, 0 penalized, 1 error
--------------------------------------------------------------------------------
id: 1038
full unit_test entry
WWWWWWW opt_model
3.85, Is@9[is](ValueOf@11[value]($x:number@13[x]), $What:number@8[what])
4.17, IsTriangle@2[triangle]($triangle:triangle@2[triangle])

completed formulas:
Is(ValueOf($x:number),$What:number)
IsTriangle($triangle:triangle)

Equals(60(),Div(MeasureOf(Angle($point_0:point,$point_2:point,$point_1:point)),Degree())) TV(norm=0.354, conf=0.99) [60.0, 60.35437815307238]
Is(ValueOf($x:number),$What:number) None None
Equals(90(),Div(MeasureOf(Angle($point_1:point,$point_0:point,$point_2:point)),Degree())) TV(norm=0.527, conf=0.99) [90.0, 90.52745122311073]
Equals(6(),LengthOf(Line($point_0:point,$point_1:point))) TV(norm=138.339, conf=0.00) [6.0, 144.3394493875162]
Ge(180,90()) TV(norm=0.000, conf=1.00) [180, 90.0]
Equals($x:number,LengthOf(Line($point_0:point,$point_2:point))) None None
Ge(180,60()) TV(norm=0.000, conf=1.00) [180, 60.0]
Solving...
Given formulas: set([Equals(60(),Div(MeasureOf(Angle($point_0:point,$point_2:point,$point_1:point)),Degree())), Is(ValueOf($x:number),$What:number), Equals(90(),Div(MeasureOf(Angle($point_1:point,$point_0:point,$point_2:point)),Degree())), Equals(6(),LengthOf(Line($point_0:point,$point_1:point))), Ge(180,90()), Equals($x:number,LengthOf(Line($point_0:point,$point_2:point))), Ge(180,60())])
iteration 1:
    nfev: 34308
     fun: 1.3062170118871563e-06
       x: array([-5.05103094,  2.58619409, -2.61485823, -0.47401669,  3.46410175,
        3.46410203])
 message: ['requested number of basinhopping iterations completed successfully']
    njev: 3468
     nit: 100
Equals(3.4641017534069403,Mul(2(),Sqrt(3())))
3.46410175341
Equals(3.4641017534069403,Mul(6(),Sqrt(2())))
3.46410175341
Equals(3.4641017534069403,Mul(6(),Sqrt(3())))
3.46410175341
Equals(3.4641017534069403,6())
3.46410175341
Equals(3.4641017534069403,12())
3.46410175341
23.17 seconds
ans: {1: TV(norm=0.000, conf=1.00), 2: TV(norm=5.021, conf=0.16), 3: TV(norm=6.928, conf=0.00), 4: TV(norm=2.536, conf=0.46), 5: TV(norm=8.536, conf=0.00)}
idx 1, answeri: 1.0
Correct for multiple choice: index: 1 value: TV(norm=0.000, conf=1.00), golden: 1.0
RESULT: (e,p,c) = False, False, True 

(e,p,c) = False, False, True
--------------------------------------------------------------------------------
2/64 complete, 1 correct, 0 penalized, 1 error
--------------------------------------------------------------------------------
id: 1039
full unit_test entry
WWWWWWW opt_model
3.91, Is@6[is](AreaOf@1[area]($ABCD:quad@4[ABCD]), 168@7[168])
4.85, IsRectangle@3[rectangle]($ABCD:quad@4[ABCD])

completed formulas:
Is(AreaOf($ABCD:quad),168())
IsRectangle($ABCD:quad)

3.88, Is@1[is](LengthOf@3[length]($AC:line@6[AC]), $What:number@0[What])
4.82, IsLine@5[segment]($AC:line@6[AC])

completed formulas:
Is(LengthOf($AC:line),$What:number)
IsLine($AC:line)

Equals(7(),LengthOf(Line($point_1:point,$point_3:point))) TV(norm=77.004, conf=0.00) [7.0, 84.004492760517238]
IsRectangle(Quad($point_2:point,$point_3:point,$point_1:point,$point_0:point)) TV(norm=0.012, conf=0.99) [quad(a=point(x=1.1696121459035993, y=84.923853850035101), b=point(x=174.0, y=85.333333333333343), c=point(x=173.66666666666669, y=1.32950191ERROR:root:failed to ground variable: $rectangle:rectangle
ERROR:root:failed to ground variable: $rectangle:rectangle
geosolver/text/opt_model.py:152: RuntimeWarning: divide by zero encountered in log
  sum_log = sum(np.log(self.get_magic_score(t, cc_trees)) for t in semantic_trees)
ERROR:root:failed to ground variable: $rectangle:rectangle
ERROR:root:failed to ground variable: $rectangle:rectangle
ERROR:root:failed to ground variable: $rectangle:rectangle
ERROR:root:failed to ground variable: $rectangle:rectangle
ERROR:root:failed to ground variable: $rectangle:rectangle
ERROR:root:failed to ground variable: $rectangle:rectangle
ERROR:root:failed to ground variable: $rectangle:rectangle
ERROR:root:failed to ground variable: $rectangle:rectangle
ERROR:root:failed to ground variable: $rectangle:rectangle
ERROR:root:failed to ground variable: $rectangle:rectangle
ERROR:root:failed to ground variable: $rectangle:rectangle
ERROR:root:failed to ground variable: $rectangle:rectangle
ERROR:root:failed to ground variable: $rectangle:rectangle
ERROR:root:failed to ground variable: $rectangle:rectangle
57088106), d=point(x=0.0, y=0.0))]
Is(LengthOf(Line($point_2:point,$point_1:point)),$What:number) None None
Is(AreaOf(Quad($point_2:point,$point_3:point,$point_1:point,$point_0:point)),168()) TV(norm=14464.583, conf=0.00) [14632.582944505613, 168.0]
Solving...
Given formulas: set([Equals(7(),LengthOf(Line($point_1:point,$point_3:point))), IsRectangle(Quad($point_2:point,$point_3:point,$point_1:point,$point_0:point)), Is(LengthOf(Line($point_2:point,$point_1:point)),$What:number), Is(AreaOf(Quad($point_2:point,$point_3:point,$point_1:point,$point_0:point)),168())])
iteration 1:
    nfev: 39784
     fun: 0.44081961149274068
       x: array([ 30.04159452, -21.00202163, -20.45051377,  -3.53312135,
         6.11425496,  15.56988076,  21.39930247])
 message: ['requested number of basinhopping iterations completed successfully']
    njev: 3786
     nit: 100
iteration 2:
    nfev: 45403
     fun: 2.7894444571963106e-06
       x: array([ 25.00000857,  -6.49254853,  24.59686641,   0.59692486,
        -6.54964615,   0.50742586,  24.58021456])
 message: ['requested number of basinhopping iterations completed successfully']
    njev: 4357
     nit: 100
Equals(25.000008567525459,Mul(7(),Sqrt(2())))
25.0000085675
Equals(25.000008567525459,14())
25.0000085675
Equals(25.000008567525459,21())
25.0000085675
Equals(25.000008567525459,24())
25.0000085675
Equals(25.000008567525459,25())
25.0000085675
59.42 seconds
ans: {1: TV(norm=15.101, conf=0.13), 2: TV(norm=11.000, conf=0.44), 3: TV(norm=4.000, conf=0.83), 4: TV(norm=1.000, conf=0.96), 5: TV(norm=0.000, conf=1.00)}
idx 5, answeri: 5.0
Correct for multiple choice: index: 5 value: TV(norm=0.000, conf=1.00), golden: 5.0
RESULT: (e,p,c) = False, False, True 

(e,p,c) = False, False, True
--------------------------------------------------------------------------------
3/64 complete, 2 correct, 0 penalized, 1 error
--------------------------------------------------------------------------------
id: 1040
full unit_test entry
WWWWWWW opt_model
2.93, Is@6[is]($ABCD:quad@5[ABCD], $rectangle:rectangle@8[rectangle])

completed formulas:
IsRectangle($rectangle:quad)
Is($ABCD:quad,$rectangle:quad)

3.90, Is@1[is](AreaOf@3[area]($AFB:triangle@6[AFB]), $What:number@0[What])
4.86, IsTriangle@5[triangle]($AFB:triangle@6[AFB])

completed formulas:
Is(AreaOf($AFB:triangle),$What:number)
IsTriangle($AFB:triangle)

PointLiesOnLine($point_1:point,Line($point_3:point,$point_4:point)) TV(norm=0.013, conf=1.00) [point(x=46.3674370386519, y=0.78101010351862499), line(a=point(x=174.0, y=1.3333333333333286), b=point(x=1.3331551754854871, y=0.0076607874576950508))]
Equals(3(),LengthOf(Line($point_0:point,$point_3:point))) TV(norm=81.173, conf=0.00) [3.0, 84.172607051093394]
Is(Quad($point_2:point,$point_0:point,$point_3:point,$point_4:point),Quad($point_3:point,$point_4:point,$point_2:point,$point_0:point)) TV(norm=0.000, conf=1.00) [quad(a=point(x=0.19640769689218018, y=85.002310678786969), b=point(x=173.0, y=85.5), c=point(x=174.0, y=1.3333333333333286), d=point(x=1.3331551754854871, y=0.0076607874576950508)), quad(a=point(x=174.0, y=1.3333333333333286), b=point(x=1.3331551754854871, y=0.0076607874576950508), c=point(x=0.19640769689218018, y=85.002310678786969), d=point(x=173.0, y=85.5))]
Equals(6(),LengthOf(Line($point_0:point,$point_2:point))) TV(norm=166.804, conf=0.00) [6.0, 172.80430899580935]
Is(AreaOf(Triangle($point_0:point,$point_1:point,$point_2:point)),$What:number) None None
IsRectangle(Quad($point_3:point,$point_4:point,$point_2:point,$point_0:point)) TV(norm=0.008, conf=0.99) [quad(a=point(x=174.0, y=1.3333333333333286), b=point(x=1.3331551754854871, y=0.0076607874576950508), c=point(x=0.19640769689218018, y=85.002310678786969), d=point(x=173.0, y=85.5))]
Solving...
Given formulas: set([PointLiesOnLine($point_1:point,Line($point_3:point,$point_4:point)), Equals(3(),LengthOf(Line($point_0:point,$point_3:point))), Is(Quad($point_2:point,$point_0:point,$point_3:point,$point_4:point),Quad($point_3:point,$point_4:point,$point_2:point,$point_0:point)), Equals(6(),LengthOf(Line($point_0:point,$point_2:point))ERROR:root:1040
ERROR:root:global name 'quetion' is not defined
Traceback (most recent call last):
  File "/home/alvaroh/geosolver/geosolver/run.py", line 164, in full_unit_test
    result = _full_unit_test(combined_model, question, label_data)
  File "/home/alvaroh/geosolver/geosolver/run.py", line 388, in _full_unit_test
    print("Correct for non-multiple choice: {0}, golden: {1}".format(ans, quetion.answer))
NameError: global name 'quetion' is not defined
ERROR:root:1042
ERROR:root:global name 'quetion' is not defined
Traceback (most recent call last):
  File "/home/alvaroh/geosolver/geosolver/run.py", line 164, in full_unit_test
    result = _full_unit_test(combined_model, question, label_data)
  File "/home/alvaroh/geosolver/geosolver/run.py", line 388, in _full_unit_test
    print("Correct for non-multiple choice: {0}, golden: {1}".format(ans, quetion.answer))
NameError: global name 'quetion' is not defined
ERROR:root:failed to ground variable: $rectangle:rectangle
ERROR:root:failed to ground variable: $rectangle:rectangle
ERROR:root:failed to ground variable: $rectangle:rectangle
ERROR:root:failed to ground variable: $rectangle:rectangle
ERROR:root:failed to ground variable: $rectangle:rectangle
ERROR:root:failed to ground variable: $rectangle:rectangle
ERROR:root:failed to ground variable: $rectangle:rectangle
ERROR:root:failed to ground variable: $rectangle:rectangle
ERROR:root:failed to ground variable: $rectangle:rectangle
ERROR:root:failed to ground variable: $rectangle:rectangle
ERROR:root:failed to ground variable: $rectangle:rectangle
ERROR:root:failed to ground variable: $rectangle:rectangle
ERROR:root:failed to ground variable: $rectangle:rectangle
ERROR:root:failed to ground variable: $rectangle:rectangle
ERROR:root:failed to ground variable: $rectangle:rectangle
ERROR:root:failed to ground variable: $rectangle:rectangle
), Is(AreaOf(Triangle($point_0:point,$point_1:point,$point_2:point)),$What:number), IsRectangle(Quad($point_3:point,$point_4:point,$point_2:point,$point_0:point))])
iteration 1:
    nfev: 52380
     fun: 1.3365251678165713e-06
       x: array([ 8.99999835, -2.75696225, -1.65904559,  3.41934932,  1.62595075,
        0.15097478, -2.39653211, -1.2819896 ,  4.15683404])
 message: ['requested number of basinhopping iterations completed successfully']
    njev: 4151
     nit: 100
53.16 seconds
ans: 8.99999835484
Exceptiont in full_unit_test
RESULT: (e,p,c) = True, False, False 

(e,p,c) = True, False, False
--------------------------------------------------------------------------------
4/64 complete, 2 correct, 0 penalized, 2 error
--------------------------------------------------------------------------------
id: 1042
full unit_test entry
WWWWWWW opt_model
2.47, PointLiesOnLine@12[on]($point:point@11[point], $l:line@14[l])
4.40, IsLine@6[line]($segments:line@7[segments])
4.75, PointLiesOnLine@12[on]($point:point@11[point], $line:line@13[line])
4.78, IntersectAt@8[meet]($segments:line@7[segments], $point:point@11[point])

completed formulas:
PointLiesOnLine($point:point,$l:line)
IntersectAt($segments:line,$point:point)
PointLiesOnLine($point:point,$line:line)
IsLine($segments:line)

3.85, Is@1[is](ValueOf@3[value]($x:number@5[x]), $What:number@0[What])

completed formulas:
Is(ValueOf($x:number),$What:number)

Equals($x:number,Div(MeasureOf(Angle($point_4:point,$point_0:point,$point_2:point)),Degree())) None None
Is(ValueOf($x:number),$What:number) None None
Equals(Mul(2(),$x:number),Div(MeasureOf(Angle($point_1:point,$point_0:point,$point_4:point)),Degree())) None None
Ge(180,Mul(2(),$x:number)) None None
Ge(180,$x:number) None None
Equals($x:number,Div(MeasureOf(Angle($point_3:point,$point_0:point,$point_1:point)),Degree())) None None
PointLiesOnLine($point_0:point,Line($point_2:point,$point_3:point)) TV(norm=0.006, conf=1.00) [point(x=93.297216992834521, y=42.72521343198634), line(a=point(x=183.0, y=43.0), b=point(x=0.0, y=43.0))]
PointLiesOnLine($point_2:point,Line($point_2:point,$point_3:point)) TV(norm=0.000, conf=1.00) [point(x=183.0, y=43.0), line(a=point(x=183.0, y=43.0), b=point(x=0.0, y=43.0))]
Solving...
Given formulas: set([Equals($x:number,Div(MeasureOf(Angle($point_4:point,$point_0:point,$point_2:point)),Degree())), Is(ValueOf($x:number),$What:number), Equals(Mul(2(),$x:number),Div(MeasureOf(Angle($point_1:point,$point_0:point,$point_4:point)),Degree())), Ge(180,Mul(2(),$x:number)), Ge(180,$x:number), Equals($x:number,Div(MeasureOf(Angle($point_3:point,$point_0:point,$point_1:point)),Degree())), PointLiesOnLine($point_0:point,Line($point_2:point,$point_3:point)), PointLiesOnLine($point_2:point,Line($point_2:point,$point_3:point))])
iteration 1:
    nfev: 54662
     fun: 1.8180204093276586e-06
       x: array([  45.00000031,  119.01447831,  219.14918001, -318.23481737,
        -25.7518961 , -529.27930192,  219.14903506,   45.00000033,
        219.14911914, -218.10023216])
 message: ['requested number of basinhopping iterations completed successfully']
    njev: 4101
     nit: 100
47.23 seconds
ans: 45.0000003105
Exceptiont in full_unit_test
RESULT: (e,p,c) = True, False, False 

(e,p,c) = True, False, False
--------------------------------------------------------------------------------
5/64 complete, 2 correct, 0 penalized, 3 error
--------------------------------------------------------------------------------
id: 1043
full unit_test entry
WWWWWWW opt_model
2.93, Is@6[is]($ABCD:quad@5[ABCD], $rectangle:rectangle@8[rectangle])

completed formulas:
IsRectangle($rectangle:quad)
Is($ABCD:quad,$rectangle:quad)

3.80, Is@9[be](LengthOf@11[length]($AC:line@14[AC]), $Which:ground@4[which])
4.17, Is@9[be]($line:line@13[line], $AC:line@14[AC])

f and t: Equals($AD:number,6()) Equals@1[@s_0]($AD:number@1[@s_0], 6@1[@s_0])
local entities: [{'content': {'span': [1, 2], 'class': 'TagRule', 'signature': {'class': 'VariableSignature', 'return_type': 'line', 'valence': 0, 'id': 'AD', 'name': 'AD'}}, 'coords': [[169.93, 126.88]ERROR:root:1044
ERROR:root:list index out of range
Traceback (most recent call last):
  File "/home/alvaroh/geosolver/geosolver/run.py", line 164, in full_unit_test
    result = _full_unit_test(combined_model, question, label_data)
  File "/home/alvaroh/geosolver/geosolver/run.py", line 325, in _full_unit_test
    local_entities = semantic_tree_to_serialized_entities(match_parse, t, number, value_expr_formulas)
  File "/home/alvaroh/geosolver/geosolver/run.py", line 181, in semantic_tree_to_serialized_entities
    grounded_formula = ground_formulas(match_parse, [formula], value_expr_formulas)[0]
IndexError: list index out of range
ERROR:root:failed to ground variable: $tangent:tangent
ERROR:root:failed to ground variable: $tangent:tangent
ERROR:root:failed to ground variable: $tangent:tangent
ERROR:root:failed to ground variable: $tangent:tangent
ERROR:root:failed to ground variable: $square:square
ERROR:root:failed to ground variable: $square:square
ERROR:root:failed to ground variable: $tangent:tangent
ERROR:root:failed to ground variable: $tangent:tangent
ERROR:root:failed to ground variable: $square:square
ERROR:root:failed to ground variable: $tangent:tangent
ERROR:root:failed to ground variable: $tangent:tangent
ERROR:root:failed to ground variable: $square:square
ERROR:root:failed to ground variable: $square:square
ERROR:root:failed to ground variable: $square:square
ERROR:root:failed to ground variable: $tangent:tangent
ERROR:root:failed to ground variable: $tangent:tangent
ERROR:root:failed to ground variable: $tangent:tangent
ERROR:root:failed to ground variable: $tangent:tangent
ERROR:root:failed to ground variable: $tangent:tangent
ERROR:root:failed to ground variable: $tangent:tangent
ERROR:root:failed to ground variable: $tangent:tangent
ERROR:root:failed to ground variable: $tangent:tangent
ERROR:root:failed to ground variable: $square:square
ERROR:root:failed to ground variable: $square:square
ERROR:root:failed to ground variable: $square:square
ERROR:root:failed to ground variable: $square:square
ERROR:root:failed to ground variable: $square:square
ERROR:root:failed to ground variable: $square:square
ERROR:root:failed to ground variable: $square:square
ERROR:root:failed to ground variable: $square:square
ERROR:root:failed to ground variable: $tangent:tangent
ERROR:root:failed to ground variable: $tangent:tangent
ERROR:root:failed to ground variable: $tangent:tangent
ERROR:root:failed to ground variable: $tangent:tangent
ERROR:root:failed to ground variable: $square:square
ERROR:root:failed to ground variable: $square:square
ERROR:root:failed to ground variable: $tangent:tangent
ERROR:root:failed to ground variable: $tangent:tangent
ERROR:root:failed to ground variable: $square:square
ERROR:root:failed to ground variable: $tangent:tangent
ERROR:root:failed to ground variable: $tangent:tangent
ERROR:root:failed to ground variable: $square:square
ERROR:root:failed to ground variable: $square:square
ERROR:root:failed to ground variable: $square:square
ERROR:root:failed to ground variable: $square:square
ERROR:root:failed to ground variable: $square:square
ERROR:root:failed to ground variable: $tangent:tangent
ERROR:root:failed to ground variable: $tangent:tangent
ERROR:root:failed to ground variable: $tangent:tangent
ERROR:root:failed to ground variable: $tangent:tangent
ERROR:root:failed to ground variable: $tangent:tangent
ERROR:root:failed to ground variable: $tangent:tangent
ERROR:root:failed to ground variable: $tangent:tangent
ERROR:root:failed to ground variable: $tangent:tangent
ERROR:root:failed to ground variable: $square:square
ERROR:root:failed to ground variable: $square:square
ERROR:root:failed to ground variable: $square:square
ERROR:root:failed to ground variable: $square:square
ERROR:root:failed to ground variable: $square:square
ERROR:root:failed to ground variable: $square:square
ERROR:root:failed to ground variable: $square:square
ERROR:root:failed to ground variable: $square:square
ERROR:root:failed to ground variable: $tangent:tangent
ERROR:root:failed to ground variable: $tangent:tangent
ERROR:root:failed to ground variable: $tangent:tangent
ERROR:root:failed to ground variable: $tangent:tangent
ERROR:root:failed to ground variable: $tangent:tangent
ERROR:root:failed to ground variable: $tangent:tangent
ERROR:root:failed to ground variable: $tangent:tangent
ERROR:root:failed to ground variable: $tangent:tangent
, [261.68, 127.33]], 'sentence_number': 1}]
completed formulas:
Is(LengthOf($AC:line),$Which:ground)
Is($line:line,$AC:line)

Is(LengthOf(Line($point_0:point,$point_1:point)),$Which:ground) None None
Equals(6(),LengthOf(Line($point_0:point,$point_2:point))) TV(norm=85.743, conf=0.00) [6.0, 91.742544467598094]
IsRectangle(Quad($point_0:point,$point_2:point,$point_1:point,$point_3:point)) TV(norm=0.021, conf=0.98) [quad(a=point(x=0.93491405824567408, y=69.883592971123505), b=point(x=92.67639015496809, y=70.326344576116682), c=point(x=94.0, y=1.0), d=point(x=0.014080287597359131, y=1.9997004194128252))]
Is(Line($point_0:point,$point_1:point),Line($point_0:point,$point_1:point)) TV(norm=0.000, conf=1.00) [line(a=point(x=0.93491405824567408, y=69.883592971123505), b=point(x=94.0, y=1.0)), line(a=point(x=0.93491405824567408, y=69.883592971123505), b=point(x=94.0, y=1.0))]
Equals(LengthOf(Line($point_0:point,$point_2:point)),6()) TV(norm=85.743, conf=0.00) [91.742544467598094, 6.0]
Is(Quad($point_2:point,$point_1:point,$point_3:point,$point_0:point),Quad($point_0:point,$point_2:point,$point_1:point,$point_3:point)) TV(norm=0.000, conf=1.00) [quad(a=point(x=92.67639015496809, y=70.326344576116682), b=point(x=94.0, y=1.0), c=point(x=0.014080287597359131, y=1.9997004194128252), d=point(x=0.93491405824567408, y=69.883592971123505)), quad(a=point(x=0.93491405824567408, y=69.883592971123505), b=point(x=92.67639015496809, y=70.326344576116682), c=point(x=94.0, y=1.0), d=point(x=0.014080287597359131, y=1.9997004194128252))]
Solving...
Given formulas: set([Is(LengthOf(Line($point_0:point,$point_1:point)),$Which:ground), Equals(6(),LengthOf(Line($point_0:point,$point_2:point))), IsRectangle(Quad($point_0:point,$point_2:point,$point_1:point,$point_3:point)), Is(Line($point_0:point,$point_1:point),Line($point_0:point,$point_1:point)), Equals(LengthOf(Line($point_0:point,$point_2:point)),6()), Is(Quad($point_2:point,$point_1:point,$point_3:point,$point_0:point),Quad($point_0:point,$point_2:point,$point_1:point,$point_3:point))])
iteration 1:
    nfev: 22781
     fun: 6.5990742964538995e-07
       x: array([ 4.54571448,  6.12453652,  1.87807099,  5.82466865, -1.19937462,
        4.39422432])
 message: ['requested number of basinhopping iterations completed successfully']
    njev: 2396
     nit: 100
20.10 seconds
ans: {1: TV(norm=4.461, conf=0.15), 2: TV(norm=3.461, conf=0.40), 3: TV(norm=2.461, conf=0.60), 4: TV(norm=1.461, conf=0.78), 5: TV(norm=0.461, conf=0.94)}
RESULT: (e,p,c) = False, False, False 

(e,p,c) = False, False, False
--------------------------------------------------------------------------------
6/64 complete, 2 correct, 0 penalized, 3 error
--------------------------------------------------------------------------------
id: 1044
full unit_test entry
WWWWWWW opt_model
2.95, IsCenterOf@6[center]($O:point@7[O], $circle:circle@4[circle])

Exceptiont in full_unit_test
RESULT: (e,p,c) = True, False, False 

(e,p,c) = True, False, False
--------------------------------------------------------------------------------
7/64 complete, 2 correct, 0 penalized, 4 error
--------------------------------------------------------------------------------
id: 1045
full unit_test entry
WWWWWWW opt_model
2.39, Tangent@3[tangent]($line:line@6[line], $is:quad@2[is])
4.35, IsPoint@8[point]($P:point@9[P])
4.67, IsSquare@1[square]($is:quad@2[is])

completed formulas:
IsPoint($P:point)
Tangent($line:line,$is:quad)
IsSquare($is:quad)

3.85, Is@1[is](ValueOf@3[value]($x:number@5[x]), $What:number@0[What])

completed formulas:
Is(ValueOf($x:number),$What:number)

Equals($x:number,Div(MeasureOf(Angle($point_5:point,$point_2:point,$point_1:point)),Degree())) None None
Tangent(Line($point_2:point,$point_5:point),Quad($point_3:point,$point_1:point,$point_2:point,$point_0:point)) TV(norm=0.350, conf=1.00) [line(a=point(x=99.983491304234803, y=99.859817505914151), b=point(x=0.0, y=100.0)), quad(a=point(x=71.303503875968985, y=0.71745736434107954), b=point(x=34.589341692789972, y=64.131661442006276), c=point(x=99.983491304234803, y=99.859817505914151), d=pointERROR:root:1045
ERROR:root:global name 'quetion' is not defined
Traceback (most recent call last):
  File "/home/alvaroh/geosolver/geosolver/run.py", line 164, in full_unit_test
    result = _full_unit_test(combined_model, question, label_data)
  File "/home/alvaroh/geosolver/geosolver/run.py", line 388, in _full_unit_test
    print("Correct for non-multiple choice: {0}, golden: {1}".format(ans, quetion.answer))
NameError: global name 'quetion' is not defined
ERROR:root:failed to ground variable: $square:square
ERROR:root:failed to ground variable: $square:square
ERROR:root:failed to ground variable: $square:square
ERROR:root:failed to ground variable: $square:square
ERROR:root:failed to ground variable: $square:square
ERROR:root:failed to ground variable: $square:square
ERROR:root:failed to ground variable: $square:square
ERROR:root:failed to ground variable: $square:square
ERROR:root:failed to ground variable: $square:square
ERROR:root:failed to ground variable: $square:square
ERROR:root:failed to ground variable: $square:square
ERROR:root:failed to ground variable: $square:square
ERROR:root:failed to ground variable: $square:square
ERROR:root:failed to ground variable: $square:square
ERROR:root:failed to ground variable: $square:square
ERROR:root:failed to ground variable: $square:square
ERROR:root:failed to ground variable: $square:square
ERROR:root:failed to ground variable: $square:square
ERROR:root:failed to ground variable: $square:square
ERROR:root:failed to ground variable: $square:square
ERROR:root:failed to ground variable: $square:square
ERROR:root:failed to ground variable: $square:square
ERROR:root:failed to ground variable: $square:square
ERROR:root:failed to ground variable: $square:square
ERROR:root:failed to ground variable: $square:square
ERROR:root:failed to ground variable: $square:square
ERROR:root:failed to ground variable: $square:square
ERROR:root:failed to ground variable: $square:square
ERROR:root:failed to ground variable: $square:square
ERROR:root:failed to ground variable: $square:square
ERROR:root:failed to ground variable: $square:square
ERROR:root:failed to ground variable: $square:square
ERROR:root:failed to ground variable: $square:square
ERROR:root:failed to ground variable: $square:square
ERROR:root:failed to ground variable: $square:square
ERROR:root:failed to ground variable: $square:square
ERROR:root:failed to ground variable: $square:square
ERROR:root:failed to ground variable: $square:square
ERROR:root:failed to ground variable: $square:square
ERROR:root:failed to ground variable: $square:square
ERROR:root:failed to ground variable: $square:square
ERROR:root:failed to ground variable: $square:square
ERROR:root:failed to ground variable: $square:square
ERROR:root:failed to ground variable: $square:square
ERROR:root:failed to ground variable: $square:square
ERROR:root:failed to ground variable: $square:square
ERROR:root:failed to ground variable: $square:square
ERROR:root:failed to ground variable: $square:square
ERROR:root:failed to ground variable: $square:square
ERROR:root:failed to ground variable: $square:square
ERROR:root:failed to ground variable: $square:square
ERROR:root:failed to ground variable: $square:square
ERROR:root:failed to ground variable: $square:square
ERROR:root:failed to ground variable: $square:square
ERROR:root:failed to ground variable: $square:square
ERROR:root:failed to ground variable: $square:square
ERROR:root:failed to ground variable: $square:square
ERROR:root:failed to ground variable: $square:square
ERROR:root:failed to ground variable: $square:square
ERROR:root:failed to ground variable: $square:square
ERROR:root:failed to ground variable: $square:square
ERROR:root:failed to ground variable: $square:square
ERROR:root:failed to ground variable: $square:square
ERROR:root:failed to ground variable: $square:square
ERROR:root:failed to ground variable: $square:square
ERROR:root:failed to ground variable: $square:square
ERROR:root:failed to ground variable: $square:square
ERROR:root:failed to ground variable: $square:square
ERROR:root:failed to ground variable: $square:square
ERROR:root:failed to ground variable: $square:square
ERROR:root:failed to ground variable: $square:square
ERROR:root:failed to ground variable: $square:square
ERROR:root:failed to ground variable: $square:square
ERROR:root:failed to ground variable: $square:square
ERROR:root:failed to ground variable: $square:square
ERROR:root:failed to ground variable: $square:square
ERROR:root:failed to ground variable: $square:square
ERROR:root:failed to ground variable: $square:square
ERROR:root:failed to ground variable: $square:square
ERROR:root:failed to ground variable: $square:square
ERROR:root:failed to ground variable: $square:square
ERROR:root:failed to ground variable: $square:square
ERROR:root:failed to ground variable: $square:square
ERROR:root:failed to ground variable: $square:square
ERROR:root:failed to ground variable: $square:square
ERROR:root:failed to ground variable: $square:square
ERROR:root:failed to ground variable: $square:square
ERROR:root:failed to ground variable: $square:square
ERROR:root:failed to ground variable: $square:square
ERROR:root:failed to ground variable: $square:square
ERROR:root:failed to ground variable: $square:square
ERROR:root:failed to ground variable: $square:square
ERROR:root:failed to ground variable: $square:square
ERROR:root:failed to ground variable: $square:square
ERROR:root:failed to ground variable: $square:square
ERROR:root:failed to ground variable: $square:square
ERROR:root:failed to ground variable: $square:square
ERROR:root:failed to ground variable: $square:square
ERROR:root:failed to ground variable: $square:square
ERROR:root:failed to ground variable: $square:square
ERROR:root:failed to ground variable: $square:square
ERROR:root:failed to ground variable: $square:square
ERROR:root:failed to ground variable: $square:square
ERROR:root:failed to ground variable: $square:square
ERROR:root:failed to ground variable: $square:square
ERROR:root:failed to ground variable: $square:square
ERROR:root:failed to ground variable: $square:square
ERROR:root:failed to ground variable: $square:square
ERROR:root:failed to ground variable: $square:square
ERROR:root:failed to ground variable: $square:square
ERROR:root:failed to ground variable: $square:square
ERROR:root:failed to ground variable: $square:square
ERROR:root:failed to ground variable: $square:square
ERROR:root:failed to ground variable: $square:square
ERROR:root:failed to ground variable: $square:square
ERROR:root:failed to ground variable: $square:square
ERROR:root:failed to ground variable: $square:square
ERROR:root:failed to ground variable: $square:square
ERROR:root:failed to ground variable: $square:square
ERROR:root:failed to ground variable: $square:square
ERROR:root:failed to ground variable: $square:square
ERROR:root:failed to ground variable: $square:square
ERROR:root:failed to ground variable: $square:square
ERROR:root:failed to ground variable: $square:square
ERROR:root:failed to ground variable: $square:square
ERROR:root:failed to ground variable: $square:square
ERROR:root:failed to ground variable: $square:square
ERROR:root:failed to ground variable: $square:square
ERROR:root:failed to ground variable: $square:square
ERROR:root:failed to ground variable: $square:square
ERROR:root:failed to ground variable: $square:square
ERROR:root:failed to ground variable: $square:square
ERROR:root:failed to ground variable: $square:square
ERROR:root:failed to ground variable: $square:square
ERROR:root:failed to ground variable: $square:square
ERROR:root:failed to ground variable: $square:square
ERROR:root:failed to ground variable: $square:square
ERROR:root:failed to ground variable: $square:square
ERROR:root:failed to ground variable: $square:square
ERROR:root:failed to ground variable: $square:square
ERROR:root:failed to ground variable: $square:square
ERROR:root:failed to ground variable: $square:square
ERROR:root:failed to ground variable: $square:square
ERROR:root:failed to ground variable: $square:square
ERROR:root:failed to ground variable: $square:square
ERROR:root:failed to ground variable: $square:square
ERROR:root:failed to ground variable: $square:square
ERROR:root:failed to ground variable: $square:square
ERROR:root:failed to ground variable: $square:square
ERROR:root:failed to ground variable: $square:square
(x=133.43569838117588, y=37.728410663778064))]
PointLiesOnLine($point_2:point,Line($point_4:point,$point_5:point)) TV(norm=0.003, conf=1.00) [point(x=99.983491304234803, y=99.859817505914151), line(a=point(x=193.0, y=100.0), b=point(x=0.0, y=100.0))]
IsSquare(Quad($point_3:point,$point_1:point,$point_2:point,$point_0:point)) TV(norm=1.321, conf=0.95) [quad(a=point(x=71.303503875968985, y=0.71745736434107954), b=point(x=34.589341692789972, y=64.131661442006276), c=point(x=99.983491304234803, y=99.859817505914151), d=point(x=133.43569838117588, y=37.728410663778064))]
Equals(Mul(2(),$x:number),Div(MeasureOf(Angle($point_0:point,$point_2:point,$point_4:point)),Degree())) None None
Is(ValueOf($x:number),$What:number) None None
Ge(180,Mul(2(),$x:number)) None None
Ge(180,$x:number) None None
Solving...
Given formulas: set([Equals($x:number,Div(MeasureOf(Angle($point_5:point,$point_2:point,$point_1:point)),Degree())), Tangent(Line($point_2:point,$point_5:point),Quad($point_3:point,$point_1:point,$point_2:point,$point_0:point)), PointLiesOnLine($point_2:point,Line($point_4:point,$point_5:point)), IsSquare(Quad($point_3:point,$point_1:point,$point_2:point,$point_0:point)), Equals(Mul(2(),$x:number),Div(MeasureOf(Angle($point_0:point,$point_2:point,$point_4:point)),Degree())), Is(ValueOf($x:number),$What:number), Ge(180,Mul(2(),$x:number)), Ge(180,$x:number)])
iteration 1:
    nfev: 105800
     fun: 3.2257385080299645
       x: array([ 175.50750358,    0.49032655,   94.69342005,  117.33881287,
         82.92029269,   96.19206707,   77.70564293,    7.57689359,
        171.00154911,   82.9190085 ,  171.89423244,   37.9714149 ])
 message: ['requested number of basinhopping iterations completed successfully']
    njev: 6514
     nit: 100
iteration 2:
    nfev: 81102
     fun: 0.0046422964513943244
       x: array([ 11.11017818, -12.07323712,   0.79009748,  33.39363708,
        29.99585079,  23.97953346, -34.35393393,   0.7913262 ,
        49.67398898,  29.99588309, -21.4899154 ,  46.26352627])
 message: ['requested number of basinhopping iterations completed successfully']
    njev: 5029
     nit: 100
iteration 3:
    nfev: 94198
     fun: 1.320373975320658
       x: array([ 25.39261562, -45.30397574, -43.95379502,  35.52700058,
        59.48806047,  29.1295308 , -35.79393326, -50.26122838,
        40.26304859,  59.488603  , -45.36339105,  25.36926798])
 message: ['requested number of basinhopping iterations completed successfully']
    njev: 5410
     nit: 100
380.55 seconds
ans: 29.9958507916
Exceptiont in full_unit_test
RESULT: (e,p,c) = True, False, False 

(e,p,c) = True, False, False
--------------------------------------------------------------------------------
8/64 complete, 2 correct, 0 penalized, 5 error
--------------------------------------------------------------------------------
id: 1046
full unit_test entry
WWWWWWW opt_model
1.94, IsRectangle@0[Rectangle]($ABCD:quad@1[ABCD])
2.88, Two@5[two]($square:square@7[square])
3.19, IsRectangle@0[Rectangle]($is:quad@2[is])

completed formulas:
IsRectangle($is:quad)
Two($square:quad)
IsRectangle($ABCD:quad)
IsSquare($square:quad)

3.92, Is@6[is](AreaOf@2[area]($square:square@5[square]), 9@7[9])
7.83, Is@10[is](PerimeterOf@12[perimeter]($ABCD:quad@14[ABCD]), $What:number@9[what])

completed formulas:
IsSquare($square:quad)
Is(PerimeterOf($ABCD:quad),$What:number)
Is(AreaOf($square:quad),9())

PointLiesOnLine($point_4:point,Line($point_1:point,$point_3:point)) TV(norm=0.010, conf=1.00) [point(x=50.970673917265486, y=50.252184890269959), line(a=point(x=0.6666666666666643, y=49.669966996699671), b=point(x=99.673330745341616, y=50.326798654244307))]
IsRectangle(Quad($point_4:point,$point_5:point,$point_2:point,$point_1:point)) TV(norm=0.023, conf=0.97) [quad(a=point(x=50.970673917265486, y=50.252184890269959), b=point(x=49.039767216294862, y=1.0140640155189118), c=point(x=0.6666666666666643, y=1.9933993399339904), d=point(x=0.6666666666666643, y=49.669966996699671))]
Is(PerimeterOf(Quad($point_3:point,$point_0:point,$point_2:point,$point_1:point)),$What:number) None None
IsRectangle/usr/lib/python2.7/dist-packages/scipy/optimize/slsqp.py:62: RuntimeWarning: invalid value encountered in subtract
  jac[i] = (func(*((x0+dx,)+args)) - f0)/epsilon
ERROR:root:1046
ERROR:root:
Traceback (most recent call last):
  File "/home/alvaroh/geosolver/geosolver/run.py", line 164, in full_unit_test
    result = _full_unit_test(combined_model, question, label_data)
  File "/home/alvaroh/geosolver/geosolver/run.py", line 387, in _full_unit_test
    if Equals(ans, float(question.answer)).conf > 0.98:
  File "geosolver/ontology/ontology_semantics.py", line 141, in Equals
    out = TruthValue(value, std)
  File "geosolver/ontology/ontology_semantics.py", line 19, in __init__
    assert norm >= 0
AssertionError
(Quad($point_3:point,$point_0:point,$point_2:point,$point_1:point)) TV(norm=0.015, conf=0.98) [quad(a=point(x=99.673330745341616, y=50.326798654244307), b=point(x=100.32666537191687, y=0.67339936557260671), c=point(x=0.6666666666666643, y=1.9933993399339904), d=point(x=0.6666666666666643, y=49.669966996699671))]
PointLiesOnLine($point_5:point,Line($point_0:point,$point_2:point)) TV(norm=0.014, conf=1.00) [point(x=49.039767216294862, y=1.0140640155189118), line(a=point(x=100.32666537191687, y=0.67339936557260671), b=point(x=0.6666666666666643, y=1.9933993399339904))]
IsRectangle(Quad($point_0:point,$point_2:point,$point_1:point,$point_3:point)) TV(norm=0.011, conf=0.98) [quad(a=point(x=100.32666537191687, y=0.67339936557260671), b=point(x=0.6666666666666643, y=1.9933993399339904), c=point(x=0.6666666666666643, y=49.669966996699671), d=point(x=99.673330745341616, y=50.326798654244307))]
Is(AreaOf(Quad($point_5:point,$point_4:point,$point_3:point,$point_0:point)),9()) TV(norm=2463.115, conf=0.00) [2472.1147479960846, 9.0]
IsSquare(Quad($point_5:point,$point_4:point,$point_3:point,$point_0:point)) TV(norm=0.549, conf=0.96) [quad(a=point(x=49.039767216294862, y=1.0140640155189118), b=point(x=50.970673917265486, y=50.252184890269959), c=point(x=99.673330745341616, y=50.326798654244307), d=point(x=100.32666537191687, y=0.67339936557260671))]
Two(Quad($point_5:point,$point_4:point,$point_3:point,$point_0:point)) TV(norm=inf, conf=0.00) [quad(a=point(x=49.039767216294862, y=1.0140640155189118), b=point(x=50.970673917265486, y=50.252184890269959), c=point(x=99.673330745341616, y=50.326798654244307), d=point(x=100.32666537191687, y=0.67339936557260671))]
IsRectangle(Quad($point_5:point,$point_4:point,$point_3:point,$point_0:point)) TV(norm=0.023, conf=0.97) [quad(a=point(x=49.039767216294862, y=1.0140640155189118), b=point(x=50.970673917265486, y=50.252184890269959), c=point(x=99.673330745341616, y=50.326798654244307), d=point(x=100.32666537191687, y=0.67339936557260671))]
Solving...
Given formulas: set([PointLiesOnLine($point_4:point,Line($point_1:point,$point_3:point)), IsRectangle(Quad($point_4:point,$point_5:point,$point_2:point,$point_1:point)), Is(PerimeterOf(Quad($point_3:point,$point_0:point,$point_2:point,$point_1:point)),$What:number), IsRectangle(Quad($point_3:point,$point_0:point,$point_2:point,$point_1:point)), PointLiesOnLine($point_5:point,Line($point_0:point,$point_2:point)), IsRectangle(Quad($point_0:point,$point_2:point,$point_1:point,$point_3:point)), Is(AreaOf(Quad($point_5:point,$point_4:point,$point_3:point,$point_0:point)),9()), IsSquare(Quad($point_5:point,$point_4:point,$point_3:point,$point_0:point)), Two(Quad($point_5:point,$point_4:point,$point_3:point,$point_0:point)), IsRectangle(Quad($point_5:point,$point_4:point,$point_3:point,$point_0:point))])
iteration 1:
    nfev: 233613
     fun: inf
       x: array([ nan,  nan,  nan,  nan,  nan,  nan,  nan,  nan,  nan,  nan,  nan])
 message: ['requested number of basinhopping iterations completed successfully']
    njev: 10201
     nit: 100
iteration 2:
    nfev: 233613
     fun: inf
       x: array([ nan,  nan,  nan,  nan,  nan,  nan,  nan,  nan,  nan,  nan,  nan])
 message: ['requested number of basinhopping iterations completed successfully']
    njev: 10201
     nit: 100
iteration 3:
    nfev: 233613
     fun: inf
       x: array([ nan,  nan,  nan,  nan,  nan,  nan,  nan,  nan,  nan,  nan,  nan])
 message: ['requested number of basinhopping iterations completed successfully']
    njev: 10201
     nit: 100
1044.01 seconds
ans: nan
Exceptiont in full_unit_test
RESULT: (e,p,c) = True, False, False 

(e,p,c) = True, False, False
--------------------------------------------------------------------------------
9/64 complete, 2 correct, 0 penalized, 6 error
--------------------------------------------------------------------------------
id: 1047
full unit_test entry
WWWWWWW opt_model
cc tree: CC@14[and]($x:number@10[x], $y:number@12[y]) 1.0
cc tree: CC@14[and]($x:number@10[x], $z:number@15[z]) 1.0
3.94, Is@6[is](AverageOf@8[average]($x:number@10[x]), $What:number@ERROR:root:failed to ground variable: $rectangle:rectangle
ERROR:root:failed to ground variable: $rectangle:rectangle
ERROR:root:failed to ground variable: $rectangle:rectangle
ERROR:root:failed to ground variable: $rectangle:rectangle
ERROR:root:failed to ground variable: $rectangle:rectangle
ERROR:root:failed to ground variable: $rectangle:rectangle
ERROR:root:failed to ground variable: $rectangle:rectangle
ERROR:root:failed to ground variable: $rectangle:rectangle
ERROR:root:failed to ground variable: $rectangle:rectangle
ERROR:root:failed to ground variable: $rectangle:rectangle
ERROR:root:failed to ground variable: $rectangle:rectangle
ERROR:root:failed to ground variable: $rectangle:rectangle
ERROR:root:failed to ground variable: $rectangle:rectangle
ERROR:root:failed to ground variable: $rectangle:rectangle
ERROR:root:failed to ground variable: $rectangle:rectangle
ERROR:root:failed to ground variable: $rectangle:rectangle
ERROR:root:failed to ground variable: $rectangle:rectangle
ERROR:root:failed to ground variable: $rectangle:rectangle
ERROR:root:failed to ground variable: $rectangle:rectangle
ERROR:root:failed to ground variable: $rectangle:rectangle
ERROR:root:failed to ground variable: $rectangle:rectangle
ERROR:root:failed to ground variable: $rectangle:rectangle
ERROR:root:failed to ground variable: $rectangle:rectangle
ERROR:root:failed to ground variable: $rectangle:rectangle
ERROR:root:failed to ground variable: $rectangle:rectangle
ERROR:root:failed to ground variable: $rectangle:rectangle
ERROR:root:failed to ground variable: $rectangle:rectangle
ERROR:root:failed to ground variable: $rectangle:rectangle
ERROR:root:failed to ground variable: $rectangle:rectangle
ERROR:root:failed to ground variable: $rectangle:rectangle
5[what])
4.27, IsTriangle@2[triangle]($triangle:triangle@2[triangle])

completed formulas:
Is(AverageOf({$x:number,$z:number,$y:number}),$What:number)
IsTriangle($triangle:triangle)

Ge(180,$z:number) None None
Ge(180,$y:number) None None
Equals($x:number,Div(MeasureOf(Angle($point_2:point,$point_1:point,$point_0:point)),Degree())) None None
Is(AverageOf({$x:number,$z:number,$y:number}),$What:number) None None
Equals($y:number,Div(MeasureOf(Angle($point_0:point,$point_2:point,$point_1:point)),Degree())) None None
Ge(180,$x:number) None None
Equals($z:number,Div(MeasureOf(Angle($point_1:point,$point_0:point,$point_2:point)),Degree())) None None
Solving...
Given formulas: set([Ge(180,$z:number), Ge(180,$y:number), Equals($x:number,Div(MeasureOf(Angle($point_2:point,$point_1:point,$point_0:point)),Degree())), Is(AverageOf({$x:number,$z:number,$y:number}),$What:number), Equals($y:number,Div(MeasureOf(Angle($point_0:point,$point_2:point,$point_1:point)),Degree())), Ge(180,$x:number), Equals($z:number,Div(MeasureOf(Angle($point_1:point,$point_0:point,$point_2:point)),Degree()))])
iteration 1:
    nfev: 34298
     fun: 6.4345707784241313e-07
       x: array([ -6.18463198, -14.31457855,  58.99241586,  60.00000001,
        65.75526363,  55.25232049,   0.5846856 , -15.58715553])
 message: ['requested number of basinhopping iterations completed successfully']
    njev: 2883
     nit: 100
Equals(60.000000010345147,30())
60.0000000103
Equals(60.000000010345147,45())
60.0000000103
Equals(60.000000010345147,60())
60.0000000103
Equals(60.000000010345147,75())
60.0000000103
Equals(60.000000010345147,90())
60.0000000103
22.98 seconds
ans: {1: TV(norm=30.000, conf=0.33), 2: TV(norm=15.000, conf=0.71), 3: TV(norm=0.000, conf=1.00), 4: TV(norm=15.000, conf=0.78), 5: TV(norm=30.000, conf=0.60)}
idx 3, answeri: 3.0
Correct for multiple choice: index: 3 value: TV(norm=0.000, conf=1.00), golden: 3.0
RESULT: (e,p,c) = False, False, True 

(e,p,c) = False, False, True
--------------------------------------------------------------------------------
10/64 complete, 3 correct, 0 penalized, 6 error
--------------------------------------------------------------------------------
id: 1050
full unit_test entry
WWWWWWW opt_model
3.06, Is@7[has]($w:number@9[w], Twice@15[twice](WidthOf@17[width]($is:quad@14[is])))
5.00, IsRectangle@0[Rectangle]($ABCD:quad@1[ABCD])
5.27, Is@7[has]($w:number@9[w], $width:number@8[width])
5.32, Is@7[has]($w:number@9[w], $l:number@12[l])

completed formulas:
Is($w:number,Twice(WidthOf($is:quad)))
Is($w:number,$width:number)
IsRectangle($ABCD:quad)
Is($w:number,$l:number)

3.92, Is@6[is](AreaOf@8[area]($rectangle:rectangle@11[rectangle]), $What:number@5[what])

f and t: Equals($w:number,2()) Equals@1[@s_0]($w:number@1[@s_0], 2@1[@s_0])
local entities: []
completed formulas:
Is(AreaOf($rectangle:quad),$What:number)
IsRectangle($rectangle:quad)

IsRectangle(Quad($point_1:point,$point_3:point,$point_2:point,$point_0:point)) TV(norm=0.004, conf=0.99) [quad(a=point(x=137.66666666666666, y=69.328537170263786), b=point(x=137.66666666666666, y=1.3237410071942435), c=point(x=1.333196328264151, y=0.0095903548431266472), d=point(x=0.67615524269515959, y=68.669133011338346))]
Equals($l:number,LengthOf(Line($point_2:point,$point_3:point))) None None
Is(AreaOf(Quad($point_0:point,$point_1:point,$point_3:point,$point_2:point)),$What:number) None None
Equals($w:number,LengthOf(Line($point_0:point,$point_2:point))) None None
Is($w:number,$width:number) None None
Is($w:number,Twice(WidthOf(Quad($point_0:point,$point_1:point,$point_3:point,$point_2:point)))) None None
Equals($w:number,2()) None None
Is($w:number,$l:number) None None
IsRectangle(Quad($point_0:point,$point_1:point,$point_3:point,$point_2:point)) TV(norm=0.007, conf=0.99) [quad(a=point(x=0.67615524269515959, y=68.669133011338346), b=point(x=137.66666666666666, y=69.328537170263786), c=point(x=137.66666666666666, y=1.3237410071942435), d=point(x=1.333196328264151, y=0.0095903548431266472))]
Solving...
Given formulas: set([IsRectangle(Quad($point_1:point,$point_3:point,$point_2:point,$point_0:point)), Equals($l:number,LengthOf(Line($point_2:point,$point_3:point))), Is(AreaOf(Quad($point_0:point,$point_1:point,$point_3:point,$point_2:point)),$What:number), Equals($w:number,LengthOf(Line($point_0:point,$point_2:point))), Is($w:number,$width:number), Is($w:number,Twice(WidthOf(Quad($point_0:point,$point_1:point,$point_3:point,$point_2:point)))), Equals($w:number,2()), Is($w:number,$l:number), IsRectangle(Quad($point_0:point,$point_1:point,$point_3:point,$point_2:point))])
iteration 1:
    nfev: 223412
     fun: inf
       x: array([ nan,  nan,  nan,  nan,  nan,  nan,  nan,  nan,  nan,  nan])
 message: ['requested number of basinhopping iterations completed successfully']
    njev: 10201
     nit: 100
iteration 2:
    nfev: 223412
     fun: inf
       x: array([ nan,  nan,  nan,  nan,  nan,  nan,  nan,  nan,  nan,  nan])
 message: ['requested number of basinhopping iterations completed successfully']
    njev: 10201
     nit: 100
iteration 3:
    nfev: 223412
     fun: inf
       x: array([ nan,  nan,  nan,  nan,  nan,  nan,  nan,  nan,  nan,  nan])
 message: ['requested number of basinhopping iterations completed successfully']
    njev: 10201
     nit: 100
Equals(nan,4())
nan
Equals(nan,6())
nan
Equals(nan,8())
nan
Equals(nan,12())
nan
Equals(nan,16())
nan
672.45 seconds
ans: {1: TV(norm=inf, conf=0.00), 2: TV(norm=inf, conf=0.00), 3: TV(norm=inf, conf=0.00), 4: TV(norm=inf, conf=0.00), 5: TV(norm=inf, conf=0.00)}
RESULT: (e,p,c) = False, False, False 

(e,p,c) = False, False, False
--------------------------------------------------------------------------------
11/64 complete, 3 correct, 0 penalized, 6 error
--------------------------------------------------------------------------------
id: 1051
full unit_test entry
WWWWWWW opt_model
No legal next available.
f and t: Equals($AC:number,6()) Equals@6[@s_0]($AC:number@6[@s_0], 6@6[@s_0])
local entities: [{'content': {'span': [6, 7], 'class': 'TagRule', 'signature': {'class': 'VariableSignature', 'return_type': 'line', 'valence': 0, 'id': 'AC', 'name': 'AC'}}, 'coords': [[149.19, 151.33], [266.2, 151.67]], 'sentence_number': 0}]
completed formulas:

3.88, Is@1[is](LengthOf@3[length]($AB:line@6[AB]), $What:number@0[What])
4.82, IsLine@5[segment]($AB:line@6[AB])

completed formulas:
Is(LengthOf($AB:line),$What:number)
IsLine($AB:line)

Is(LengthOf(Line($point_2:point,$point_0:point)),$What:number) None None
Equals(60(),Div(MeasureOf(Angle($point_0:point,$point_2:point,$point_1:point)),Degree())) TV(norm=0.022, conf=1.00) [60.0, 60.022252023395986]
Ge(180,60()) TV(norm=0.000, conf=1.00) [180, 60.0]
Equals(60(),Div(MeasureOf(Angle($point_1:point,$point_0:point,$point_2:point)),Degree())) TV(norm=1.658, conf=0.97) [60.0, 61.65797174271605]
Equals(LengthOf(Line($point_2:point,$point_1:point)),6()) TV(norm=111.005, conf=0.00) [117.00465854715868, 6.0]
Solving...
Given formulas: set([Is(LengthOf(Line($point_2:point,$point_0:point)),$What:number), Equals(60(),Div(MeasureOf(Angle($point_0:point,$point_2:point,$point_1:point)),Degree())), Ge(180,60()), Equals(60(),Div(MeasureOf(Angle($point_1:point,$point_0:point,$point_2:point)),Degree())), Equals(LengthOf(Line($point_2:point,$point_1:point)),6())])
iteration 1:
    nfev: 26406
     fun: 7.3938327105338431e-07
       x: array([-1.61984476,  4.34067253, -4.52168362,  6.00000008, -5.20887816])
 message: ['requested number of basinhopping iterations completed successfully']
    njev: 2960
     nit: 100
Equals(6.0000000760092238,3())
6.00000007601
Equals(6.0000000760092238,5())
6.00000007601
Equals(6.0000000760092238,6())
6.00000007601
Equals(6.0000000760092238,7())
6.00000007601
15.78 seconds
ans: {1: TV(norm=3.000, conf=0.33), 2: TV(norm=1.000, conf=0.82), 3: TV(norm=0.000, conf=1.00), 4: TV(norm=1.000, conf=0.85)}
idx 3, answeri: 3.0
Correct for multiple choice: index: 3 value: TV(norm=0.000, conf=1.00), golden: 3.0
RESULT: (e,p,c) = False, False, True 

(e,p,c) = False, False, True
--------------------------------------------------------------------------------
12/64 complete, 4 correct, 0 penalized, 6 error
------geosolver/ontology/ontology_semantics.py:163: RuntimeWarning: invalid value encountered in double_scalars
  return float(a) / b
geosolver/ontology/ontology_semantics.py:22: RuntimeWarning: invalid value encountered in double_scalars
  self.conf = max(0, 1-norm/std)
geosolver/ontology/ontology_semantics.py:163: RuntimeWarning: divide by zero encountered in double_scalars
  return float(a) / b
ERROR:root:1052
ERROR:root:'float' object has no attribute 'conf'
Traceback (most recent call last):
  File "/home/alvaroh/geosolver/geosolver/run.py", line 164, in full_unit_test
    result = _full_unit_test(combined_model, question, label_data)
  File "/home/alvaroh/geosolver/geosolver/run.py", line 341, in _full_unit_test
    local_entities = formula_to_serialized_entities(match_parse, f, tree, number)
  File "/home/alvaroh/geosolver/geosolver/run.py", line 196, in formula_to_serialized_entities
    grounded_formula = ground_formulas(match_parse, [formula])[0]
  File "geosolver/grounding/ground_formula.py", line 27, in ground_formulas
    scores.append(sum(s.conf for s in local_scores if s is not None))
  File "geosolver/grounding/ground_formula.py", line 27, in <genexpr>
    scores.append(sum(s.conf for s in local_scores if s is not None))
AttributeError: 'float' object has no attribute 'conf'
--------------------------------------------------------------------------
id: 1052
full unit_test entry
WWWWWWW opt_model
6.21, Is@19[is](RatioOf@6[ratio](LengthOf@9[length]($AB:line@12[AB]), LengthOf@15[length]($AC:line@18[AC])), $@v_0:number@20[@v_0])
7.56, IsLine@11[line]($line:line@17[line])

f and t: Div(2(),5()) Div@20[@v_0](2@20[@v_0], 5@20[@v_0])
Exceptiont in full_unit_test
RESULT: (e,p,c) = True, False, False 

(e,p,c) = True, False, False
--------------------------------------------------------------------------------
13/64 complete, 4 correct, 0 penalized, 7 error
--------------------------------------------------------------------------------
id: 1053
full unit_test entry
WWWWWWW opt_model
2.32, Is@5[are]($l:line@4[l], $line:line@3[line])
4.27, IsTriangle@0[Triangle]($ABC:triangle@1[ABC])

completed formulas:
IsTriangle($ABC:triangle)
Is($l:line,$line:line)

cc tree: CC@6[and]($y:number@5[y], $z:number@7[z]) 1.0
3.87, Is@1[is](SumOf@3[sum]($y:number@5[y]), $What:number@0[What])

completed formulas:
Is(SumOf({$y:number,$z:number}),$What:number)

Ge(180,$z:number) None None
Equals($x:number,Div(MeasureOf(Angle($point_0:point,$point_1:point,$point_2:point)),Degree())) None None
Equals($y:number,Div(MeasureOf(Angle($point_2:point,$point_0:point,$point_1:point)),Degree())) None None
Is(Line($point_3:point,$point_4:point),Line($point_3:point,$point_4:point)) TV(norm=0.000, conf=1.00) [line(a=point(x=0.0, y=59.0), b=point(x=248.0, y=59.0)), line(a=point(x=0.0, y=59.0), b=point(x=248.0, y=59.0))]
Ge(180,140()) TV(norm=0.000, conf=1.00) [180, 140.0]
PointLiesOnLine($point_2:point,Line($point_3:point,$point_4:point)) TV(norm=0.000, conf=1.00) [point(x=220.0, y=59.0), line(a=point(x=0.0, y=59.0), b=point(x=248.0, y=59.0))]
PointLiesOnLine($point_1:point,Line($point_2:point,$point_3:point)) TV(norm=0.000, conf=1.00) [point(x=37.0, y=59.0), line(a=point(x=220.0, y=59.0), b=point(x=0.0, y=59.0))]
Ge(180,$x:number) None None
PointLiesOnLine($point_1:point,Line($point_3:point,$point_4:point)) TV(norm=0.000, conf=1.00) [point(x=37.0, y=59.0), line(a=point(x=0.0, y=59.0), b=point(x=248.0, y=59.0))]
Is(SumOf({$y:number,$z:number}),$What:number) None None
PointLiesOnLine($point_2:point,Line($point_1:point,$point_4:point)) TV(norm=0.000, conf=1.00) [point(x=220.0, y=59.0), line(a=point(x=37.0, y=59.0), b=point(x=248.0, y=59.0))]
Ge(180,$y:number) None None
Equals(140(),Div(MeasureOf(Angle($point_3:point,$point_1:point,$point_0:point)),Degree())) TV(norm=15.118, conf=0.90) [140.0, 155.117823878656]
Equals($z:number,Div(MeasureOf(Angle($point_3:point,$point_2:point,$point_0:point)),Degree())) None None
Solving...
Given formulas: set([Ge(180,$z:number), Equals($x:number,Div(MeasureOf(Angle($point_0:point,$point_1:point,$point_2:point)),Degree())), Equals($y:number,Div(MeasureOf(Angle($point_2:point,$point_0:point,$point_1:point)),Degree())), Is(Line($point_3:point,$point_4:point),Line($point_3:point,$point_4:point)), Ge(180,140()), PointLiesOnLine($point_2:point,Line($point_3:point,$point_4:point)), PointLiesOnLine($point_1:point,Line($point_2:point,$point_3:point)), Ge(180,$x:number), PointLiesOnLine($point_1:point,Line($point_3:point,$point_4:point)), Is(SumOf({$y:number,$z:number}),$What:number), PointLiesOnLine($point_2:point,Line($point_1:point,$point_4:point)), Ge(180,$y:number), Equals(140(),Div(MeasureOf(Angle($point_3:point,$point_1:point,$point_0:point)),Degree())), Equals($z:number,Div(MeasureOf(Angle($point_3:point,$point_2:point,$point_0:point)),Degree()))])
iteration 1:
    nfev: 66739
     fun: 2.1449084552926934e-06
       x: array([   9.63621968,   22.50545512,    3.19718555,   15.86664502,
        139.99999632,   -2.89882981,   61.35196884,  -38.93945238,
         29.46336014,   56.7099752 ,   40.00001296,   83.29002017])
 message: ['requested number of basinhopping iterations completed successfully']
    njev: 4237
     nit: 100
Equals(139.9999963174607,40())
139.999996317
Equals(139.9999963174607,80())
139.999996317
Equals(139.9999963174607,120())
139.999996317
Equals(139.9999963174607,130())
139.999996317
EquaERROR:root:failed to ground variable: $trapezoid:trapezoid
ERROR:root:failed to ground variable: $trapezoid:trapezoid
ERROR:root:failed to ground variable: $trapezoid:trapezoid
ERROR:root:failed to ground variable: $trapezoid:trapezoid
ERROR:root:failed to ground variable: $trapezoid:trapezoid
ERROR:root:failed to ground variable: $trapezoid:trapezoid
ERROR:root:failed to ground variable: $trapezoid:trapezoid
ERROR:root:failed to ground variable: $trapezoid:trapezoid
ERROR:root:failed to ground variable: $trapezoid:trapezoid
ERROR:root:failed to ground variable: $trapezoid:trapezoid
ERROR:root:failed to ground variable: $trapezoid:trapezoid
ERROR:root:failed to ground variable: $trapezoid:trapezoid
ERROR:root:failed to ground variable: $trapezoid:trapezoid
ERROR:root:failed to ground variable: $trapezoid:trapezoid
ERROR:root:failed to ground variable: $trapezoid:trapezoid
ERROR:root:failed to ground variable: $trapezoid:trapezoid
ERROR:root:failed to ground variable: $trapezoid:trapezoid
ERROR:root:failed to ground variable: $trapezoid:trapezoid
ERROR:root:failed to ground variable: $trapezoid:trapezoid
ERROR:root:failed to ground variable: $trapezoid:trapezoid
ERROR:root:failed to ground variable: $trapezoid:trapezoid
ERROR:root:failed to ground variable: $trapezoid:trapezoid
ERROR:root:failed to ground variable: $trapezoid:trapezoid
ERROR:root:failed to ground variable: $trapezoid:trapezoid
ERROR:root:failed to ground variable: $trapezoid:trapezoid
ERROR:root:failed to ground variable: $trapezoid:trapezoid
ERROR:root:failed to ground variable: $trapezoid:trapezoid
ERROR:root:failed to ground variable: $trapezoid:trapezoid
ERROR:root:failed to ground variable: $trapezoid:trapezoid
ERROR:root:failed to ground variable: $trapezoid:trapezoid
ERROR:root:failed to ground variable: $trapezoid:trapezoid
ERROR:root:failed to ground variable: $trapezoid:trapezoid
ERROR:root:failed to ground variable: $trapezoid:trapezoid
ERROR:root:failed to ground variable: $trapezoid:trapezoid
ERROR:root:failed to ground variable: $trapezoid:trapezoid
ERROR:root:failed to ground variable: $trapezoid:trapezoid
ERROR:root:failed to ground variable: $trapezoid:trapezoid
ERROR:root:failed to ground variable: $trapezoid:trapezoid
ERROR:root:failed to ground variable: $trapezoid:trapezoid
ERROR:root:failed to ground variable: $trapezoid:trapezoid
ERROR:root:failed to ground variable: $trapezoid:trapezoid
ERROR:root:failed to ground variable: $trapezoid:trapezoid
ERROR:root:failed to ground variable: $trapezoid:trapezoid
ERROR:root:failed to ground variable: $trapezoid:trapezoid
ERROR:root:failed to ground variable: $trapezoid:trapezoid
ERROR:root:failed to ground variable: $trapezoid:trapezoid
ERROR:root:failed to ground variable: $trapezoid:trapezoid
ERROR:root:failed to ground variable: $trapezoid:trapezoid
ERROR:root:failed to ground variable: $trapezoid:trapezoid
ERROR:root:failed to ground variable: $trapezoid:trapezoid
ERROR:root:failed to ground variable: $trapezoid:trapezoid
ERROR:root:failed to ground variable: $trapezoid:trapezoid
ERROR:root:failed to ground variable: $trapezoid:trapezoid
ERROR:root:failed to ground variable: $trapezoid:trapezoid
ERROR:root:failed to ground variable: $trapezoid:trapezoid
ERROR:root:failed to ground variable: $trapezoid:trapezoid
ERROR:root:failed to ground variable: $trapezoid:trapezoid
ERROR:root:failed to ground variable: $trapezoid:trapezoid
ERROR:root:failed to ground variable: $trapezoid:trapezoid
ERROR:root:failed to ground variable: $trapezoid:trapezoid
ERROR:root:failed to ground variable: $trapezoid:trapezoid
ERROR:root:failed to ground variable: $trapezoid:trapezoid
ERROR:root:failed to ground variable: $trapezoid:trapezoid
ERROR:root:failed to ground variable: $trapezoid:trapezoid
ERROR:root:failed to ground variable: $trapezoid:trapezoid
ERROR:root:failed to ground variable: $trapezoid:trapezoid
ERROR:root:failed to ground variable: $trapezoid:trapezoid
ERROR:root:failed to ground variable: $trapezoid:trapezoid
ERROR:root:failed to ground variable: $trapezoid:trapezoid
ERROR:root:failed to ground variable: $trapezoid:trapezoid
ERROR:root:failed to ground variable: $trapezoid:trapezoid
ERROR:root:failed to ground variable: $trapezoid:trapezoid
ERROR:root:failed to ground variable: $trapezoid:trapezoid
ERROR:root:failed to ground variable: $trapezoid:trapezoid
ERROR:root:failed to ground variable: $trapezoid:trapezoid
ERROR:root:failed to ground variable: $trapezoid:trapezoid
ERROR:root:failed to ground variable: $trapezoid:trapezoid
ERROR:root:failed to ground variable: $trapezoid:trapezoid
ERROR:root:failed to ground variable: $trapezoid:trapezoid
ERROR:root:failed to ground variable: $trapezoid:trapezoid
ERROR:root:failed to ground variable: $trapezoid:trapezoid
ERROR:root:failed to ground variable: $trapezoid:trapezoid
ERROR:root:failed to ground variable: $trapezoid:trapezoid
ERROR:root:failed to ground variable: $trapezoid:trapezoid
ERROR:root:failed to ground variable: $trapezoid:trapezoid
ERROR:root:failed to ground variable: $trapezoid:trapezoid
ERROR:root:failed to ground variable: $trapezoid:trapezoid
ERROR:root:failed to ground variable: $trapezoid:trapezoid
ERROR:root:failed to ground variable: $trapezoid:trapezoid
ERROR:root:failed to ground variable: $trapezoid:trapezoid
ERROR:root:failed to ground variable: $trapezoid:trapezoid
ERROR:root:failed to ground variable: $trapezoid:trapezoid
ERROR:root:failed to ground variable: $trapezoid:trapezoid
ERROR:root:failed to ground variable: $trapezoid:trapezoid
ERROR:root:failed to ground variable: $trapezoid:trapezoid
ERROR:root:failed to ground variable: $trapezoid:trapezoid
ls(139.9999963174607,140())
139.999996317
93.75 seconds
ans: {1: TV(norm=100.000, conf=0.00), 2: TV(norm=60.000, conf=0.45), 3: TV(norm=20.000, conf=0.85), 4: TV(norm=10.000, conf=0.93), 5: TV(norm=0.000, conf=1.00)}
idx 5, answeri: 5.0
Correct for multiple choice: index: 5 value: TV(norm=0.000, conf=1.00), golden: 5.0
RESULT: (e,p,c) = False, False, True 

(e,p,c) = False, False, True
--------------------------------------------------------------------------------
14/64 complete, 5 correct, 0 penalized, 7 error
--------------------------------------------------------------------------------
id: 1054
full unit_test entry
WWWWWWW opt_model
4.30, True@12[true](True@8[true](True@17[true](IsTrapezoid@1[trapezoid]($ABCD:quad@2[ABCD]))))
6.62, Is@7[is]($is:quad@11[is], $is:quad@16[is])

f and t: Equals($BC:number,16()) Equals@15[@s_2]($BC:number@15[@s_2], 16@15[@s_2])
local entities: [{'content': {'span': [15, 16], 'class': 'TagRule', 'signature': {'class': 'VariableSignature', 'return_type': 'line', 'valence': 0, 'id': 'BC', 'name': 'BC'}}, 'coords': [[154.33, 44.97], [224.67, 43.03]], 'sentence_number': 0}]
f and t: Equals($AB:number,24()) Equals@6[@s_0]($AB:number@6[@s_0], 24@6[@s_0])
local entities: [{'content': {'span': [6, 7], 'class': 'TagRule', 'signature': {'class': 'VariableSignature', 'return_type': 'line', 'valence': 0, 'id': 'AB', 'name': 'AB'}}, 'coords': [[154.33, 151.67], [154.33, 44.97]], 'sentence_number': 0}]
f and t: Equals($AD:number,23()) Equals@10[@s_1]($AD:number@10[@s_1], 23@10[@s_1])
local entities: [{'content': {'span': [10, 11], 'class': 'TagRule', 'signature': {'class': 'VariableSignature', 'return_type': 'line', 'valence': 0, 'id': 'AD', 'name': 'AD'}}, 'coords': [[154.33, 151.67], [257.23, 152.33]], 'sentence_number': 0}]
completed formulas:
Is($is:quad,$is:quad)
True(True(True(IsTrapezoid($ABCD:quad))))

3.88, Is@1[is](LengthOf@3[length]($CD:line@6[CD]), $What:number@0[What])
4.82, IsLine@5[segment]($CD:line@6[CD])

completed formulas:
Is(LengthOf($CD:line),$What:number)
IsLine($CD:line)

Is(LengthOf(Line($point_0:point,$point_2:point)),$What:number) None None
Ge(180,90()) TV(norm=0.000, conf=1.00) [180, 90.0]
Equals(90(),Div(MeasureOf(Angle($point_0:point,$point_3:point,$point_1:point)),Degree())) TV(norm=1.584, conf=0.98) [90.0, 91.58431146858514]
Equals(LengthOf(Line($point_1:point,$point_3:point)),24()) TV(norm=82.700, conf=0.00) [106.70041313328986, 24.0]
Is(Quad($point_3:point,$point_1:point,$point_2:point,$point_0:point),Quad($point_3:point,$point_1:point,$point_2:point,$point_0:point)) TV(norm=0.000, conf=1.00) [quad(a=point(x=1.3333333333333286, y=1.9726027397260282), b=point(x=1.3333333333333286, y=108.67301587301588), c=point(x=104.23209169054441, y=109.32919452403694), d=point(x=71.674785746504284, y=0.027063599458728049)), quad(a=point(x=1.3333333333333286, y=1.9726027397260282), b=point(x=1.3333333333333286, y=108.67301587301588), c=point(x=104.23209169054441, y=109.32919452403694), d=point(x=71.674785746504284, y=0.027063599458728049))]
True(True(True(IsTrapezoid(Quad($point_2:point,$point_0:point,$point_3:point,$point_1:point))))) TV(norm=0.099, conf=0.98) [TV(norm=0.099, conf=0.98)]
Equals(LengthOf(Line($point_3:point,$point_0:point)),16()) TV(norm=54.368, conf=0.00) [70.368352617783415, 16.0]
Equals(90(),Div(MeasureOf(Angle($point_3:point,$point_1:point,$point_2:point)),Degree())) TV(norm=0.365, conf=1.00) [90.0, 90.36536648548197]
Equals(LengthOf(Line($point_1:point,$point_2:point)),23()) TV(norm=79.901, conf=0.00) [102.90085054010862, 23.0]
Solving...
Given formulas: set([Is(LengthOf(Line($point_0:point,$point_2:point)),$What:number), Ge(180,90()), Equals(90(),Div(MeasureOf(Angle($point_0:point,$point_3:point,$point_1:point)),Degree())), Equals(LengthOf(Line($point_1:point,$point_3:point)),24()), Is(Quad($point_3:point,$point_1:point,$point_2:point,$point_0:point),Quad($point_3:point,$point_1:point,$point_2:point,$point_0:point)), True(True(True(IsTrapezoid(Quad($point_2:point,$point_0:point,$point_3:point,$point_1:point))))), Equals(LengthOf(Line($point_3:point,$point_0:poinERROR:root:1054
ERROR:root:global name 'quetion' is not defined
Traceback (most recent call last):
  File "/home/alvaroh/geosolver/geosolver/run.py", line 164, in full_unit_test
    result = _full_unit_test(combined_model, question, label_data)
  File "/home/alvaroh/geosolver/geosolver/run.py", line 388, in _full_unit_test
    print("Correct for non-multiple choice: {0}, golden: {1}".format(ans, quetion.answer))
NameError: global name 'quetion' is not defined
ERROR:root:failed to ground variable: $rectangle:rectangle
ERROR:root:failed to ground variable: $rectangle:rectangle
ERROR:root:failed to ground variable: $rectangle:rectangle
ERROR:root:failed to ground variable: $rectangle:rectangle
ERROR:root:failed to ground variable: $rectangle:rectangle
ERROR:root:failed to ground variable: $rectangle:rectangle
ERROR:root:failed to ground variable: $rectangle:rectangle
ERROR:root:failed to ground variable: $rectangle:rectangle
ERROR:root:failed to ground variable: $rectangle:rectangle
ERROR:root:failed to ground variable: $rectangle:rectangle
ERROR:root:failed to ground variable: $rectangle:rectangle
ERROR:root:failed to ground variable: $rectangle:rectangle
ERROR:root:failed to ground variable: $rectangle:rectangle
ERROR:root:failed to ground variable: $rectangle:rectangle
ERROR:root:failed to ground variable: $rectangle:rectangle
ERROR:root:failed to ground variable: $rectangle:rectangle
t)),16()), Equals(90(),Div(MeasureOf(Angle($point_3:point,$point_1:point,$point_2:point)),Degree())), Equals(LengthOf(Line($point_1:point,$point_2:point)),23())])
iteration 1:
    nfev: 47853
     fun: 3.1955382322882393e-05
       x: array([ 24.9999948 ,  13.97624691,  24.85555228, -24.58035311,
        -4.3160756 , -13.22803689,  -7.16907444])
 message: ['requested number of basinhopping iterations completed successfully']
    njev: 4225
     nit: 100
62.00 seconds
ans: 24.9999948016
Exceptiont in full_unit_test
RESULT: (e,p,c) = True, False, False 

(e,p,c) = True, False, False
--------------------------------------------------------------------------------
15/64 complete, 5 correct, 0 penalized, 8 error
--------------------------------------------------------------------------------
id: 1056
full unit_test entry
WWWWWWW opt_model
2.93, Is@6[is]($ABCD:quad@5[ABCD], $rectangle:rectangle@8[rectangle])

completed formulas:
IsRectangle($rectangle:quad)
Is($ABCD:quad,$rectangle:quad)

3.90, Is@1[is](AreaOf@3[area]($ABCD:quad@5[ABCD]), $What:number@0[What])

completed formulas:
Is(AreaOf($ABCD:quad),$What:number)

Is(AreaOf(Quad($point_0:point,$point_2:point,$point_3:point,$point_1:point)),$What:number) None None
IsRectangle(Quad($point_2:point,$point_3:point,$point_1:point,$point_0:point)) TV(norm=0.014, conf=0.98) [quad(a=point(x=129.8064, y=0.5952000000000055), b=point(x=1.3030194533954003, y=1.9852010979830581), c=point(x=0.67692064994478329, y=64.005207081922649), d=point(x=128.67724104782505, y=64.328286469598652))]
Ge(180,30()) TV(norm=0.000, conf=1.00) [180, 30.0]
Equals(2(),LengthOf(Line($point_1:point,$point_2:point))) TV(norm=141.858, conf=0.00) [2.0, 143.85844234992194]
Equals(30(),Div(MeasureOf(Angle($point_2:point,$point_1:point,$point_0:point)),Degree())) TV(norm=3.702, conf=0.87) [30.0, 26.298312749506803]
Is(Quad($point_0:point,$point_2:point,$point_3:point,$point_1:point),Quad($point_2:point,$point_3:point,$point_1:point,$point_0:point)) TV(norm=0.000, conf=1.00) [quad(a=point(x=128.67724104782505, y=64.328286469598652), b=point(x=129.8064, y=0.5952000000000055), c=point(x=1.3030194533954003, y=1.9852010979830581), d=point(x=0.67692064994478329, y=64.005207081922649)), quad(a=point(x=129.8064, y=0.5952000000000055), b=point(x=1.3030194533954003, y=1.9852010979830581), c=point(x=0.67692064994478329, y=64.005207081922649), d=point(x=128.67724104782505, y=64.328286469598652))]
Solving...
Given formulas: set([Is(AreaOf(Quad($point_0:point,$point_2:point,$point_3:point,$point_1:point)),$What:number), IsRectangle(Quad($point_2:point,$point_3:point,$point_1:point,$point_0:point)), Ge(180,30()), Equals(2(),LengthOf(Line($point_1:point,$point_2:point))), Equals(30(),Div(MeasureOf(Angle($point_2:point,$point_1:point,$point_0:point)),Degree())), Is(Quad($point_0:point,$point_2:point,$point_3:point,$point_1:point),Quad($point_2:point,$point_3:point,$point_1:point,$point_0:point))])
iteration 1:
    nfev: 52645
     fun: 1.8207454723917493e-06
       x: array([-0.99570869, -0.25641521, -0.48451409,  0.99124155,  1.73205386,
       -0.59774075, -1.17381598])
 message: ['requested number of basinhopping iterations completed successfully']
    njev: 4901
     nit: 100
Equals(1.7320538640694476,Sqrt(2()))
1.73205386407
Equals(1.7320538640694476,Sqrt(3()))
1.73205386407
Equals(1.7320538640694476,Sqrt(6()))
1.73205386407
Equals(1.7320538640694476,Mul(2(),Sqrt(2())))
1.73205386407
Equals(1.7320538640694476,Mul(2(),Sqrt(3())))
1.73205386407
49.89 seconds
ans: {1: TV(norm=0.318, conf=0.80), 2: TV(norm=0.000, conf=1.00), 3: TV(norm=0.717, conf=0.66), 4: TV(norm=1.096, conf=0.52), 5: TV(norm=1.732, conf=0.33)}
idx 2, answeri: 2.0
Correct for multiple choice: index: 2 value: TV(norm=0.000, conf=1.00), golden: 2.0
RESULT: (e,p,c) = False, False, True 

(e,p,c) = False, False, True
--------------------------------------------------------------------------------
16/64 complete, 6 correct, 0 penalized, 8 error
--------------------------------------------------------------------------------
id: 1057
full unit_test entry
WWWWWWW opt_modERROR:root:1057
ERROR:root:list index out of range
Traceback (most recent call last):
  File "/home/alvaroh/geosolver/geosolver/run.py", line 164, in full_unit_test
    result = _full_unit_test(combined_model, question, label_data)
  File "/home/alvaroh/geosolver/geosolver/run.py", line 325, in _full_unit_test
    local_entities = semantic_tree_to_serialized_entities(match_parse, t, number, value_expr_formulas)
  File "/home/alvaroh/geosolver/geosolver/run.py", line 181, in semantic_tree_to_serialized_entities
    grounded_formula = ground_formulas(match_parse, [formula], value_expr_formulas)[0]
  File "geosolver/grounding/ground_formula.py", line 18, in ground_formulas
    grounded_variable = _ground_variable(match_parse, variable, references)
  File "geosolver/grounding/ground_formula.py", line 205, in _ground_variable
    test_arc = get_instances(graph_parse, 'arc', False, *point_keys).values()[0]
IndexError: list index out of range
ERROR:root:failed to ground variable: $square:square
ERROR:root:failed to ground variable: $square:square
ERROR:root:failed to ground variable: $square:square
ERROR:root:failed to ground variable: $square:square
ERROR:root:failed to ground variable: $square:square
ERROR:root:failed to ground variable: $square:square
ERROR:root:1058
ERROR:root:list index out of range
Traceback (most recent call last):
  File "/home/alvaroh/geosolver/geosolver/run.py", line 164, in full_unit_test
    result = _full_unit_test(combined_model, question, label_data)
  File "/home/alvaroh/geosolver/geosolver/run.py", line 325, in _full_unit_test
    local_entities = semantic_tree_to_serialized_entities(match_parse, t, number, value_expr_formulas)
  File "/home/alvaroh/geosolver/geosolver/run.py", line 181, in semantic_tree_to_serialized_entities
    grounded_formula = ground_formulas(match_parse, [formula], value_expr_formulas)[0]
IndexError: list index out of range
ERROR:root:1059
ERROR:root:list index out of range
Traceback (most recent call last):
  File "/home/alvaroh/geosolver/geosolver/run.py", line 164, in full_unit_test
    result = _full_unit_test(combined_model, question, label_data)
  File "/home/alvaroh/geosolver/geosolver/run.py", line 325, in _full_unit_test
    local_entities = semantic_tree_to_serialized_entities(match_parse, t, number, value_expr_formulas)
  File "/home/alvaroh/geosolver/geosolver/run.py", line 181, in semantic_tree_to_serialized_entities
    grounded_formula = ground_formulas(match_parse, [formula], value_expr_formulas)[0]
IndexError: list index out of range
ERROR:root:1063
ERROR:root:list index out of range
Traceback (most recent call last):
  File "/home/alvaroh/geosolver/geosolver/run.py", line 164, in full_unit_test
    result = _full_unit_test(combined_model, question, label_data)
  File "/home/alvaroh/geosolver/geosolver/run.py", line 325, in _full_unit_test
    local_entities = semantic_tree_to_serialized_entities(match_parse, t, number, value_expr_formulas)
  File "/home/alvaroh/geosolver/geosolver/run.py", line 181, in semantic_tree_to_serialized_entities
    grounded_formula = ground_formulas(match_parse, [formula], value_expr_formulas)[0]
IndexError: list index out of range
el
2.95, IsCenterOf@10[center]($O:point@11[O], $circle:circle@7[circle])
3.02, Two@13[two]($AO:arc@2[AO])

Exceptiont in full_unit_test
RESULT: (e,p,c) = True, False, False 

(e,p,c) = True, False, False
--------------------------------------------------------------------------------
17/64 complete, 6 correct, 0 penalized, 9 error
--------------------------------------------------------------------------------
id: 1058
full unit_test entry
WWWWWWW opt_model
2.47, PointLiesOnLine@12[on]($point:point@11[point], $l:line@14[l])
4.40, IsLine@6[line]($segments:line@7[segments])
4.75, PointLiesOnLine@12[on]($point:point@11[point], $line:line@13[line])
4.77, IntersectAt@8[meet]($segments:line@7[segments], $point:point@11[point])

completed formulas:
PointLiesOnLine($point:point,$l:line)
IntersectAt($segments:line,$point:point)
PointLiesOnLine($point:point,$line:line)
IsLine($segments:line)

5.38, Equals@6[equal](ValueOf@2[value]($y:number@4[y]), SquareOf@9[square](ValueOf@12[value]($x:number@14[x])))
9.25, Is@17[is](ValueOf@19[value]($y:number@21[y]), $What:number@16[what])

Exceptiont in full_unit_test
RESULT: (e,p,c) = True, False, False 

(e,p,c) = True, False, False
--------------------------------------------------------------------------------
18/64 complete, 6 correct, 0 penalized, 10 error
--------------------------------------------------------------------------------
id: 1059
full unit_test entry
WWWWWWW opt_model
4.43, Is@24[is](DiameterOf@9[diameter]($circle:circle@13[circle]), DiameterOf@26[diameter]($circle:circle@30[circle]))
7.37, PointLiesOnLine@16:17[lies_on]($B:point@15[B], $AC:line@6[AC])
9.69, Is@7[is]($line:line@18[line], $AC:line@19[AC])
11.62, IsLine@22[line]($AB:line@23[AB])
12.56, IsLine@5[line]($AC:line@6[AC])

Exceptiont in full_unit_test
RESULT: (e,p,c) = True, False, False 

(e,p,c) = True, False, False
--------------------------------------------------------------------------------
19/64 complete, 6 correct, 0 penalized, 11 error
--------------------------------------------------------------------------------
id: 1063
full unit_test entry
WWWWWWW opt_model
No legal next available.
f and t: Equals($AB:number,6()) Equals@5[@s_0]($AB:number@5[@s_0], 6@5[@s_0])
local entities: [{'content': {'span': [5, 6], 'class': 'TagRule', 'signature': {'class': 'VariableSignature', 'return_type': 'line', 'valence': 0, 'id': 'AB', 'name': 'AB'}}, 'coords': [[165.1, 190.33], [192.5, 95.5]], 'sentence_number': 0}]
f and t: Equals($BC:number,8()) Equals@8[@s_1]($BC:number@8[@s_1], 8@8[@s_1])
local entities: [{'content': {'span': [8, 9], 'class': 'TagRule', 'signature': {'class': 'VariableSignature', 'return_type': 'line', 'valence': 0, 'id': 'BC', 'name': 'BC'}}, 'coords': [[192.5, 95.5], [286.0, 191.0]], 'sentence_number': 0}]
completed formulas:

3.90, Is@1[is](AreaOf@3[area]($ABC:triangle@6[ABC]), $What:number@0[What])
4.86, IsTriangle@5[triangle]($ABC:triangle@6[ABC])

Exceptiont in full_unit_test
RESULT: (e,p,c) = True, False, False 

(e,p,c) = True, False, False
--------------------------------------------------------------------------------
20/64 complete, 6 correct, 0 penalized, 12 error
--------------------------------------------------------------------------------
id: 1064
full unit_test entry
WWWWWWW opt_model
No legal next available.
f and t: Ge(Ge(3(),$a:number),5()) Ge@5[@s_0](Ge@5[@s_0](3@5[@s_0], $a:number@5[@s_0]), 5@5[@s_0])
local entities: []
f and t: Ge(Ge(6(),$b:number),8()) Ge@8[@s_1](Ge@8[@s_1](6@8[@s_1], $b:number@8[@s_1]), 8@8[@s_1])
local entities: []
completed formulas:

No legal next available.
completed formulas:

Ge(Ge(3(),$a:number),5()) None None
Equals($c:number,LengthOf(Line($point_0:point,$point_2:point))) None None
Equals($a:number,LengthOf(Line($point_1:point,$point_2:point))) None None
Equals($b:number,LengthOf(Line($point_0:point,$point_1:point))) None None
Ge(Ge(6(),$b:number),8()) None None
Solving...
Given formulas: set([Ge(Ge(3(),$a:number),5()), Equals($c:number,LengthOf(Line($point_0:point,$point_2:point))), Equals($a:number,LengthOf(Line($point_1:point,$point_2:point))), EERROR:root:1064
ERROR:root:No query formula.
Traceback (most recent call last):
  File "/home/alvaroh/geosolver/geosolver/run.py", line 164, in full_unit_test
    result = _full_unit_test(combined_model, question, label_data)
  File "/home/alvaroh/geosolver/geosolver/run.py", line 382, in _full_unit_test
    ans = solve(reduced_formulas, choice_formulas, assignment=None)#core_parse.variable_assignment)
  File "geosolver/solver/solve.py", line 32, in solve
    raise Exception("No query formula.")
Exception: No query formula.
ERROR:root:1065
ERROR:root:list index out of range
Traceback (most recent call last):
  File "/home/alvaroh/geosolver/geosolver/run.py", line 164, in full_unit_test
    result = _full_unit_test(combined_model, question, label_data)
  File "/home/alvaroh/geosolver/geosolver/run.py", line 325, in _full_unit_test
    local_entities = semantic_tree_to_serialized_entities(match_parse, t, number, value_expr_formulas)
  File "/home/alvaroh/geosolver/geosolver/run.py", line 181, in semantic_tree_to_serialized_entities
    grounded_formula = ground_formulas(match_parse, [formula], value_expr_formulas)[0]
IndexError: list index out of range
ERROR:root:1067
ERROR:root:list index out of range
Traceback (most recent call last):
  File "/home/alvaroh/geosolver/geosolver/run.py", line 164, in full_unit_test
    result = _full_unit_test(combined_model, question, label_data)
  File "/home/alvaroh/geosolver/geosolver/run.py", line 325, in _full_unit_test
    local_entities = semantic_tree_to_serialized_entities(match_parse, t, number, value_expr_formulas)
  File "/home/alvaroh/geosolver/geosolver/run.py", line 181, in semantic_tree_to_serialized_entities
    grounded_formula = ground_formulas(match_parse, [formula], value_expr_formulas)[0]
IndexError: list index out of range
ERROR:root:no instance found of type angle
ERROR:root:no instance found of type angle
ERROR:root:no instance found of type angle
ERROR:root:no instance found of type angle
ERROR:root:1070
ERROR:root:list index out of range
Traceback (most recent call last):
  File "/home/alvaroh/geosolver/geosolver/run.py", line 164, in full_unit_test
    result = _full_unit_test(combined_model, question, label_data)
  File "/home/alvaroh/geosolver/geosolver/run.py", line 325, in _full_unit_test
    local_entities = semantic_tree_to_serialized_entities(match_parse, t, number, value_expr_formulas)
  File "/home/alvaroh/geosolver/geosolver/run.py", line 181, in semantic_tree_to_serialized_entities
    grounded_formula = ground_formulas(match_parse, [formula], value_expr_formulas)[0]
IndexError: list index out of range
ERROR:root:failed to ground variable: $rectangle:rectangle
ERROR:root:failed to ground variable: $rectangle:rectangle
ERROR:root:failed to ground variable: $rectangle:rectangle
ERROR:root:failed to ground variable: $rectangle:rectangle
ERROR:root:failed to ground variable: $rectangle:rectangle
ERROR:root:failed to ground variable: $rectangle:rectangle
ERROR:root:failed to ground variable: $rectangle:rectangle
ERROR:root:failed to ground variable: $rectangle:rectangle
ERROR:root:failed to ground variable: $rectangle:rectangle
ERROR:root:failed to ground variable: $rectangle:rectangle
ERROR:root:failed to ground variable: $rectangle:rectangle
ERROR:root:failed to ground variable: $rectangle:rectangle
ERROR:root:failed to ground variable: $rectangle:rectangle
ERROR:root:failed to ground variable: $rectangle:rectangle
ERROR:root:failed to ground variable: $rectangle:rectangle
ERROR:root:failed to ground variable: $rectangle:rectangle
ERROR:root:failed to ground variable: $rectangle:rectangle
ERROR:root:failed to ground variable: $rectangle:rectangle
ERROR:root:failed to ground variable: $rectangle:rectangle
ERROR:root:failed to ground variable: $rectangle:rectangle
ERROR:root:failed to ground variable: $rectangle:rectangle
ERROR:root:failed to ground variable: $rectangle:rectangle
ERROR:root:failed to ground variable: $rectangle:rectangle
ERROR:root:failed to ground variable: $rectangle:rectangle
ERROR:root:failed to ground variable: $rectangle:rectangle
ERROR:root:failed to ground variable: $rectangle:rectangle
quals($b:number,LengthOf(Line($point_0:point,$point_1:point))), Ge(Ge(6(),$b:number),8())])
Exceptiont in full_unit_test
RESULT: (e,p,c) = True, False, False 

(e,p,c) = True, False, False
--------------------------------------------------------------------------------
21/64 complete, 6 correct, 0 penalized, 13 error
--------------------------------------------------------------------------------
id: 1065
full unit_test entry
WWWWWWW opt_model

Exceptiont in full_unit_test
RESULT: (e,p,c) = True, False, False 

(e,p,c) = True, False, False
--------------------------------------------------------------------------------
22/64 complete, 6 correct, 0 penalized, 14 error
--------------------------------------------------------------------------------
id: 1067
full unit_test entry
WWWWWWW opt_model

Exceptiont in full_unit_test
RESULT: (e,p,c) = True, False, False 

(e,p,c) = True, False, False
--------------------------------------------------------------------------------
23/64 complete, 6 correct, 0 penalized, 15 error
--------------------------------------------------------------------------------
id: 1070
full unit_test entry
WWWWWWW opt_model
2.84, IntersectAt@8[meet]($segments:line@7[segments], $point:point@11[point])
3.77, IsLine@6[line]($segments:line@7[segments])

Exceptiont in full_unit_test
RESULT: (e,p,c) = True, False, False 

(e,p,c) = True, False, False
--------------------------------------------------------------------------------
24/64 complete, 6 correct, 0 penalized, 16 error
--------------------------------------------------------------------------------
id: 1071
full unit_test entry
WWWWWWW opt_model
2.93, Is@6[is]($ABCD:quad@5[ABCD], $rectangle:rectangle@8[rectangle])

f and t: Equals($FC:number,$ED:number) Equals@10[@s_0]($FC:number@10[@s_0], $ED:number@10[@s_0])
local entities: [{'content': {'span': [10, 11], 'class': 'TagRule', 'signature': {'class': 'VariableSignature', 'return_type': 'line', 'valence': 0, 'id': 'FC', 'name': 'FC'}}, 'coords': [[430.31, 46.68], [490.01, 46.66]], 'sentence_number': 0}, {'content': {'span': [10, 11], 'class': 'TagRule', 'signature': {'class': 'VariableSignature', 'return_type': 'line', 'valence': 0, 'id': 'ED', 'name': 'ED'}}, 'coords': [[429.21, 217.39], [492.0, 217.0]], 'sentence_number': 0}]
completed formulas:
IsRectangle($rectangle:quad)
Is($ABCD:quad,$rectangle:quad)

1.34, IsRectangle@4[rectangle]($is:quad@5[is])
No legal next available.

completed formulas:
IsRectangle($is:quad)

IsRectangle(Quad($point_3:point,$point_1:point,$point_2:point,$point_0:point)) TV(norm=0.339, conf=0.42) [quad(a=point(x=184.31078124228458, y=0.6773713550866205), b=point(x=1.4547418910612748, y=114.28753114302583), c=point(x=183.21352644551376, y=171.38598115133343), d=point(x=244.7146306358855, y=58.098176170878496))]
PointLiesOnLine($point_1:point,Line($point_4:point,$point_6:point)) TV(norm=0.021, conf=0.99) [point(x=1.4547418910612748, y=114.28753114302583), line(a=point(x=1.9999291031548978, y=0.0040647524518533373), b=point(x=0.011627082594827698, y=170.66671393123005))]
PointLiesOnLine($point_0:point,Line($point_5:point,$point_7:point)) TV(norm=0.001, conf=1.00) [point(x=244.7146306358855, y=58.098176170878496), line(a=point(x=246.0, y=171.0), b=point(x=244.00577704871264, y=0.66262510995410651))]
PointLiesOnLine($point_2:point,Line($point_5:point,$point_6:point)) TV(norm=0.010, conf=1.00) [point(x=183.21352644551376, y=171.38598115133343), line(a=point(x=246.0, y=171.0), b=point(x=0.011627082594827698, y=170.66671393123005))]
IsRectangle(Quad($point_4:point,$point_6:point,$point_5:point,$point_7:point)) TV(norm=0.012, conf=0.99) [quad(a=point(x=1.9999291031548978, y=0.0040647524518533373), b=point(x=0.011627082594827698, y=170.66671393123005), c=point(x=246.0, y=171.0), d=point(x=244.00577704871264, y=0.66262510995410651))]
Equals(LengthOf(Line($point_3:point,$point_7:point)),LengthOf(Line($point_2:point,$point_5:point))) TV(norm=3.093, conf=0.95) [59.694997627784609, 62.787659956852863]
Is(Quad($point_5:point,$point_7:point,$point_4:point,$point_6:point),Quad($point_4:poinERROR:root:1071
ERROR:root:No query formula.
Traceback (most recent call last):
  File "/home/alvaroh/geosolver/geosolver/run.py", line 164, in full_unit_test
    result = _full_unit_test(combined_model, question, label_data)
  File "/home/alvaroh/geosolver/geosolver/run.py", line 382, in _full_unit_test
    ans = solve(reduced_formulas, choice_formulas, assignment=None)#core_parse.variable_assignment)
  File "geosolver/solver/solve.py", line 32, in solve
    raise Exception("No query formula.")
Exception: No query formula.
ERROR:root:failed to ground variable: $tangent:tangent
ERROR:root:failed to ground variable: $tangent:tangent
ERROR:root:failed to ground variable: $tangent:tangent
ERROR:root:failed to ground variable: $tangent:tangent
ERROR:root:failed to ground variable: $tangent:tangent
ERROR:root:failed to ground variable: $tangent:tangent
ERROR:root:failed to ground variable: $tangent:tangent
ERROR:root:failed to ground variable: $tangent:tangent
ERROR:root:failed to ground variable: $tangent:tangent
ERROR:root:failed to ground variable: $tangent:tangent
ERROR:root:failed to ground variable: $tangent:tangent
ERROR:root:failed to ground variable: $tangent:tangent
ERROR:root:failed to ground variable: $tangent:tangent
ERROR:root:failed to ground variable: $tangent:tangent
ERROR:root:failed to ground variable: $tangent:tangent
ERROR:root:failed to ground variable: $tangent:tangent
ERROR:root:failed to ground variable: $tangent:tangent
ERROR:root:failed to ground variable: $tangent:tangent
ERROR:root:failed to ground variable: $tangent:tangent
ERROR:root:failed to ground variable: $tangent:tangent
ERROR:root:failed to ground variable: $tangent:tangent
ERROR:root:failed to ground variable: $tangent:tangent
ERROR:root:failed to ground variable: $tangent:tangent
ERROR:root:failed to ground variable: $tangent:tangent
ERROR:root:failed to ground variable: $tangent:tangent
t,$point_6:point,$point_5:point,$point_7:point)) TV(norm=0.000, conf=1.00) [quad(a=point(x=246.0, y=171.0), b=point(x=244.00577704871264, y=0.66262510995410651), c=point(x=1.9999291031548978, y=0.0040647524518533373), d=point(x=0.011627082594827698, y=170.66671393123005)), quad(a=point(x=1.9999291031548978, y=0.0040647524518533373), b=point(x=0.011627082594827698, y=170.66671393123005), c=point(x=246.0, y=171.0), d=point(x=244.00577704871264, y=0.66262510995410651))]
PointLiesOnLine($point_3:point,Line($point_4:point,$point_7:point)) TV(norm=0.004, conf=1.00) [point(x=184.31078124228458, y=0.6773713550866205), line(a=point(x=1.9999291031548978, y=0.0040647524518533373), b=point(x=244.00577704871264, y=0.66262510995410651))]
Solving...
Given formulas: set([IsRectangle(Quad($point_3:point,$point_1:point,$point_2:point,$point_0:point)), PointLiesOnLine($point_1:point,Line($point_4:point,$point_6:point)), PointLiesOnLine($point_0:point,Line($point_5:point,$point_7:point)), PointLiesOnLine($point_2:point,Line($point_5:point,$point_6:point)), IsRectangle(Quad($point_4:point,$point_6:point,$point_5:point,$point_7:point)), Equals(LengthOf(Line($point_3:point,$point_7:point)),LengthOf(Line($point_2:point,$point_5:point))), Is(Quad($point_5:point,$point_7:point,$point_4:point,$point_6:point),Quad($point_4:point,$point_6:point,$point_5:point,$point_7:point)), PointLiesOnLine($point_3:point,Line($point_4:point,$point_7:point))])
Exceptiont in full_unit_test
RESULT: (e,p,c) = True, False, False 

(e,p,c) = True, False, False
--------------------------------------------------------------------------------
25/64 complete, 6 correct, 0 penalized, 17 error
--------------------------------------------------------------------------------
id: 1083
full unit_test entry
WWWWWWW opt_model
2.95, Tangent@3[tangent]($AB:line@1[AB], $O:circle@6[O])
3.93, IsCircle@5[circle]($O:circle@6[O])
4.85, IsLine@0[Line]($AB:line@1[AB])
5.05, Tangent@3[tangent]($AB:line@1[AB], $is:quad@2[is])

completed formulas:
Tangent($AB:line,$is:quad)
IsCircle($O:circle)
Tangent($AB:line,$O:circle)
IsLine($AB:line)

2.94, Find@7[find](DiameterOf@9[diameter]($circle:circle@12[circle]))
No legal next available.

f and t: Equals($AB:number,8()) Equals@1[@s_0]($AB:number@1[@s_0], 8@1[@s_0])
local entities: [{'content': {'span': [1, 2], 'class': 'TagRule', 'signature': {'class': 'VariableSignature', 'return_type': 'line', 'valence': 0, 'id': 'AB', 'name': 'AB'}}, 'coords': [[157.39, 130.73], [271.53, 129.96]], 'sentence_number': 1}]
f and t: Equals($OB:number,10()) Equals@4[@s_1]($OB:number@4[@s_1], 10@4[@s_1])
local entities: [{'content': {'span': [4, 5], 'class': 'TagRule', 'signature': {'class': 'VariableSignature', 'return_type': 'line', 'valence': 0, 'id': 'OB', 'name': 'OB'}}, 'coords': [[154.89, 207.2], [271.53, 129.96]], 'sentence_number': 1}]
completed formulas:
Find(DiameterOf($circle:circle))

Find(DiameterOf(Circle($point_1:point,$radius_1_0:number))) TV(norm=0.000, conf=1.00) [149.27156066894531]
PointLiesOnLine($point_0:point,Line($point_3:point,$point_5:point)) TV(norm=0.056, conf=0.98) [point(x=251.53069077860144, y=3.9630766325133422), line(a=point(x=0.0, y=4.0), b=point(x=270.0, y=5.0))]
PointLiesOnCircle($point_2:point,Circle($point_1:point,$radius_1_0:number)) TV(norm=1.877, conf=0.98) [point(x=137.3949121282204, y=4.7287725331053885), circle(center=point(x=134.89111759572378, y=81.200569979273482), radius=74.63578)]
PointLiesOnLine($point_2:point,Line($point_3:point,$point_5:point)) TV(norm=0.003, conf=1.00) [point(x=137.3949121282204, y=4.7287725331053885), line(a=point(x=0.0, y=4.0), b=point(x=270.0, y=5.0))]
Tangent(Line($point_2:point,$point_0:point),Circle($point_1:point,$radius_1_0:number)) TV(norm=1.817, conf=0.98) [line(a=point(x=137.3949121282204, y=4.7287725331053885), b=point(x=251.53069077860144, y=3.9630766325133422)), circle(center=point(x=134.89111759572378, y=81.200569979273482), radius=74.63578)]
PointLiesOnLine($point_4:point,Line($point_0:point,$point_1:point)) TV(norm=0.009, conf=1.00) [point(x=197.23299441288395, y=39.553163326008821), line(a=point(x=251.53069077860144, y=3.9630766325133422), b=point(x=134.89111759572378, y=81.200569979273482))]
PointLiesOnLine($point_2:point,Line($point_0:point,$point_3:point)) TV(norm=0.012, conf=1.00) [point(x=137.3949121282204, y=4.7287725331053885), line(a=point(x=251.53069077860144, y=3.9630766325133422), b=point(x=0.0, y=4.0))]
Equals(LengthOf(Line($point_2:point,$point_0:point)),8()) TV(norm=106.138, conf=0.00) [114.13834701072624, 8.0]
PointLiesOnCircle($point_4:point,Circle($point_1:point,$radius_1_0:number)) TV(norm=0.338, conf=1.00) [point(x=197.23299441288395, y=39.553163326008821), circle(center=point(x=134.89111759572378, y=81.200569979273482), radius=74.63578)]
Equals(LengthOf(Line($point_1:point,$point_0:point)),10()) TV(norm=129.894, conf=0.00) [139.89431872229369, 10.0]
PointLiesOnLine($point_0:point,Line($point_2:point,$point_5:point)) TV(norm=0.063, conf=0.98) [point(x=251.53069077860144, y=3.9630766325133422), line(a=point(x=137.3949121282204, y=4.7287725331053885), b=point(x=270.0, y=5.0))]
Tangent(Line($point_2:point,$point_0:point),Quad($point_4:point,$point_5:point,$point_2:point,$point_1:point)) TV(norm=2.295, conf=0.57) [line(a=point(x=137.3949121282204, y=4.7287725331053885), b=point(x=251.53069077860144, y=3.9630766325133422)), quad(a=point(x=197.23299441288395, y=39.553163326008821), b=point(x=270.0, y=5.0), c=point(x=137.3949121282204, y=4.7287725331053885), d=point(x=134.89111759572378, y=81.200569979273482))]
Solving...
Given formulas: set([Find(DiameterOf(Circle($point_1:point,$radius_1_0:number))), PointLiesOnLine($point_0:point,Line($point_3:point,$point_5:point)), PointLiesOnCircle($point_2:point,Circle($point_1:point,$radius_1_0:number)), PointLiesOnLine($point_2:point,Line($point_3:point,$point_5:point)), Tangent(Line($point_2:point,$point_0:point),Circle($point_1:point,$radius_1_0:number)), PointLiesOnLine($point_4:point,Line($point_0:point,$point_1:point)), PointLiesOnLine($point_2:point,Line($point_0:point,$point_3:point)), Equals(LengthOf(Line($point_2:point,$point_0:point)),8()), PointLiesOnCircle($point_4:point,Circle($point_1:point,$radius_1_0:number)), Equals(LengthOf(Line($point_1:point,$point_0:point)),10()), PointLiesOnLine($point_0:point,Line($point_2:point,$point_5:point)), Tangent(Line($point_2:point,$point_0:point),Quad($point_4:point,$point_5:point,$point_2:point,$point_1:point))])
iteration 1:
    nfev: 94731
     fun: 0.0054660488765587521
       x: array([  8.51822765,  -5.59249726,   0.42758999,   8.53305378,
        43.29237688,   0.42643348,  -1.96737857,   3.71167206,
         6.02027654, -30.28933337,   0.43167668])
 message: ['requested number of basinhopping iterations completed successfully']
    njev: 6501
     nit: 100
iteration 2:
    nfev: 83222
     fun: 0.0061609939643395839
       x: array([  8.46720773,  -5.66199509,   0.42758999,   8.53491008,
        32.78535105,   0.43054863,  -1.95204691,   3.63705129,
         6.09016634, -27.10983545,   0.42536293])
 message: ['requested number of basinhopping iterations completed successfully']
    njev: 5631
     nit: 100
iteration 3:
    nfev: 80988
     fun: 0.0045338946323681285
       x: array([  8.58453357,   6.36035375,   0.42758999,   8.53342786,
        28.82248438,   0.43129975,   2.84039022,   3.80863063,
         5.93286525, -17.5740006 ,   0.42330593])
 message: ['requested number of basinhopping iterations completed successfully']
    njev: 5398
     nit: 100
Equals(DiameterOf(Circle($point_1:point,$radius_1_0:number)),4())
('Key: ', TV(norm=7.866, conf=0.01))
Equals(DiameterOf(Circle($point_1:point,$radius_1_0:number)),6())
('Key: ', TV(norm=5.866, conf=0.34))
Equals(DiameterOf(Circle($point_1:point,$radius_1_0:number)),8())
('Key: ', TV(norm=3.866, conf=0.61))
Equals(DiameterOf(Circle($point_1:point,$radius_1_0:number)),10())
('Key: ', TV(norm=1.866, conf=0.83))
Equals(DiameterOf(Circle($point_1:point,$radius_1_0:number)),12())
('Key: ', TV(norm=0.134, conf=0.99))
403.11 seconds
ans: {1: TV(norm=7.866, conf=0.01), 2: TV(norm=5.866, conf=0.34), 3: TV(norm=3.866, conf=0.61), 4: TV(norm=1.8ERROR:root:1087
ERROR:root:No query formula.
Traceback (most recent call last):
  File "/home/alvaroh/geosolver/geosolver/run.py", line 164, in full_unit_test
    result = _full_unit_test(combined_model, question, label_data)
  File "/home/alvaroh/geosolver/geosolver/run.py", line 382, in _full_unit_test
    ans = solve(reduced_formulas, choice_formulas, assignment=None)#core_parse.variable_assignment)
  File "geosolver/solver/solve.py", line 32, in solve
    raise Exception("No query formula.")
Exception: No query formula.
ERROR:root:failed to ground variable: $side:side
ERROR:root:failed to ground variable: $side:side
ERROR:root:failed to ground variable: $side:side
ERROR:root:failed to ground variable: $side:side
ERROR:root:failed to ground variable: $side:side
ERROR:root:failed to ground variable: $side:side
ERROR:root:failed to ground variable: $side:side
ERROR:root:failed to ground variable: $side:side
ERROR:root:failed to ground variable: $side:side
ERROR:root:failed to ground variable: $side:side
ERROR:root:1089
ERROR:root:list index out of range
Traceback (most recent call last):
  File "/home/alvaroh/geosolver/geosolver/run.py", line 164, in full_unit_test
    result = _full_unit_test(combined_model, question, label_data)
  File "/home/alvaroh/geosolver/geosolver/run.py", line 325, in _full_unit_test
    local_entities = semantic_tree_to_serialized_entities(match_parse, t, number, value_expr_formulas)
  File "/home/alvaroh/geosolver/geosolver/run.py", line 181, in semantic_tree_to_serialized_entities
    grounded_formula = ground_formulas(match_parse, [formula], value_expr_formulas)[0]
IndexError: list index out of range
ERROR:root:1090
ERROR:root:'float' object has no attribute 'conf'
Traceback (most recent call last):
  File "/home/alvaroh/geosolver/geosolver/run.py", line 164, in full_unit_test
    result = _full_unit_test(combined_model, question, label_data)
  File "/home/alvaroh/geosolver/geosolver/run.py", line 341, in _full_unit_test
    local_entities = formula_to_serialized_entities(match_parse, f, tree, number)
  File "/home/alvaroh/geosolver/geosolver/run.py", line 196, in formula_to_serialized_entities
    grounded_formula = ground_formulas(match_parse, [formula])[0]
  File "geosolver/grounding/ground_formula.py", line 27, in ground_formulas
    scores.append(sum(s.conf for s in local_scores if s is not None))
  File "geosolver/grounding/ground_formula.py", line 27, in <genexpr>
    scores.append(sum(s.conf for s in local_scores if s is not None))
AttributeError: 'float' object has no attribute 'conf'
ERROR:root:failed to ground variable: $tangent:tangent
ERROR:root:failed to ground variable: $tangent:tangent
ERROR:root:failed to ground variable: $tangent:tangent
ERROR:root:failed to ground variable: $tangent:tangent
ERROR:root:failed to ground variable: $tangent:tangent
ERROR:root:failed to ground variable: $tangent:tangent
ERROR:root:failed to ground variable: $tangent:tangent
ERROR:root:failed to ground variable: $tangent:tangent
ERROR:root:failed to ground variable: $tangent:tangent
ERROR:root:failed to ground variable: $tangent:tangent
ERROR:root:failed to ground variable: $tangent:tangent
ERROR:root:failed to ground variable: $tangent:tangent
ERROR:root:failed to ground variable: $tangent:tangent
ERROR:root:1092
ERROR:root:list index out of range
Traceback (most recent call last):
  File "/home/alvaroh/geosolver/geosolver/run.py", line 164, in full_unit_test
    result = _full_unit_test(combined_model, question, label_data)
  File "/home/alvaroh/geosolver/geosolver/run.py", line 325, in _full_unit_test
    local_entities = semantic_tree_to_serialized_entities(match_parse, t, number, value_expr_formulas)
  File "/home/alvaroh/geosolver/geosolver/run.py", line 181, in semantic_tree_to_serialized_entities
    grounded_formula = ground_formulas(match_parse, [formula], value_expr_formulas)[0]
IndexError: list index out of range
66, conf=0.83), 5: TV(norm=0.134, conf=0.99)}
idx 5, answeri: 5.0
Correct for multiple choice: index: 5 value: TV(norm=0.134, conf=0.99), golden: 5.0
RESULT: (e,p,c) = False, False, True 

(e,p,c) = False, False, True
--------------------------------------------------------------------------------
26/64 complete, 7 correct, 0 penalized, 17 error
--------------------------------------------------------------------------------
id: 1087
full unit_test entry
WWWWWWW opt_model
0.79, IsAngle@12[angle]($Which:ground@0[Which])

completed formulas:
IsAngle($Which:ground)

Equals(90(),Div(MeasureOf(Angle($point_4:point,$point_5:point,$point_0:point)),Degree())) TV(norm=0.849, conf=0.99) [90.0, 89.15053668400549]
PointLiesOnLine($point_5:point,Line($point_2:point,$point_4:point)) TV(norm=0.000, conf=1.00) [point(x=71.617792421746287, y=44.909390444810548), line(a=point(x=-1.4210854715202004e-14, y=100.0), b=point(x=103.09758551307847, y=20.694164989939637))]
PointLiesOnLine($point_5:point,Line($point_0:point,$point_3:point)) TV(norm=0.030, conf=0.99) [point(x=71.617792421746287, y=44.909390444810548), line(a=point(x=105.0, y=87.0), b=point(x=35.617806791366384, y=2.1782604575879247))]
Ge(180,90()) TV(norm=0.000, conf=1.00) [180, 90.0]
PointLiesOnLine($point_4:point,Line($point_1:point,$point_3:point)) TV(norm=0.018, conf=0.99) [point(x=103.09758551307847, y=20.694164989939637), line(a=point(x=291.5, y=76.0), b=point(x=35.617806791366384, y=2.1782604575879247))]
Solving...
Given formulas: set([Equals(90(),Div(MeasureOf(Angle($point_4:point,$point_5:point,$point_0:point)),Degree())), PointLiesOnLine($point_5:point,Line($point_2:point,$point_4:point)), PointLiesOnLine($point_5:point,Line($point_0:point,$point_3:point)), Ge(180,90()), PointLiesOnLine($point_4:point,Line($point_1:point,$point_3:point))])
Exceptiont in full_unit_test
RESULT: (e,p,c) = True, False, False 

(e,p,c) = True, False, False
--------------------------------------------------------------------------------
27/64 complete, 7 correct, 0 penalized, 18 error
--------------------------------------------------------------------------------
id: 1089
full unit_test entry
WWWWWWW opt_model
3.88, Is@1[is](LengthOf@3[length]($AC:line@6[AC]), $What:number@0[What])
4.82, IsSideOf@5[side]($AC:line@6[AC])

Exceptiont in full_unit_test
RESULT: (e,p,c) = True, False, False 

(e,p,c) = True, False, False
--------------------------------------------------------------------------------
28/64 complete, 7 correct, 0 penalized, 19 error
--------------------------------------------------------------------------------
id: 1090
full unit_test entry
WWWWWWW opt_model
3.88, Is@5[is](MeasureOf@1[measure]($ABC:angle@4[ABC]), $@v_0:number@6[@v_0])
4.84, IsAngle@3[angle]($ABC:angle@4[ABC])

f and t: Mul(30(),Degree()) Mul@6[@v_0](30@6[@v_0], Degree@6[@v_0])
Exceptiont in full_unit_test
RESULT: (e,p,c) = True, False, False 

(e,p,c) = True, False, False
--------------------------------------------------------------------------------
29/64 complete, 7 correct, 0 penalized, 20 error
--------------------------------------------------------------------------------
id: 1092
full unit_test entry
WWWWWWW opt_model
2.79, Tangent@3[tangent]($AB:line@1[AB], $O:circle@6[O])
3.76, IsCircle@5[circle]($O:circle@6[O])
4.68, IsLine@0[Line]($AB:line@1[AB])

Exceptiont in full_unit_test
RESULT: (e,p,c) = True, False, False 

(e,p,c) = True, False, False
--------------------------------------------------------------------------------
30/64 complete, 7 correct, 0 penalized, 21 error
--------------------------------------------------------------------------------
id: 1095
full unit_test entry
WWWWWWW opt_model
2.93, Perpendicular@17[perpendicular]($EF:line@15[EF], $CD:line@20[CD])
5.86, Parallel@8[parallel]($AB:line@6[AB], $CD:line@11[CD])
8.19, Is@7[is]($line:line@5[line], $line:line@14[line])
9.62, IsLine@19[line]($line:line@10[line])
9.98, Is@16[is]($EF:line@15[EF], $line:line@14[line])

completed formulas:
Parallel($AB:line,$CD:line)
Is($EF:line,$line:line)
Perpendicular($EF:line,$CD:line)
IsLine($line:line)
Is($line:line,$line:line)

3.92, Is@1[is](MeasureOf@3[measure]($x:angle@6[x]), $What:number@0[What])
4.88, IsAngle@5[angle]($x:angle@6[x])

completed formulas:
Is(MeasureOf($x:angle),$What:number)
IsAngle($x:angle)

Parallel(Line($point_0:point,$point_5:point),Line($point_4:point,$point_1:point)) TV(norm=0.000, conf=1.00) [line(a=point(x=1.0, y=55.0), b=point(x=228.0, y=55.0)), line(a=point(x=29.0, y=156.0), b=point(x=257.0, y=156.0))]
PointLiesOnLine($point_3:point,Line($point_1:point,$point_4:point)) TV(norm=0.000, conf=1.00) [point(x=127.31111111111112, y=156.0), line(a=point(x=257.0, y=156.0), b=point(x=29.0, y=156.0))]
PointLiesOnLine($point_12:point,Line($point_8:point,$point_11:point)) TV(norm=0.000, conf=1.00) [point(x=127.59041110004465, y=93.157502489954325), line(a=point(x=18.0, y=15.0), b=point(x=215.70652173913044, y=156.0))]
PointLiesOnLine($point_9:point,Line($point_8:point,$point_12:point)) TV(norm=0.000, conf=1.00) [point(x=74.086956521739125, y=55.0), line(a=point(x=18.0, y=15.0), b=point(x=127.59041110004465, y=93.157502489954325))]
Equals(140(),Div(MeasureOf(Angle($point_8:point,$point_9:point,$point_2:point)),Degree())) TV(norm=4.504, conf=0.97) [140.0, 144.504358722503]
PointLiesOnLine($point_11:point,Line($point_10:point,$point_12:point)) TV(norm=0.000, conf=1.00) [point(x=215.70652173913044, y=156.0), line(a=point(x=276.0, y=199.0), b=point(x=127.59041110004465, y=93.157502489954325))]
Ge(Pi(),MeasureOf(Angle($point_10:point,$point_12:point,$point_6:point))) TV(norm=0.000, conf=1.00) [3.141592653589793, 0.95572493157672744]
PointLiesOnLine($point_2:point,Line($point_0:point,$point_5:point)) TV(norm=0.000, conf=1.00) [point(x=127.75999999999999, y=55.0), line(a=point(x=1.0, y=55.0), b=point(x=228.0, y=55.0))]
PointLiesOnLine($point_2:point,Line($point_5:point,$point_9:point)) TV(norm=0.000, conf=1.00) [point(x=127.75999999999999, y=55.0), line(a=point(x=228.0, y=55.0), b=point(x=74.086956521739125, y=55.0))]
PointLiesOnLine($point_12:point,Line($point_2:point,$point_6:point)) TV(norm=0.000, conf=1.00) [point(x=127.59041110004465, y=93.157502489954325), line(a=point(x=127.75999999999999, y=55.0), b=point(x=127.0, y=226.0))]
PointLiesOnLine($point_3:point,Line($point_2:point,$point_6:point)) TV(norm=0.000, conf=1.00) [point(x=127.31111111111112, y=156.0), line(a=point(x=127.75999999999999, y=55.0), b=point(x=127.0, y=226.0))]
PointLiesOnLine($point_9:point,Line($point_0:point,$point_5:point)) TV(norm=0.000, conf=1.00) [point(x=74.086956521739125, y=55.0), line(a=point(x=1.0, y=55.0), b=point(x=228.0, y=55.0))]
PointLiesOnLine($point_9:point,Line($point_8:point,$point_11:point)) TV(norm=0.000, conf=1.00) [point(x=74.086956521739125, y=55.0), line(a=point(x=18.0, y=15.0), b=point(x=215.70652173913044, y=156.0))]
PointLiesOnLine($point_9:point,Line($point_0:point,$point_2:point)) TV(norm=0.000, conf=1.00) [point(x=74.086956521739125, y=55.0), line(a=point(x=1.0, y=55.0), b=point(x=127.75999999999999, y=55.0))]
PointLiesOnLine($point_11:point,Line($point_1:point,$point_3:point)) TV(norm=0.000, conf=1.00) [point(x=215.70652173913044, y=156.0), line(a=point(x=257.0, y=156.0), b=point(x=127.31111111111112, y=156.0))]
PointLiesOnLine($point_2:point,Line($point_6:point,$point_7:point)) TV(norm=0.000, conf=1.00) [point(x=127.75999999999999, y=55.0), line(a=point(x=127.0, y=226.0), b=point(x=128.0, y=1.0))]
PointLiesOnLine($point_12:point,Line($point_9:point,$point_11:point)) TV(norm=0.000, conf=1.00) [point(x=127.59041110004465, y=93.157502489954325), line(a=point(x=74.086956521739125, y=55.0), b=point(x=215.70652173913044, y=156.0))]
PointLiesOnLine($point_12:point,Line($point_2:point,$point_3:point)) TV(norm=0.000, conf=1.00) [point(x=127.59041110004465, y=93.157502489954325), line(a=point(x=127.75999999999999, y=55.0), b=point(x=127.31111111111112, y=156.0))]
Is(MeasureOf(Angle($point_10:point,$point_12:point,$point_6:point)),$What:number) None None
Perpendicular(Line($point_7:point,$point_6:point),Line($point_4:point,$point_1:point)) TV(norm=0.004, conf=1.00) [line(a=point(x=128.0, y=1.0), b=point(x=127.0, y=226.0)), line(a=point(x=29.0, y=156.0), b=point(x=257.0, y=156.0))]
PointLiesOnLine($point_12:point,Line($point_6:point,$point_7:point)) TV(norm=0.000, conf=1.00) [point(x=127.59041110004465, y=93.157502489954325), line(a=point(x=127.0, y=226.0), b=point(x=128.0, y=1.0))]
PointLiesOnLine($point_9:point,Line($point_8:point,$point_10:point)) TV(norm=0.000, conf=1.00) [point(x=74.086956521739125, y=55.0), line(a=point(x=18.0, y=15.0), b=point(x=276.0, y=199.0))]
PointLiesOnLine($point_3:point,Line($point_6:point,$point_7:point)) TV(norm=0.000, conf=1.00) [point(x=127.31111111111112, y=156.0), line(a=point(x=127.0, y=226.0), b=point(x=128.0, y=1.0))]
PointLiesOnLine($point_2:point,Line($point_3:point,$point_7:point)) TV(norm=0.000, conf=1.00) [point(x=127.75999999999999, y=55.0), line(a=point(x=127.31111111111112, y=156.0), b=point(x=128.0, y=1.0))]
PointLiesOnLine($point_3:point,Line($point_4:point,$point_11:point)) TV(norm=0.000, conf=1.00) [point(x=127.31111111111112, y=156.0), line(a=point(x=29.0, y=156.0), b=point(x=215.70652173913044, y=156.0))]
Is(Line($point_7:point,$point_6:point),Line($point_6:point,$point_7:point)) TV(norm=0.000, conf=1.00) [line(a=point(x=128.0, y=1.0), b=point(x=127.0, y=226.0)), line(a=point(x=127.0, y=226.0), b=point(x=128.0, y=1.0))]
PointLiesOnLine($point_3:point,Line($point_6:point,$point_12:point)) TV(norm=0.000, conf=1.00) [point(x=127.31111111111112, y=156.0), line(a=point(x=127.0, y=226.0), b=point(x=127.59041110004465, y=93.157502489954325))]
PointLiesOnLine($point_12:point,Line($point_8:point,$point_10:point)) TV(norm=0.000, conf=1.00) [point(x=127.59041110004465, y=93.157502489954325), line(a=point(x=18.0, y=15.0), b=point(x=276.0, y=199.0))]
Ge(180,140()) TV(norm=0.000, conf=1.00) [180, 140.0]
PointLiesOnLine($point_11:point,Line($point_9:point,$point_10:point)) TV(norm=0.000, conf=1.00) [point(x=215.70652173913044, y=156.0), line(a=point(x=74.086956521739125, y=55.0), b=point(x=276.0, y=199.0))]
PointLiesOnLine($point_11:point,Line($point_1:point,$point_4:point)) TV(norm=0.000, conf=1.00) [point(x=215.70652173913044, y=156.0), line(a=point(x=257.0, y=156.0), b=point(x=29.0, y=156.0))]
PointLiesOnLine($point_11:point,Line($point_8:point,$point_10:point)) TV(norm=0.000, conf=1.00) [point(x=215.70652173913044, y=156.0), line(a=point(x=18.0, y=15.0), b=point(x=276.0, y=199.0))]
PointLiesOnLine($point_12:point,Line($point_9:point,$point_10:point)) TV(norm=0.000, conf=1.00) [point(x=127.59041110004465, y=93.157502489954325), line(a=point(x=74.086956521739125, y=55.0), b=point(x=276.0, y=199.0))]
PointLiesOnLine($point_2:point,Line($point_7:point,$point_12:point)) TV(norm=0.000, conf=1.00) [point(x=127.75999999999999, y=55.0), line(a=point(x=128.0, y=1.0), b=point(x=127.59041110004465, y=93.157502489954325))]
PointLiesOnLine($point_12:point,Line($point_3:point,$point_7:point)) TV(norm=0.000, conf=1.00) [point(x=127.59041110004465, y=93.157502489954325), line(a=point(x=127.31111111111112, y=156.0), b=point(x=128.0, y=1.0))]
Solving...
Given formulas: set([Parallel(Line($point_0:point,$point_5:point),Line($point_4:point,$point_1:point)), PointLiesOnLine($point_3:point,Line($point_1:point,$point_4:point)), PointLiesOnLine($point_12:point,Line($point_8:point,$point_11:point)), PointLiesOnLine($point_9:point,Line($point_8:point,$point_12:point)), Equals(140(),Div(MeasureOf(Angle($point_8:point,$point_9:point,$point_2:point)),Degree())), PointLiesOnLine($point_11:point,Line($point_10:point,$point_12:point)), Ge(Pi(),MeasureOf(Angle($point_10:point,$point_12:point,$point_6:point))), PointLiesOnLine($point_2:point,Line($point_0:point,$point_5:point)), PointLiesOnLine($point_2:point,Line($point_5:point,$point_9:point)), PointLiesOnLine($point_12:point,Line($point_2:point,$point_6:point)), PointLiesOnLine($point_3:point,Line($point_2:point,$point_6:point)), PointLiesOnLine($point_9:point,Line($point_0:point,$point_5:point)), PointLiesOnLine($point_9:point,Line($point_8:point,$point_11:point)), PointLiesOnLine($point_9:point,Line($point_0:point,$point_2:point)), PointLiesOnLine($point_11:point,Line($point_1:point,$point_3:point)), PointLiesOnLine($point_2:point,Line($point_6:point,$point_7:point)), PointLiesOnLine($point_12:point,Line($point_9:point,$point_11:point)), PointLiesOnLine($point_12:point,Line($point_2:point,$point_3:point)), Is(MeasureOf(Angle($point_10:point,$point_12:point,$point_6:point)),$What:number), Perpendicular(Line($point_7:point,$point_6:point),Line($point_4:point,$point_1:point)), PointLiesOnLine($point_12:point,Line($point_6:point,$point_7:point)), PointLiesOnLine($point_9:point,Line($point_8:point,$point_10:point)), PointLiesOnLine($point_3:point,Line($point_6:point,$point_7:point)), PointLiesOnLine($point_2:point,Line($point_3:point,$point_7:point)), PointLiesOnLine($point_3:point,Line($point_4:point,$point_11:point)), Is(Line($point_7:point,$point_6:point),Line($point_6:point,$point_7:point)), PointLiesOnLine($point_3:point,Line($point_6:point,$point_12:point)), PointLiesOnLine($point_12:point,Line($point_8:point,$point_10:point)), Ge(180,140()), PointLiesOnLine($point_11:point,Line($point_9:point,$point_10:point)), PointLiesOnLine($point_11:point,Line($point_1:point,$point_4:point)), PointLiesOnLine($point_11:point,Line($point_8:point,$point_10:point)), PointLiesOnLine($point_12:point,Line($point_9:point,$point_10:point)), PointLiesOnLine($point_2:point,Line($point_7:point,$point_12:point)), PointLiesOnLine($point_12:point,Line($point_3:point,$point_7:point))])
iteration 1:
    nfev: 185587
     fun: 3.5249076154597603e-06
       x: array([  0.87266452, -19.27190841,  12.35964608, -23.82462406,
         7.1723476 ,  -2.38098663,   7.77543539,  17.52186405,
        -6.24249973,   6.66861225,  22.63721251,   9.85867431,
       -25.58434621,   2.61284507,  14.28167277,  23.85067452,
        -2.95288792, -13.20512309, -10.40831884,  28.03636663,
       -14.42072527, -21.56248951,  18.14105948,  23.70439913, -31.85740116])
 message: ['requested number of basinhopping iterations completed successfully']
    njev: 6410
     nit: 100
Equals(0.87266452034967845,Mul(40(),Degree()))
0.87266452035
Equals(0.87266452034967845,Mul(45(),Degree()))
0.87266452035
Equals(0.87266452034967845,Mul(50(),Degree()))
0.87266452035
Equals(0.87266452034967845,Mul(60(),Degree()))
0.87266452035
Equals(0.87266452034967845,Mul(80(),Degree()))
0.87266452035
831.64 seconds
ans: {1: TV(norm=0.175, conf=0.78), 2: TV(norm=0.087, conf=0.89), 3: TV(norm=0.000, conf=1.00), 4: TV(norm=0.175, conf=0.82), 5: TV(norm=0.524, conf=0.54)}
idx 3, answeri: 3.0
Correct for multiple choice: index: 3 value: TV(norm=0.000, conf=1.00), golden: 3.0
RESULT: (e,p,c) = False, False, True 

(e,p,c) = False, False, True
--------------------------------------------------------------------------------
31/64 complete, 8 correct, 0 penalized, 21 error
--------------------------------------------------------------------------------
id: 1096
full unit_test entry
WWWWWWW opt_model
2.97, Is@7[is]($ABC:triangle@2[ABC], $triangle:triangle@10[triangle])
5.76, Find@18[find](ValueOf@20[value]($x:number@22[x]))
7.71, IsRightAngle@15[right]($angle:angle@16[angle])
8.66, IsTriangle@1[triangle]($ABC:triangle@2[ABC])
9.58, Equilateral@9[equilateral]($triangle:triangle@10[triangle])
10.32, Is@13[is]($triangle:triangle@10[triangle], $ABC:triangle@2[ABC])

completed formulas:
IsRightAngle($angle:angle)
IsTriangle($ABC:triangle)
Is($triangle:triangle,$ABC:triangle)
Find(ValueOf($x:number))
Equilateral($triangle:triangle)

Equilateral(Triangle($point_1:point,$point_3:point,$point_4:point)) TV(norm=1.994, conf=0.97) [triangle(a=point(x=66.592407869215847, y=0.79966749792185965), b=point(x=0.37067197115683825, y=119.669443235739), c=point(x=132.66318428750523, y=119.99373171750941))]
Equals($x:number,LengthOf(Line($point_0:point,$point_4:point))) None None
Find(ValueOf($x:number)) None None
PointLiesOnLine($point_4:point,Line($point_0:point,$point_1:point)) TV(norm=0.000, conf=1.00) [point(x=132.66318428750523, y=119.99373171750941), line(a=point(x=265.99719180005616, y=360.32827857343443), b=point(x=66.592407869215847, y=0.79966749792185965))]
PointLiesOnLine($point_4:pERROR:root:failed to ground variable: $rectangle:rectangle
ERROR:root:failed to ground variable: $rectangle:rectangle
ERROR:root:failed to ground variable: $rectangle:rectangle
ERROR:root:failed to ground variable: $rectangle:rectangle
ERROR:root:failed to ground variable: $rectangle:rectangle
ERROR:root:failed to ground variable: $rectangle:rectangle
ERROR:root:failed to ground variable: $rectangle:rectangle
ERROR:root:failed to ground variable: $rectangle:rectangle
ERROR:root:failed to ground variable: $rectangle:rectangle
ERROR:root:failed to ground variable: $rectangle:rectangle
ERROR:root:failed to ground variable: $rectangle:rectangle
ERROR:root:failed to ground variable: $rectangle:rectangle
ERROR:root:failed to ground variable: $rectangle:rectangle
ERROR:root:failed to ground variable: $rectangle:rectangle
ERROR:root:failed to ground variable: $rectangle:rectangle
ERROR:root:failed to ground variable: $rectangle:rectangle
ERROR:root:failed to ground variable: $rectangle:rectangle
ERROR:root:failed to ground variable: $rectangle:rectangle
ERROR:root:failed to ground variable: $rectangle:rectangle
ERROR:root:failed to ground variable: $rectangle:rectangle
ERROR:root:failed to ground variable: $rectangle:rectangle
ERROR:root:failed to ground variable: $rectangle:rectangle
ERROR:root:failed to ground variable: $rectangle:rectangle
ERROR:root:failed to ground variable: $rectangle:rectangle
ERROR:root:failed to ground variable: $rectangle:rectangle
ERROR:root:failed to ground variable: $rectangle:rectangle
ERROR:root:failed to ground variable: $rectangle:rectangle
ERROR:root:failed to ground variable: $rectangle:rectangle
ERROR:root:failed to ground variable: $rectangle:rectangle
ERROR:root:failed to ground variable: $rectangle:rectangle
ERROR:root:failed to ground variable: $rectangle:rectangle
ERROR:root:failed to ground variable: $rectangle:rectangle
ERROR:root:failed to ground variable: $rectangle:rectangle
ERROR:root:failed to ground variable: $rectangle:rectangle
ERROR:root:failed to ground variable: $rectangle:rectangle
ERROR:root:failed to ground variable: $rectangle:rectangle
ERROR:root:failed to ground variable: $rectangle:rectangle
ERROR:root:failed to ground variable: $rectangle:rectangle
ERROR:root:failed to ground variable: $rectangle:rectangle
ERROR:root:failed to ground variable: $rectangle:rectangle
ERROR:root:failed to ground variable: $rectangle:rectangle
ERROR:root:failed to ground variable: $rectangle:rectangle
ERROR:root:failed to ground variable: $rectangle:rectangle
ERROR:root:failed to ground variable: $rectangle:rectangle
oint,Line($point_2:point,$point_3:point)) TV(norm=0.003, conf=1.00) [point(x=132.66318428750523, y=119.99373171750941), line(a=point(x=265.0027042568733, y=120.65919628656833), b=point(x=0.37067197115683825, y=119.669443235739))]
Equals(12(),LengthOf(Line($point_2:point,$point_4:point))) TV(norm=120.341, conf=0.00) [12.0, 132.34119309124972]
IsRightAngle(Angle($point_0:point,$point_2:point,$point_3:point)) TV(norm=0.008, conf=0.99) [angle(a=point(x=265.99719180005616, y=360.32827857343443), b=point(x=265.0027042568733, y=120.65919628656833), c=point(x=0.37067197115683825, y=119.669443235739))]
Is(Triangle($point_1:point,$point_3:point,$point_4:point),Triangle($point_1:point,$point_3:point,$point_4:point)) TV(norm=0.000, conf=1.00) [triangle(a=point(x=66.592407869215847, y=0.79966749792185965), b=point(x=0.37067197115683825, y=119.669443235739), c=point(x=132.66318428750523, y=119.99373171750941)), triangle(a=point(x=66.592407869215847, y=0.79966749792185965), b=point(x=0.37067197115683825, y=119.669443235739), c=point(x=132.66318428750523, y=119.99373171750941))]
Solving...
Given formulas: set([Equilateral(Triangle($point_1:point,$point_3:point,$point_4:point)), Equals($x:number,LengthOf(Line($point_0:point,$point_4:point))), Find(ValueOf($x:number)), PointLiesOnLine($point_4:point,Line($point_0:point,$point_1:point)), PointLiesOnLine($point_4:point,Line($point_2:point,$point_3:point)), Equals(12(),LengthOf(Line($point_2:point,$point_4:point))), IsRightAngle(Angle($point_0:point,$point_2:point,$point_3:point)), Is(Triangle($point_1:point,$point_3:point,$point_4:point),Triangle($point_1:point,$point_3:point,$point_4:point))])
iteration 1:
    nfev: 48857
     fun: 1.218381243006661e-06
       x: array([ -19.25711695,   88.1226234 ,   49.29758758,   67.48612727,
         -8.30418546,   83.22024906,   24.00000163,  -10.7659534 ,
        107.09366058])
 message: ['requested number of basinhopping iterations completed successfully']
    njev: 3879
     nit: 100
Equals(ValueOf($x:number),Mul(6(),Sqrt(3())))
('Key: ', TV(norm=13.608, conf=0.21))
Equals(ValueOf($x:number),Mul(8(),Sqrt(3())))
('Key: ', TV(norm=10.144, conf=0.46))
Equals(ValueOf($x:number),Mul(12(),Sqrt(2())))
('Key: ', TV(norm=7.029, conf=0.66))
Equals(ValueOf($x:number),13())
('Key: ', TV(norm=11.000, conf=0.41))
Equals(ValueOf($x:number),24())
('Key: ', TV(norm=0.000, conf=1.00))
47.12 seconds
ans: {1: TV(norm=13.608, conf=0.21), 2: TV(norm=10.144, conf=0.46), 3: TV(norm=7.029, conf=0.66), 4: TV(norm=11.000, conf=0.41), 5: TV(norm=0.000, conf=1.00)}
idx 5, answeri: 5.0
Correct for multiple choice: index: 5 value: TV(norm=0.000, conf=1.00), golden: 5.0
RESULT: (e,p,c) = False, False, True 

(e,p,c) = False, False, True
--------------------------------------------------------------------------------
32/64 complete, 9 correct, 0 penalized, 21 error
--------------------------------------------------------------------------------
id: 1097
full unit_test entry
WWWWWWW opt_model
3.40, Is@6[has](AreaOf@8[area]($BDC:triangle@1[BDC]), 48@10[48])
4.35, IsTriangle@0[Triangle]($BDC:triangle@1[BDC])

completed formulas:
Is(AreaOf($BDC:triangle),48())
IsTriangle($BDC:triangle)

3.94, Is@7[is](AreaOf@9[area]($circle:circle@12[circle]), $What:number@6[what])
6.87, Is@2[is]($ABCD:quad@1[ABCD], $rectangle:rectangle@4[rectangle])

completed formulas:
Is($ABCD:quad,$rectangle:quad)
IsRectangle($rectangle:quad)
Is(AreaOf($circle:circle),$What:number)

PointLiesOnLine($point_6:point,Line($point_0:point,$point_3:point)) TV(norm=0.058, conf=0.98) [point(x=1.0, y=134.0), line(a=point(x=0.0, y=233.5), b=point(x=-1.4581778899331113, y=82.974417931755568))]
PointLiesOnCircle($point_3:point,Circle($point_5:point,$radius_5_0:number)) TV(norm=1.457, conf=0.98) [point(x=-1.4581778899331113, y=82.974417931755568), circle(center=point(x=83.5, y=87.5), radius=86.536118)]
IsRectangle(Quad($point_0:point,$point_2:point,$point_1:point,$point_3:point)) TV(norm=0.011, conf=0.98) [quad(a=point(x=0.0, y=233.5), b=point(x=169.01236066659311, y=233.67821800389947), c=point(x=170.53955018399409, y=86.139603131072107), d=point(x=-1.4581778899331113, y=82.974417931755568))]
Is(Quad($point_3:point,$point_0:point,$point_2:point,$point_1:point),Quad($point_0:point,$point_2:point,$point_1:point,$point_3:point)) TV(norm=0.000, conf=1.00) [quad(a=point(x=-1.4581778899331113, y=82.974417931755568), b=point(x=0.0, y=233.5), c=point(x=169.01236066659311, y=233.67821800389947), d=point(x=170.53955018399409, y=86.139603131072107)), quad(a=point(x=0.0, y=233.5), b=point(x=169.01236066659311, y=233.67821800389947), c=point(x=170.53955018399409, y=86.139603131072107), d=point(x=-1.4581778899331113, y=82.974417931755568))]
Is(AreaOf(Triangle($point_2:point,$point_1:point,$point_0:point)),48()) TV(norm=12420.061, conf=0.00) [12468.060880901627, 48.0]
PointLiesOnLine($point_5:point,Line($point_1:point,$point_3:point)) TV(norm=0.069, conf=0.98) [point(x=83.5, y=87.5), line(a=point(x=170.53955018399409, y=86.139603131072107), b=point(x=-1.4581778899331113, y=82.974417931755568))]
PointLiesOnLine($point_4:point,Line($point_0:point,$point_1:point)) TV(norm=0.008, conf=1.00) [point(x=70.600939529092699, y=173.06935129026957), line(a=point(x=0.0, y=233.5), b=point(x=170.53955018399409, y=86.139603131072107))]
PointLiesOnLine($point_1:point,Line($point_2:point,$point_7:point)) TV(norm=0.035, conf=0.99) [point(x=170.53955018399409, y=86.139603131072107), line(a=point(x=169.01236066659311, y=233.67821800389947), b=point(x=171.0, y=76.0))]
PointLiesOnCircle($point_4:point,Circle($point_5:point,$radius_5_0:number)) TV(norm=0.000, conf=1.00) [point(x=70.600939529092699, y=173.06935129026957), circle(center=point(x=83.5, y=87.5), radius=86.536118)]
Equals(8(),LengthOf(Line($point_1:point,$point_2:point))) TV(norm=139.547, conf=0.00) [8.0, 147.54651872007869]
PointLiesOnCircle($point_1:point,Circle($point_5:point,$radius_5_0:number)) TV(norm=0.514, conf=0.99) [point(x=170.53955018399409, y=86.139603131072107), circle(center=point(x=83.5, y=87.5), radius=86.536118)]
Is(AreaOf(Circle($point_5:point,$radius_5_0:number)),$What:number) None None
PointLiesOnCircle($point_7:point,Circle($point_5:point,$radius_5_0:number)) TV(norm=1.716, conf=0.98) [point(x=171.0, y=76.0), circle(center=point(x=83.5, y=87.5), radius=86.536118)]
Solving...
Given formulas: set([PointLiesOnLine($point_6:point,Line($point_0:point,$point_3:point)), PointLiesOnCircle($point_3:point,Circle($point_5:point,$radius_5_0:number)), IsRectangle(Quad($point_0:point,$point_2:point,$point_1:point,$point_3:point)), Is(Quad($point_3:point,$point_0:point,$point_2:point,$point_1:point),Quad($point_0:point,$point_2:point,$point_1:point,$point_3:point)), Is(AreaOf(Triangle($point_2:point,$point_1:point,$point_0:point)),48()), PointLiesOnLine($point_5:point,Line($point_1:point,$point_3:point)), PointLiesOnLine($point_4:point,Line($point_0:point,$point_1:point)), PointLiesOnLine($point_1:point,Line($point_2:point,$point_7:point)), PointLiesOnCircle($point_4:point,Circle($point_5:point,$radius_5_0:number)), Equals(8(),LengthOf(Line($point_1:point,$point_2:point))), PointLiesOnCircle($point_1:point,Circle($point_5:point,$radius_5_0:number)), Is(AreaOf(Circle($point_5:point,$radius_5_0:number)),$What:number), PointLiesOnCircle($point_7:point,Circle($point_5:point,$radius_5_0:number))])
iteration 1:
    nfev: 171287
     fun: 0.17556387463902232
       x: array([  1.35776451,  -6.58027304,   2.63026599,  -4.91243118,
        -6.46641664,   1.36796974,  -6.58244906,  21.7344919 ,
         2.45677531,  -1.43578026,  -2.5135248 ,  -0.25717199,
         6.82373622,  -3.96366208,   1.90726023,  -4.00805344])
 message: ['requested number of basinhopping iterations completed successfully']
    njev: 8738
     nit: 100
iteration 2:
    nfev: 168211
     fun: 0.26027984484559352
       x: array([  1.47560705,   1.18313041,   0.80379429,  -2.04001432,
        -5.84636599,   1.49502044,   1.19167611,   2.02973782,
         0.8280119 ,   2.65421592,   1.18268872,   1.47552968,
       -13.02333649,  -1.01245167,   1.1518701 ,   1.91853572])
 message: ['requested number of basinhopping iterations completed successfully']ERROR:root:failed to ground variable: $entity:entity
ERROR:root:failed to ground variable: $entity:entity
ERROR:root:failed to ground variable: $entity:entity
ERROR:root:failed to ground variable: $entity:entity
ERROR:root:failed to ground variable: $entity:entity
ERROR:root:failed to ground variable: $entity:entity
ERROR:root:1099
ERROR:root:unsupported operand type(s) for &: 'function' and 'NoneType'
Traceback (most recent call last):
  File "/home/alvaroh/geosolver/geosolver/run.py", line 164, in full_unit_test
    result = _full_unit_test(combined_model, question, label_data)
  File "/home/alvaroh/geosolver/geosolver/run.py", line 325, in _full_unit_test
    local_entities = semantic_tree_to_serialized_entities(match_parse, t, number, value_expr_formulas)
  File "/home/alvaroh/geosolver/geosolver/run.py", line 181, in semantic_tree_to_serialized_entities
    grounded_formula = ground_formulas(match_parse, [formula], value_expr_formulas)[0]
  File "geosolver/grounding/ground_formula.py", line 26, in ground_formulas
    local_scores = [core_parse.evaluate(f) for f in grounded_formulas]
  File "geosolver/diagram/states.py", line 99, in evaluate
    return evaluate(formula, self.variable_assignment)
  File "geosolver/ontology/ontology_semantics.py", line 488, in evaluate
    out = reduce(operator.__and__, (evaluate(child, assignment) for child in formula.children), True)
TypeError: unsupported operand type(s) for &: 'function' and 'NoneType'

    njev: 8498
     nit: 100
iteration 3:
    nfev: 172652
     fun: 0.14808765174908867
       x: array([ -9.45124557,   2.13593637,   3.31134472,  -5.53739695,
        -7.18847194,  -9.45323   ,   2.14266577,  34.44756397,
        -3.09914231,   4.00963642,   0.50045396,  -4.19000875,
        -2.14561168,   4.32219029,  -6.27520277,   3.07281783])
 message: ['requested number of basinhopping iterations completed successfully']
    njev: 8846
     nit: 100
Equals(34.44756396683141,Mul(6(),Pi()))
34.4475639668
Equals(34.44756396683141,Mul(12(),Pi()))
34.4475639668
Equals(34.44756396683141,Mul(24(),Pi()))
34.4475639668
Equals(34.44756396683141,Mul(30(),Pi()))
34.4475639668
Equals(34.44756396683141,Mul(36(),Pi()))
34.4475639668
887.06 seconds
ans: {1: TV(norm=15.598, conf=0.41), 2: TV(norm=3.252, conf=0.91), 3: TV(norm=40.951, conf=0.25), 4: TV(norm=59.800, conf=0.07), 5: TV(norm=78.650, conf=0.00)}
RESULT: (e,p,c) = False, False, False 

(e,p,c) = False, False, False
--------------------------------------------------------------------------------
33/64 complete, 9 correct, 0 penalized, 21 error
--------------------------------------------------------------------------------
id: 1099
full unit_test entry
WWWWWWW opt_model
2.72, Congruent@8[congruent]($is:quad@7[is], $OCB:angle@11[OCB])
4.68, IsAngle@5[angle]($OBC:angle@6[OBC])
5.64, IsAngle@10[angle]($OCB:angle@11[OCB])

Exceptiont in full_unit_test
RESULT: (e,p,c) = True, False, False 

(e,p,c) = True, False, False
--------------------------------------------------------------------------------
34/64 complete, 9 correct, 0 penalized, 22 error
--------------------------------------------------------------------------------
id: 1102
full unit_test entry
WWWWWWW opt_model
3.85, Is@1[is](ValueOf@3[value]($b:number@5[b]), $What:number@0[What])

completed formulas:
Is(ValueOf($b:number),$What:number)

Equals(Mul(6(),$a:number),Div(MeasureOf(Angle($point_1:point,$point_2:point,$point_0:point)),Degree())) None None
PointLiesOnLine($point_2:point,Line($point_0:point,$point_4:point)) TV(norm=0.000, conf=1.00) [point(x=109.42332514706722, y=40.155348677822829), line(a=point(x=217.0, y=0.0), b=point(x=0.0, y=81.0))]
Ge(180,Mul(6(),$a:number)) None None
PointLiesOnLine($point_2:point,Line($point_1:point,$point_3:point)) TV(norm=0.000, conf=1.00) [point(x=109.42332514706722, y=40.155348677822829), line(a=point(x=0.0, y=0.0), b=point(x=218.0, y=80.0))]
Equals($b:number,Div(MeasureOf(Angle($point_0:point,$point_2:point,$point_3:point)),Degree())) None None
Is(ValueOf($b:number),$What:number) None None
Equals(Mul(3(),$a:number),Div(MeasureOf(Angle($point_4:point,$point_2:point,$point_1:point)),Degree())) None None
Ge(180,$b:number) None None
Ge(180,Mul(3(),$a:number)) None None
Solving...
Given formulas: set([Equals(Mul(6(),$a:number),Div(MeasureOf(Angle($point_1:point,$point_2:point,$point_0:point)),Degree())), PointLiesOnLine($point_2:point,Line($point_0:point,$point_4:point)), Ge(180,Mul(6(),$a:number)), PointLiesOnLine($point_2:point,Line($point_1:point,$point_3:point)), Equals($b:number,Div(MeasureOf(Angle($point_0:point,$point_2:point,$point_3:point)),Degree())), Is(ValueOf($b:number),$What:number), Equals(Mul(3(),$a:number),Div(MeasureOf(Angle($point_4:point,$point_2:point,$point_1:point)),Degree())), Ge(180,$b:number), Ge(180,Mul(3(),$a:number))])
iteration 1:
    nfev: 59254
     fun: 1.0375220602654167e-06
       x: array([ 19.9999978 ,  60.00001417,  60.00001388,  64.03021999,
         4.86994778,   5.9055434 ,  77.8240611 ,  38.63682774,
       -47.87834569,  75.02750535,  27.71402252])
 message: ['requested number of basinhopping iterations completed successfully']
    njev: 4038
     nit: 100
Equals(60.00001416907309,20())
60.0000141691
Equals(60.00001416907309,30())
60.0000141691
Equals(60.00001416907309,45())
60.0000141691
Equals(60.00001416907309,60())
60.0000141691
Equals(60.00001416907309,120())
60.0000141691
53.03 seconds
ans: {1: TV(norm=40.000, conf=0.00), 2: TV(norm=30.000, conf=0.33), 3: TV(norm=15.000, conf=0.71), 4: TV(norm=0.000, conf=1.00), 5: TV(norm=60.000, conf=0.33)}
idx 4, answeri: 4.0
Correct for multiple choice: index: 4 value: TV(norm=0.000, conf=1.00), golden: 4.0
RESULT: (e,p,c) = False, False, True 

(e,p,c) = False, False, True
--------------------------------------------------------------------------------
35/64 complete, 10 correct, 0 penalized, 22 error
--------------------------------------------------------------------------------
id: 1103
full unit_test entry
WWWWWWW opt_model
1.07, Equals@9[equal]($Which:ground@4[which], 80@11[80])

f and t: Parallel($p:line,$q:line) Parallel@1[@s_0]($temp:line@1[@s_0], $temp:line@1[@s_0])
local entities: [{'content': {'span': [1, 2], 'class': 'TagRule', 'signature': {'class': 'VariableSignature', 'return_type': 'line', 'valence': 0, 'id': 'p', 'name': 'temp'}}, 'coords': [[39.0, 84.0], [259.0, 84.0]], 'sentence_number': 0}, {'content': {'span': [1, 2], 'class': 'TagRule', 'signature': {'class': 'VariableSignature', 'return_type': 'line', 'valence': 0, 'id': 'q', 'name': 'temp'}}, 'coords': [[39.0, 167.0], [259.0, 166.0]], 'sentence_number': 0}]
completed formulas:
Equals($Which:ground,80())

PointLiesOnLine($point_11:point,Line($point_0:point,$point_1:point)) TV(norm=0.000, conf=1.00) [point(x=33.919684002633318, y=109.84581961816986), line(a=point(x=0.0, y=110.0), b=point(x=170.30089671205579, y=109.2259050149452))]
Equals($e:number,Div(MeasureOf(Angle($point_14:point,$point_1:point,$point_7:point)),Degree())) None None
Equals(110(),Div(MeasureOf(Angle($point_3:point,$point_15:point,$point_13:point)),Degree())) TV(norm=11.754, conf=0.89) [110.0, 98.24632081446855]
Equals(80(),Div(MeasureOf(Angle($point_14:point,$point_2:point,$point_9:point)),Degree())) TV(norm=2.352, conf=0.97) [80.0, 77.6484408499698]
Equals($Which:ground,80()) None None
PointLiesOnLine($point_11:point,Line($point_0:point,$point_7:point)) TV(norm=0.000, conf=1.00) [point(x=33.919684002633318, y=109.84581961816986), line(a=point(x=0.0, y=110.0), b=point(x=220.0, y=109.0))]
PointLiesOnLine($point_5:point,Line($point_4:point,$point_10:point)) TV(norm=0.000, conf=1.00) [point(x=110.0, y=109.5), line(a=point(x=110.0, y=0.0), b=point(x=110.0, y=138.0))]
PointLiesOnLine($point_1:point,Line($point_0:point,$point_7:point)) TV(norm=0.000, conf=1.00) [point(x=170.30089671205579, y=109.2259050149452), line(a=point(x=0.0, y=110.0), b=point(x=220.0, y=109.0))]
Equals($a:number,Div(MeasureOf(Angle($point_8:point,$point_15:point,$point_3:point)),Degree())) None None
PointLiesOnLine($point_11:point,Line($point_0:point,$point_5:point)) TV(norm=0.000, conf=1.00) [point(x=33.919684002633318, y=109.84581961816986), line(a=point(x=0.0, y=110.0), b=point(x=110.0, y=109.5))]
Ge(180,$d:number) None None
PointLiesOnLine($point_13:point,Line($point_2:point,$point_15:point)) TV(norm=0.000, conf=1.00) [point(x=110.0, y=27.0), line(a=point(x=188.30656934306569, y=27.0), b=point(x=21.913043478260875, y=27.0))]
Ge(180,110()) TV(norm=0.000, conf=1.00) [180, 110.0]
PointLiesOnLine($point_1:point,Line($point_2:point,$point_12:point)) TV(norm=0.000, conf=1.00) [point(x=170.30089671205579, y=109.2259050149452), line(a=point(x=188.30656934306569, y=27.0), b=point(x=164.0, y=138.0))]
PointLiesOnLine($point_15:point,Line($point_3:point,$point_11:point)) TV(norm=0.000, conf=1.00) [point(x=21.913043478260875, y=27.0), line(a=point(x=18.0, y=0.0), b=point(x=33.919684002633318, y=109.84581961816986))]
PointLiesOnLine($point_5:point,Line($point_10:point,$point_13:point)) TV(norm=0.000, conf=1.00) [point(x=110.0, y=109.5), line(a=point(x=110.0, y=138.0), b=point(x=110.0, y=27.0))]
Parallel(Line($point_8:point,$point_9:point),Line($point_0:point,$point_7:point)) TV(norm=0.005, conf=1.00) [line(a=point(x=0.0, y=27.0), b=point(x=220.0, y=27.0)), line(a=point(x=0.0, y=110.0), b=point(x=220.0, y=109.0))]
PointLiesOnLine($point_13:point,Line($point_9:point,$point_15:point)) TV(norm=0.000, conf=1.00) [point(x=110.0, y=27.0), line(a=point(x=220.0, y=27.0), b=point(x=21.913043478260875, y=27.0))]
PointLiesOnLine($point_15:point,Line($point_8:point,$point_13:point)) TV(norm=0.000, conf=1.00) [point(x=21.913043478260875, y=27.0), line(a=point(x=0.0, y=27.0), b=point(x=110.0, y=27.0))]
PointLiesOnLine($point_1:point,Line($point_7:point,$point_11:point)) TV(norm=0.000, conf=1.00) [point(x=170.30089671205579, y=109.2259050149452), line(a=point(x=220.0, y=109.0), b=point(x=33.919684002633318, y=109.84581961816986))]
PointLiesOnLine($point_1:point,Line($point_5:point,$point_7:point)) TV(norm=0.000, conf=1.00) [point(x=170.30089671205579, y=109.2259050149452), line(a=point(x=110.0, y=109.5), b=point(x=220.0, y=109.0))]
Ge(180,$b:number) None None
Equals($d:number,Div(MeasureOf(Angle($point_0:point,$point_11:point,$point_3:point)),Degree())) None None
PointLiesOnLine($point_11:point,Line($point_6:point,$point_15:point)) TV(norm=0.000, conf=1.00) [point(x=33.919684002633318, y=109.84581961816986), line(a=point(x=38.0, y=138.0), b=point(x=21.913043478260875, y=27.0))]
PointLiesOnLine($point_13:point,Line($point_4:point,$point_5:point)) TV(norm=0.000, conf=1.00) [point(x=110.0, y=27.0), line(a=point(x=110.0, y=0.0), b=point(x=110.0, y=109.5))]
PointLiesOnLine($point_11:point,Line($point_3:point,$point_6:point)) TV(norm=0.000, conf=1.00) [point(x=33.919684002633318, y=109.84581961816986), line(a=point(x=18.0, y=0.0), b=point(x=38.0, y=138.0))]
Ge(180,90()) TV(norm=0.000, conf=1.00) [180, 90.0]
PointLiesOnLine($point_15:point,Line($point_8:point,$point_9:point)) TV(norm=0.000, conf=1.00) [point(x=21.913043478260875, y=27.0), line(a=point(x=0.0, y=27.0), b=point(x=220.0, y=27.0))]
PointLiesOnLine($point_5:point,Line($point_0:point,$point_7:point)) TV(norm=0.000, conf=1.00) [point(x=110.0, y=109.5), line(a=point(x=0.0, y=110.0), b=point(x=220.0, y=109.0))]
Equals($b:number,Div(MeasureOf(Angle($point_8:point,$point_13:point,$point_4:point)),Degree())) None None
PointLiesOnLine($point_2:point,Line($point_9:point,$point_13:point)) TV(norm=0.000, conf=1.00) [point(x=188.30656934306569, y=27.0), line(a=point(x=220.0, y=27.0), b=point(x=110.0, y=27.0))]
PointLiesOnLine($point_15:point,Line($point_2:point,$point_8:point)) TV(norm=0.000, conf=1.00) [point(x=21.913043478260875, y=27.0), line(a=point(x=188.30656934306569, y=27.0), b=point(x=0.0, y=27.0))]
Ge(180,$e:number) None None
PointLiesOnLine($point_2:point,Line($point_1:point,$point_14:point)) TV(norm=0.000, conf=1.00) [point(x=188.30656934306569, y=27.0), line(a=point(x=170.30089671205579, y=109.2259050149452), b=point(x=194.0, y=1.0))]
PointLiesOnLine($point_13:point,Line($point_8:point,$point_9:point)) TV(norm=0.000, conf=1.00) [point(x=110.0, y=27.0), line(a=point(x=0.0, y=27.0), b=point(x=220.0, y=27.0))]
Equals(90(),Div(MeasureOf(Angle($point_11:point,$point_5:point,$point_13:point)),Degree())) TV(norm=0.260, conf=1.00) [90.0, 90.26043356781338]
PointLiesOnLine($point_5:point,Line($point_0:point,$point_1:point)) TV(norm=0.000, conf=1.00) [point(x=110.0, y=109.5), line(a=point(x=0.0, y=110.0), b=point(x=170.30089671205579, y=109.2259050149452))]
PointLiesOnLine($point_5:point,Line($point_1:point,$point_11:point)) TV(norm=0.000, conf=1.00) [point(x=110.0, y=109.5), line(a=point(x=170.30089671205579, y=109.2259050149452), b=point(x=33.919684002633318, y=109.84581961816986))]
PointLiesOnLine($point_15:point,Line($point_3:point,$point_6:point)) TV(norm=0.000, conf=1.00) [point(x=21.913043478260875, y=27.0), line(a=point(x=18.0, y=0.0), b=point(x=38.0, y=138.0))]
PointLiesOnLine($point_1:point,Line($point_12:point,$point_14:point)) TV(norm=0.000, conf=1.00) [point(x=170.30089671205579, y=109.2259050149452), line(a=point(x=164.0, y=138.0), b=point(x=194.0, y=1.0))]
PointLiesOnLine($point_5:point,Line($point_7:point,$point_11:point)) TV(norm=0.000, conf=1.00) [point(x=110.0, y=109.5), line(a=point(x=220.0, y=109.0), b=point(x=33.919684002633318, y=109.84581961816986))]
PointLiesOnLine($point_13:point,Line($point_2:point,$point_8:point)) TV(norm=0.000, conf=1.00) [point(x=110.0, y=27.0), line(a=point(x=188.30656934306569, y=27.0), b=point(x=0.0, y=27.0))]
Ge(180,$c:number) None None
PointLiesOnLine($point_2:point,Line($point_12:point,$point_14:point)) TV(norm=0.000, conf=1.00) [point(x=188.30656934306569, y=27.0), line(a=point(x=164.0, y=138.0), b=point(x=194.0, y=1.0))]
Ge(180,$a:number) None None
Equals($c:number,Div(MeasureOf(Angle($point_13:point,$point_2:point,$point_14:point)),Degree())) None None
PointLiesOnLine($point_2:point,Line($point_8:point,$point_9:point)) TV(norm=0.000, conf=1.00) [point(x=188.30656934306569, y=27.0), line(a=point(x=0.0, y=27.0), b=point(x=220.0, y=27.0))]
Ge(180,80()) TV(norm=0.000, conf=1.00) [180, 80.0]
PointLiesOnLine($point_2:point,Line($point_9:point,$point_15:point)) TV(norm=0.000, conf=1.00) [point(x=188.30656934306569, y=27.0), line(a=point(x=220.0, y=27.0), b=point(x=21.913043478260875, y=27.0))]
PointLiesOnLine($point_13:point,Line($point_4:point,$point_10:point)) TV(norm=0.000, conf=1.00) [point(x=110.0, y=27.0), line(a=point(x=110.0, y=0.0), b=point(x=110.0, y=138.0))]
Solving...
Given formulas: set([PointLiesOnLine($point_11:point,Line($point_0:point,$point_1:point)), Equals($e:number,Div(MeasureOf(Angle($point_14:point,$point_1:point,$point_7:point)),Degree())), Equals(110(),Div(MeasureOf(Angle($point_3:point,$point_15:point,$point_13:point)),Degree())), Equals(80(),Div(MeasureOf(Angle($point_14:point,$point_2:point,$point_9:point)),Degree())), Equals($Which:ground,80()), PointLiesOnLine($point_11:point,Line($point_0:point,$point_7:point)), PointLiesOnLine($point_5:point,Line($point_4:point,$point_10:point)), PointLiesOnLine($point_1:point,Line($point_0:point,$point_7:point)), Equals($a:number,Div(MeasureOf(Angle($point_8:point,$point_15:point,$point_3:point)),Degree())), PointLiesOnLine($point_11:point,Line($point_0:point,$point_5:point)), Ge(180,$d:number), PointLiesOnLine($point_13:point,Line($point_2:point,$point_15:point)), Ge(180,110()), PointLiesOnLine($point_1:point,Line($point_2:point,$point_12:point)), PointLiesOnLine($point_15:point,Line($point_3:point,$point_11:point)), PointLiesOnLine($point_5:point,Line($point_10:point,$point_13:point)), Parallel(Line($point_8:point,$point_9:point),Line($point_0:point,$point_7:point)), PointLiesOnLine($point_13:point,Line($point_9:point,$point_15:point)), PointLiesOnLine($point_15:point,Line($point_8:point,$point_13:point)), PointLiesOnLine($point_1:point,Line($point_7:point,$point_11:point)), PointLiesOnLine($point_1:point,Line($point_5:point,$point_7:point)), Ge(180,$b:number), Equals($d:number,Div(MeasureOf(Angle($point_0:point,$point_11:point,$point_3:point)),Degree())), PointLiesOnLine($point_11:point,Line($point_6:point,$point_15:point)), PointLiesOnLine($point_13:point,Line($point_4:point,$point_5:point)), PointLiesOnLine($point_11:point,Line($point_3:point,$point_6:point)), Ge(180,90()), PointLiesOnLine($point_15:point,Line($point_8:point,$point_9:point)), PointLiesOnLine($point_5:point,Line($point_0:point,$point_7:point)), Equals($b:number,Div(MeasureOf(Angle($point_8:point,$point_13:point,$point_4:point)),Degree())), PointLiesOnLine($point_2:point,Line($point_9:point,$point_13:point)), PointLiesOnLine($point_15:point,Line($point_2:point,$point_8:point)), Ge(180,$e:number), PointLiesOnLine($point_2:point,Line($point_1:point,$point_14:point)), PointLiesOnLine($point_13:point,Line($point_8:point,$point_9:point)), Equals(90(),Div(MeasureOf(Angle($point_11:point,$point_5:point,$point_13:point)),Degree())), PointLiesOnLine($point_5:point,Line($point_0:point,$point_1:point)), PointLiesOnLine($point_5:point,Line($point_1:point,$point_11:point)), PointLiesOnLine($point_15:point,Line($point_3:point,$point_6:point)), PointLiesOnLine($point_1:point,Line($point_12:point,$point_14:point)), PointLiesOnLine($point_5:point,Line($point_7:point,$point_11:point)), PointLiesOnLine($point_13:point,Line($point_2:point,$point_8:point)), Ge(180,$c:number), PointLiesOnLine($point_2:point,Line($point_12:point,$point_14:point)), Ge(180,$a:number), Equals($c:number,Div(MeasureOf(Angle($point_13:point,$point_2:point,$point_14:point)),Degree())), PointLiesOnLine($point_2:point,Line($point_8:point,$point_9:point)), Ge(180,80()), PointLiesOnLine($point_2:point,Line($point_9:point,$point_15:point)), PointLiesOnLine($point_13:point,Line($point_4:point,$point_10:point))])
iteration 1:
    nfev: 346419
     fun: 6.0043535303755391e-06
       x: array([ -89.7671326 ,   -4.15147299,   23.71460522,  -55.60350269,
         12.51667688,  -87.94023307,  -68.1593164 ,    4.21219962,
         39.30997402,  -92.75105889,   93.30678521,  -38.8012404 ,
        -82.71208313,  -18.39199503,    2.46083442,   46.71110153,
        145.68489446,   11.00468331,  -85.56444316, -143.82927481,
       -315.60982646,  -23.99752295,   -0.9649699 ,    4.35901127,
         -9.49923615,   70.00001881,   99.99999165,   89.99998389,
         79.99997343,   70.00003517,  -16.70252559,  -18.34133659,
        127.17436462,   20.71346815,   76.3244737 ])
 message: ['requested number of basinhopping iterations completed successfully']
    njev: 8958
     nit: 100
1928.03 seconds
ans: {1: TV(norm=10.000, conf=0.87), 2: TV(norm=10.000, conf=0.88), 3: TV(norm=20.000, conf=0.78), 4: TV(norm=10.000, conf=0.87), 5: TV(norm=0.000, conf=1.00)}
idx 5, answeri: 5.0
Correct for multiple choice: index: 5 value: TV(norm=0.000, conf=1.00), golden: 5.0
RESULT: (e,p,c) = False, False, True 

(e,p,c) = False, False, True
--------------------------------------------------------------------------------
36/64 complete, 11 correct, 0 penalized, 22 error
--------------------------------------------------------------------------------
id: 1104
full unit_test entry
WWWWWWW opt_model
1.57, True@11[true]($Which:ground@5[which])

completed formulas:
True($Which:ground)

No legal next available.
completed formulas:

No legal next available.
f and t: Ge($a:number,$b:number) Ge@0[@s_0]($a:number@0[@s_0], $b:number@0[@s_0])
local entities: []
completed formulas:

No legal next available.
f and t: Equals($c:number,Mul(135(),Degree())) Equals@0[@s_0]($c:number@0[@s_0], Mul@0[@s_0](135@0[@s_0], Degree@0[@s_0]))
local entities: []
completed formulas:

No legal next available.
f and t: Ge($B:number,$c:number) Ge@0[@s_0]($B:number@0[@s_0], $c:number@0[@s_0])
local entities: []
completed formulas:

Equals($a:number,Div(MeasureOf(Angle($point_3:point,$point_1:point,$point_5:point)),Degree())) None None
Ge(180,95()) TV(norm=0.000, conf=1.00) [180, 95.0]
Equals($c:number,Div(MeasureOf(Angle($point_1:point,$point_2:point,$point_4:point)),Degree())) None None
True($Which:ground) None None
Ge($B:number,$c:number) None None
PointLiesOnLine($point_1:point,Line($point_2:point,$point_5:point)) TV(norm=0.016, conf=1.00) [point(x=140.69470572426766, y=24.298933978321244), line(a=point(x=232.58655346489215, y=117.58301973382285), b=point(x=116.0, y=0.0))]
Ge(180,50()) TV(norm=0.000, conf=1.00) [180, 50.0]
PointLiesOnLine($point_2:point,Line($point_3:point,$point_4:point)) TV(norm=0.011, conf=1.00) [point(x=232.58655346489215, y=117.58301973382285), line(a=point(x=45.079851439182917, y=117.92181213246673), b=point(x=278.0, y=117.0))]
Equals(95(),Div(MeasureOf(Angle($point_2:point,$point_1:point,$point_3:point)),Degree())) TV(norm=4.828, conf=0.95) [95.0, 90.17232323319134]
Ge(180,$c:number) None None
Ge(180,$a:number) None None
Equals($c:number,Mul(135(),Degree())) None None
Equals($b:number,Div(MeasureOf(Angle($point_0:point,$point_3:point,$point_1:point)),Degree())) None None
PointLiesOnLine($point_2:point,Line($point_0:point,$point_4:point)) TV(norm=0.011, conf=1.00) [point(x=232.58655346489215, y=117.58301973382285), line(a=point(x=2.0, y=118.0), b=point(x=278.0, y=117.0))]
PointLiesOnLine($point_3:point,Line($point_0:point,$point_4:point)) TV(norm=0.002, conf=1.00) [point(x=45.079851439182917, y=117.92181213246673), line(a=point(x=2.0, y=118.0), b=point(x=278.0, y=117.0))]
PointLiesOnLine($point_3:point,Line($point_0:point,$point_2:point)) TV(norm=0.000, conf=1.00) [point(x=45.079851439182917, y=117.92181213246673), line(a=point(x=2.0, y=118.0), b=point(x=232.58655346489215, y=117.58301973382285))]
Ge($a:number,$b:number) None None
Ge(180,$b:number) None None
Equals(50(),Div(MeasureOf(Angle($point_1:point,$point_3:point,$point_4:point)),Degree())) TV(norm=5.830, conf=0.88) [50.0, 44.1701544038476]
Solving...
Given formulas: set([Equals($aERROR:root:1104
ERROR:root:'NoneType' object has no attribute 'iteritems'
Traceback (most recent call last):
  File "/home/alvaroh/geosolver/geosolver/run.py", line 164, in full_unit_test
    result = _full_unit_test(combined_model, question, label_data)
  File "/home/alvaroh/geosolver/geosolver/run.py", line 382, in _full_unit_test
    ans = solve(reduced_formulas, choice_formulas, assignment=None)#core_parse.variable_assignment)
  File "geosolver/solver/solve.py", line 82, in solve
    for key, choice_formula in choice_formulas.iteritems():
AttributeError: 'NoneType' object has no attribute 'iteritems'
ERROR:root:failed to ground variable: $hypotenuse:hypotenuse
ERROR:root:failed to ground variable: $hypotenuse:hypotenuse
ERROR:root:failed to ground variable: $hypotenuse:hypotenuse
ERROR:root:failed to ground variable: $hypotenuse:hypotenuse
ERROR:root:failed to ground variable: $hypotenuse:hypotenuse
ERROR:root:failed to ground variable: $hypotenuse:hypotenuse
:number,Div(MeasureOf(Angle($point_3:point,$point_1:point,$point_5:point)),Degree())), Ge(180,95()), Equals($c:number,Div(MeasureOf(Angle($point_1:point,$point_2:point,$point_4:point)),Degree())), True($Which:ground), Ge($B:number,$c:number), PointLiesOnLine($point_1:point,Line($point_2:point,$point_5:point)), Ge(180,50()), PointLiesOnLine($point_2:point,Line($point_3:point,$point_4:point)), Equals(95(),Div(MeasureOf(Angle($point_2:point,$point_1:point,$point_3:point)),Degree())), Ge(180,$c:number), Ge(180,$a:number), Equals($c:number,Mul(135(),Degree())), Equals($b:number,Div(MeasureOf(Angle($point_0:point,$point_3:point,$point_1:point)),Degree())), PointLiesOnLine($point_2:point,Line($point_0:point,$point_4:point)), PointLiesOnLine($point_3:point,Line($point_0:point,$point_4:point)), PointLiesOnLine($point_3:point,Line($point_0:point,$point_2:point)), Ge($a:number,$b:number), Ge(180,$b:number), Equals(50(),Div(MeasureOf(Angle($point_1:point,$point_3:point,$point_4:point)),Degree()))])
iteration 1:
    nfev: 106376
     fun: 216.89459367329087
       x: array([  1.11073128e+02,   1.51767974e+01,  -2.09840466e+01,
         2.23761487e+04,  -5.65519116e+00,   6.84846493e+03,
         6.92645607e+02,  -2.21777311e+04,   6.82361983e+03,
         3.21717253e+04,   1.56552617e+03,   1.34994334e+02,
        -1.70485345e+04,   7.26750031e+03])
 message: ['requested number of basinhopping iterations completed successfully']
    njev: 5810
     nit: 100
iteration 2:
    nfev: 75410
     fun: 6.868867260130858
       x: array([   98.36607532,     2.35619302,    51.45095024,  2062.28002497,
         116.14721408,  -562.9301006 ,    99.01386434,   337.87166414,
          99.57940851,  -203.98479989,    56.8229361 ,    98.36574302,
         126.67842794,    34.61476253])
 message: ['requested number of basinhopping iterations completed successfully']
    njev: 4199
     nit: 100
iteration 3:
    nfev: 87377
     fun: 5.765630633920261
       x: array([ 130.0061755 ,    2.35619859,   75.83378729, -159.14023051,
       -182.31088661, -303.35296591,  130.69021604, -159.06016038,
       -303.31580218,   31.81674791,   59.52839581,  129.99163408,
       -237.75696761,  249.02716667])
 message: ['requested number of basinhopping iterations completed successfully']
    njev: 4903
     nit: 100
Exceptiont in full_unit_test
RESULT: (e,p,c) = True, False, False 

(e,p,c) = True, False, False
--------------------------------------------------------------------------------
37/64 complete, 11 correct, 0 penalized, 23 error
--------------------------------------------------------------------------------
id: 1105
full unit_test entry
WWWWWWW opt_model
3.88, Is@1[is](LengthOf@3[length]($hypotenuse:hypotenuse@6[hypotenuse]), $What:number@0[What])
4.21, IsTriangle@9[triangle]($triangle:triangle@9[triangle])

completed formulas:
IsHypotenuseOf($hypotenuse:line,$triangle:triangle)
IsTriangle($triangle:triangle)
Is(LengthOf($hypotenuse:line),$What:number)

Ge(180,90()) TV(norm=0.000, conf=1.00) [180, 90.0]
Equals(7(),LengthOf(Line($point_1:point,$point_2:point))) TV(norm=176.688, conf=0.00) [7.0, 183.68826493354865]
Equals(4(),LengthOf(Line($point_0:point,$point_2:point))) TV(norm=98.345, conf=0.00) [4.0, 102.34512188142109]
IsHypotenuseOf(Line($point_0:point,$point_1:point),Triangle($point_0:point,$point_1:point,$point_2:point)) TV(norm=0.000, conf=1.00) [line(a=point(x=104.32976048008047, y=184.99358273930312), b=point(x=1.0, y=0.0)), triangle(a=point(x=104.32976048008047, y=184.99358273930312), b=point(x=1.0, y=0.0), c=point(x=1.9929972709953176, y=183.68558090039991))]
Is(LengthOf(Line($point_0:point,$point_1:point)),$What:number) None None
Equals(90(),Div(MeasureOf(Angle($point_1:point,$point_2:point,$point_0:point)),Degree())) TV(norm=1.042, conf=0.99) [90.0, 91.04201324361077]
Solving...
Given formulas: set([Ge(180,90()), Equals(7(),LengthOf(Line($point_1:point,$point_2:point))), Equals(4(),LengthOf(Line($point_0:point,$point_2:point))), IsHypotenuseOf(Line($point_0:point,$point_1:point),Triangle($point_0:point,$point_1:point,$point_2:point)), Is(LengthOf(Line($point_0:point,$point_1:point)),$What:number), Equals(90(),Div(MeasureOf(Angle($point_1:point,$point_2:point,$point_0:point)),Degree()))])
iteration 1:
    nfev: 172407
     fun: inf
       x: array([ nan,  nan,  nan,  nan,  nan])
 message: ['requested number of basinhopping iterations completed successfully']
    njev: 10201
     nit: 100
iteration 2:
    nfev: 172407
     fun: inf
       x: array([ nan,  nan,  nan,  nan,  nan])
 message: ['requested number of basinhopping iterations completed successfully']
    njev: 10201
     nit: 100
iteration 3:
    nfev: 172407
     fun: inf
       x: array([ nan,  nan,  nan,  nan,  nan])
 message: ['requested number of basinhopping iterations completed successfully']
    njev: 10201
     nit: 100
Equals(nan,Sqrt(11()))
nan
Equals(nan,8())
nan
Equals(nan,Sqrt(65()))
nan
Equals(nan,11())
nan
Equals(nan,65())
nan
397.77 seconds
ans: {1: TV(norm=inf, conf=0.00), 2: TV(norm=inf, conf=0.00), 3: TV(norm=inf, conf=0.00), 4: TV(norm=inf, conf=0.00), 5: TV(norm=inf, conf=0.00)}
RESULT: (e,p,c) = False, False, False 

(e,p,c) = False, False, False
--------------------------------------------------------------------------------
38/64 complete, 11 correct, 0 penalized, 23 error
--------------------------------------------------------------------------------
id: 1106
full unit_test entry
WWWWWWW opt_model
1.45, Is@1[is](LengthOf@3[length]($c:line@5[c]), $What:number@0[What])
1.77, IsTriangle@8[triangle]($triangle:triangle@8[triangle])

completed formulas:
Is(LengthOf($c:line),$What:number)
IsTriangle($triangle:triangle)

Equals(100(),LengthOf(Line($point_1:point,$point_2:point))) TV(norm=188.026, conf=0.03) [100.0, 288.02586838145095]
Equals(90(),Div(MeasureOf(Angle($point_2:point,$point_0:point,$point_1:point)),Degree())) TV(norm=0.967, conf=0.99) [90.0, 90.96710062961164]
Equals(60(),LengthOf(Line($point_0:point,$point_2:point))) TV(norm=67.014, conf=0.28) [60.0, 127.01444042877037]
Is(LengthOf(Line($point_0:point,$point_1:point)),$What:number) None None
Ge(180,90()) TV(norm=0.000, conf=1.00) [180, 90.0]
Solving...
Given formulas: set([Equals(100(),LengthOf(Line($point_1:point,$point_2:point))), Equals(90(),Div(MeasureOf(Angle($point_2:point,$point_0:point,$point_1:point)),Degree())), Equals(60(),LengthOf(Line($point_0:point,$point_2:point))), Is(LengthOf(Line($point_0:point,$point_1:point)),$What:number), Ge(180,90())])
iteration 1:
    nfev: 23171
     fun: 6.2964189595504649e-07
       x: array([ 53.56996067,  80.00000006,  60.35754448,  99.81428144,   8.36856795])
 message: ['requested number of basinhopping iterations completed successfully']
    njev: 2657
     nit: 100
Equals(80.000000056527099,30())
80.0000000565
Equals(80.000000056527099,40())
80.0000000565
Equals(80.000000056527099,60())
80.0000000565
Equals(80.000000056527099,80())
80.0000000565
Equals(80.000000056527099,100())
80.0000000565
13.03 seconds
ans: {1: TV(norm=50.000, conf=0.09), 2: TV(norm=40.000, conf=0.33), 3: TV(norm=20.000, conf=0.71), 4: TV(norm=0.000, conf=1.00), 5: TV(norm=20.000, conf=0.78)}
idx 4, answeri: 4.0
Correct for multiple choice: index: 4 value: TV(norm=0.000, conf=1.00), golden: 4.0
RESULT: (e,p,c) = False, False, True 

(e,p,c) = False, False, True
--------------------------------------------------------------------------------
39/64 complete, 12 correct, 0 penalized, 23 error
--------------------------------------------------------------------------------
id: 1107
full unit_test entry
WWWWWWW opt_model
1.45, Is@1[is](LengthOf@3[length]($a:line@5[a]), $What:number@0[What])
1.77, IsTriangle@8[triangle]($triangle:triangle@8[triangle])

completed formulas:
Is(LengthOf($a:line),$What:number)
IsTriangle($triangle:triangle)

Equals(15(),LengthOf(Line($point_0:point,$point_1:point))) TV(norm=161.687, conf=0.00) [15.0, 176.68650058282577]
Ge(180,45()) TV(norm=0.000, conf=1.00) [180, 45.0]
Equals(90(),Div(MeasureOf(Angle($point_0:point,$point_1:point,$point_2:point)),Degree())) TV(norm=1.075, conf=0.99) [90.0, 91.0749819424723]
Equals(45(),Div(MeasureOf(Angle($point_1:point,$point_2:point,$point_0:point)),Degree())) TV(norm=0.538, conf=0.99) [45.0, 44.46211553596514]
Is(LengthOf(Line($point_0:point,$point_2:point)),$What:number) None None
Ge(180,90()) TV(norm=0.000, conf=1.00) [180, 90.0]
Equals(15(),LengthOf(Line($point_1:point,$point_2:point))) TV(norm=161.689, conf=0.00) [15.0, 176.68897344129297]
Equals(45(),Div(MeasureOf(Angle($point_2:point,$point_0:point,$point_1:point)),Degree())) TV(norm=0.537, conf=0.99) [45.0, 44.46290252156258]
Solving...
Given formulas: set([Equals(15(),LengthOf(Line($point_0:point,$point_1:point))), Ge(180,45()), Equals(90(),Div(MeasureOf(Angle($point_0:point,$point_1:point,$point_2:point)),Degree())), Equals(45(),Div(MeasureOf(Angle($point_1:point,$point_2:point,$point_0:point)),Degree())), Is(LengthOf(Line($point_0:point,$point_2:point)),$What:number), Ge(180,90()), Equals(15(),LengthOf(Line($point_1:point,$point_2:point))), Equals(45(),Div(MeasureOf(Angle($point_2:point,$point_0:point,$point_1:point)),Degree()))])
iteration 1:
    nfev: 26136
     fun: 7.8503317446632082e-07
       x: array([  4.05283667, -13.75129225, -17.37166292, -10.50370556,  21.21320384])
 message: ['requested number of basinhopping iterations completed successfully']
    njev: 3014
     nit: 100
Equals(21.213203835112754,Div(Mul(15(),Sqrt(2())),4()))
21.2132038351
Equals(21.213203835112754,Div(Mul(15(),Sqrt(2())),2()))
21.2132038351
Equals(21.213203835112754,Mul(15(),Sqrt(2())))
21.2132038351
Equals(21.213203835112754,30())
21.2132038351
Equals(21.213203835112754,Mul(30(),Sqrt(2())))
21.2132038351
23.16 seconds
ans: {1: TV(norm=15.910, conf=0.00), 2: TV(norm=10.607, conf=0.33), 3: TV(norm=0.000, conf=1.00), 4: TV(norm=8.787, conf=0.66), 5: TV(norm=21.213, conf=0.33)}
idx 3, answeri: 3.0
Correct for multiple choice: index: 3 value: TV(norm=0.000, conf=1.00), golden: 3.0
RESULT: (e,p,c) = False, False, True 

(e,p,c) = False, False, True
--------------------------------------------------------------------------------
40/64 complete, 13 correct, 0 penalized, 23 error
--------------------------------------------------------------------------------
id: 1108
full unit_test entry
WWWWWWW opt_model
1.45, Is@1[is](LengthOf@3[length]($y:line@5[y]), $What:number@0[What])
1.77, IsTriangle@8[triangle]($triangle:triangle@8[triangle])

completed formulas:
Is(LengthOf($y:line),$What:number)
IsTriangle($triangle:triangle)

Ge(180,30()) TV(norm=0.000, conf=1.00) [180, 30.0]
Equals(22(),LengthOf(Line($point_0:point,$point_1:point))) TV(norm=258.998, conf=0.00) [22.0, 280.99788571329771]
Equals(90(),Div(MeasureOf(Angle($point_0:point,$point_2:point,$point_1:point)),Degree())) TV(norm=0.366, conf=1.00) [90.0, 90.36604435445176]
Is(LengthOf(Line($point_1:point,$point_2:point)),$What:number) None None
Equals(30(),Div(MeasureOf(Angle($point_2:point,$point_1:point,$point_0:point)),Degree())) TV(norm=2.176, conf=0.92) [30.0, 27.824264261095642]
Ge(180,60()) TV(norm=0.000, conf=1.00) [180, 60.0]
Ge(180,90()) TV(norm=0.000, conf=1.00) [180, 90.0]
Equals(60(),Div(MeasureOf(Angle($point_1:point,$point_0:point,$point_2:point)),Degree())) TV(norm=1.810, conf=0.97) [60.0, 61.80969138445262]
Solving...
Given formulas: set([Ge(180,30()), Equals(22(),LengthOf(Line($point_0:point,$point_1:point))), Equals(90(),Div(MeasureOf(Angle($point_0:point,$point_2:point,$point_1:point)),Degree())), Is(LengthOf(Line($point_1:point,$point_2:point)),$What:number), Equals(30(),Div(MeasureOf(Angle($point_2:point,$point_1:point,$point_0:point)),Degree())), Ge(180,60()), Ge(180,90()), Equals(60(),Div(MeasureOf(Angle($point_1:point,$point_0:point,$point_2:point)),Degree()))])
iteration 1:
    nfev: 26041
     fun: 1.0131217358377853e-06
       x: array([-18.17373324,  11.62406096,  -4.89653031,  -8.68320731,  19.05255922])
 message: ['requested number of basinhopping iterations completed successfully']
    njev: 2993
     nit: 100
Equals(19.052559224373184,11())
19.0525592244
Equals(19.052559224373184,Mul(11(),Sqrt(2())))
19.0525592244
Equals(19.052559224373184,Mul(11(),Sqrt(3())))
19.0525592244
Equals(19.052559224373184,Mul(22(),Sqrt(2())))
19.0525592244
EERROR:root:No primitive detected.
ERROR:root:no instance found of type angle
ERROR:root:no instance found of type line
ERROR:root:1109
ERROR:root:list index out of range
Traceback (most recent call last):
  File "/home/alvaroh/geosolver/geosolver/run.py", line 164, in full_unit_test
    result = _full_unit_test(combined_model, question, label_data)
  File "/home/alvaroh/geosolver/geosolver/run.py", line 325, in _full_unit_test
    local_entities = semantic_tree_to_serialized_entities(match_parse, t, number, value_expr_formulas)
  File "/home/alvaroh/geosolver/geosolver/run.py", line 181, in semantic_tree_to_serialized_entities
    grounded_formula = ground_formulas(match_parse, [formula], value_expr_formulas)[0]
IndexError: list index out of range
ERROR:root:failed to ground variable: $sector:sector
ERROR:root:failed to ground variable: $sector:sector
ERROR:root:1110
ERROR:root:list index out of range
Traceback (most recent call last):
  File "/home/alvaroh/geosolver/geosolver/run.py", line 164, in full_unit_test
    result = _full_unit_test(combined_model, question, label_data)
  File "/home/alvaroh/geosolver/geosolver/run.py", line 325, in _full_unit_test
    local_entities = semantic_tree_to_serialized_entities(match_parse, t, number, value_expr_formulas)
  File "/home/alvaroh/geosolver/geosolver/run.py", line 181, in semantic_tree_to_serialized_entities
    grounded_formula = ground_formulas(match_parse, [formula], value_expr_formulas)[0]
IndexError: list index out of range
ERROR:root:failed to ground variable: $tangent:tangent
ERROR:root:failed to ground variable: $tangent:tangent
ERROR:root:failed to ground variable: $tangent:tangent
ERROR:root:failed to ground variable: $tangent:tangent
ERROR:root:failed to ground variable: $tangent:tangent
ERROR:root:failed to ground variable: $tangent:tangent
ERROR:root:failed to ground variable: $tangent:tangent
ERROR:root:failed to ground variable: $tangent:tangent
ERROR:root:failed to ground variable: $tangent:tangent
ERROR:root:failed to ground variable: $tangent:tangent
ERROR:root:failed to ground variable: $tangent:tangent
ERROR:root:failed to ground variable: $tangent:tangent
ERROR:root:failed to ground variable: $tangent:tangent
ERROR:root:failed to ground variable: $tangent:tangent
ERROR:root:failed to ground variable: $tangent:tangent
ERROR:root:failed to ground variable: $tangent:tangent
ERROR:root:failed to ground variable: $tangent:tangent
ERROR:root:failed to ground variable: $tangent:tangent
ERROR:root:failed to ground variable: $tangent:tangent
ERROR:root:failed to ground variable: $tangent:tangent
ERROR:root:failed to ground variable: $tangent:tangent
ERROR:root:failed to ground variable: $tangent:tangent
ERROR:root:failed to ground variable: $tangent:tangent
ERROR:root:failed to ground variable: $tangent:tangent
ERROR:root:failed to ground variable: $tangent:tangent
ERROR:root:failed to ground variable: $tangent:tangent
ERROR:root:failed to ground variable: $tangent:tangent
ERROR:root:failed to ground variable: $tangent:tangent
ERROR:root:failed to ground variable: $tangent:tangent
ERROR:root:failed to ground variable: $tangent:tangent
ERROR:root:failed to ground variable: $tangent:tangent
ERROR:root:failed to ground variable: $tangent:tangent
ERROR:root:failed to ground variable: $tangent:tangent
ERROR:root:failed to ground variable: $tangent:tangent
ERROR:root:failed to ground variable: $tangent:tangent
ERROR:root:failed to ground variable: $tangent:tangent
ERROR:root:failed to ground variable: $tangent:tangent
ERROR:root:failed to ground variable: $tangent:tangent
ERROR:root:failed to ground variable: $tangent:tangent
ERROR:root:failed to ground variable: $tangent:tangent
ERROR:root:failed to ground variable: $tangent:tangent
ERROR:root:failed to ground variable: $tangent:tangent
ERROR:root:failed to ground variable: $tangent:tangent
ERROR:root:failed to ground variable: $tangent:tangent
ERROR:root:failed to ground variable: $tangent:tangent
ERROR:root:failed to ground variable: $tangent:tangent
ERROR:root:failed to ground variable: $tangent:tangent
ERROR:root:failed to ground variable: $tangent:tangent
ERROR:root:failed to ground variable: $tangent:tangent
ERROR:root:failed to ground variable: $tangent:tangent
ERROR:root:failed to ground variable: $tangent:tangent
ERROR:root:failed to ground variable: $tangent:tangent
ERROR:root:failed to ground variable: $tangent:tangent
ERROR:root:failed to ground variable: $tangent:tangent
ERROR:root:failed to ground variable: $tangent:tangent
ERROR:root:1111
ERROR:root:list index out of range
Traceback (most recent call last):
  File "/home/alvaroh/geosolver/geosolver/run.py", line 164, in full_unit_test
    result = _full_unit_test(combined_model, question, label_data)
  File "/home/alvaroh/geosolver/geosolver/run.py", line 325, in _full_unit_test
    local_entities = semantic_tree_to_serialized_entities(match_parse, t, number, value_expr_formulas)
  File "/home/alvaroh/geosolver/geosolver/run.py", line 181, in semantic_tree_to_serialized_entities
    grounded_formula = ground_formulas(match_parse, [formula], value_expr_formulas)[0]
IndexError: list index out of range
ERROR:root:failed to ground variable: $square:square
ERROR:root:failed to ground variable: $square:square
ERROR:root:failed to ground variable: $square:square
ERROR:root:failed to ground variable: $square:square
ERROR:root:failed to ground variable: $square:square
ERROR:root:failed to ground variable: $square:square
ERROR:root:failed to ground variable: $square:square
ERROR:root:failed to ground variable: $square:square
ERROR:root:failed to ground variable: $square:square
ERROR:root:failed to ground variable: $square:square
ERROR:root:failed to ground variable: $square:square
ERROR:root:failed to ground variable: $square:square
ERROR:root:failed to ground variable: $square:square
ERROR:root:failed to ground variable: $square:square
ERROR:root:failed to ground variable: $square:square
ERROR:root:failed to ground variable: $square:square
ERROR:root:failed to ground variable: $square:square
ERROR:root:failed to ground variable: $square:square
ERROR:root:failed to ground variable: $square:square
ERROR:root:failed to ground variable: $square:square
ERROR:root:failed to ground variable: $square:square
ERROR:root:failed to ground variable: $square:square
quals(19.052559224373184,Mul(22(),Sqrt(3())))
19.0525592244
20.62 seconds
ans: {1: TV(norm=8.053, conf=0.46), 2: TV(norm=3.496, conf=0.80), 3: TV(norm=0.000, conf=1.00), 4: TV(norm=12.060, conf=0.52), 5: TV(norm=19.053, conf=0.33)}
idx 3, answeri: 3.0
Correct for multiple choice: index: 3 value: TV(norm=0.000, conf=1.00), golden: 3.0
RESULT: (e,p,c) = False, False, True 

(e,p,c) = False, False, True
--------------------------------------------------------------------------------
41/64 complete, 14 correct, 0 penalized, 23 error
--------------------------------------------------------------------------------
id: 1109
full unit_test entry
WWWWWWW opt_model
1.93, Is@10[is](LengthOf@12[length]($arc:arc@15[arc]), $What:number@9[what])

Exceptiont in full_unit_test
RESULT: (e,p,c) = True, False, False 

(e,p,c) = True, False, False
--------------------------------------------------------------------------------
42/64 complete, 14 correct, 0 penalized, 24 error
--------------------------------------------------------------------------------
id: 1110
full unit_test entry
WWWWWWW opt_model
3.91, Is@1[is](AreaOf@3[area]($sector:sector@6[sector]), $What:number@0[What])

Exceptiont in full_unit_test
RESULT: (e,p,c) = True, False, False 

(e,p,c) = True, False, False
--------------------------------------------------------------------------------
43/64 complete, 14 correct, 0 penalized, 25 error
--------------------------------------------------------------------------------
id: 1111
full unit_test entry
WWWWWWW opt_model
4.32, Is@14[is](LengthOf@3[length]($BC:line@13[BC]), RadiusOf@16[radius]($circle:circle@19[circle]))
7.29, Tangent@24[tangent]($AB:line@22[AB], $circle:circle@27[circle])
10.17, Is@1[is](LengthOf@3[length]($AB:line@6[AB]), $What:number@0[What])
12.50, Is@23[is]($line:line@12[line], $line:line@21[line])
13.44, IsLine@5[line]($AB:line@6[AB])

Exceptiont in full_unit_test
RESULT: (e,p,c) = True, False, False 

(e,p,c) = True, False, False
--------------------------------------------------------------------------------
44/64 complete, 14 correct, 0 penalized, 26 error
--------------------------------------------------------------------------------
id: 1114
full unit_test entry
WWWWWWW opt_model
1.57, True@6[true]($Which:ground@0[Which])

completed formulas:
True($Which:ground)

No legal next available.
completed formulas:

No legal next available.
f and t: Equals($a:number,$b:number) Equals@0[@s_0]($a:number@0[@s_0], $b:number@0[@s_0])
local entities: []
completed formulas:

2.31, Is@2[is]($BC:line@4[BC], $line:line@0[line])

f and t: Equals($AC:number,$line:number) Equals@1[@s_0]($AC:number@1[@s_0], $line:number@1[@s_0])
local entities: [{'content': {'span': [1, 2], 'class': 'TagRule', 'signature': {'class': 'VariableSignature', 'return_type': 'line', 'valence': 0, 'id': 'AC', 'name': 'AC'}}, 'coords': [[42.33, 23.99], [174.67, 155.33]], 'sentence_number': 3}]
completed formulas:
Is($BC:line,$line:line)

No legal next available.
f and t: Equals($b:number,$c:number) Equals@0[@s_0]($b:number@0[@s_0], $c:number@0[@s_0])
local entities: []
completed formulas:

Equals(LengthOf(Line($point_3:point,$point_2:point)),$line:number) None None
Is(Line($point_1:point,$point_2:point),Line($point_1:point,$point_2:point)) TV(norm=0.000, conf=1.00) [line(a=point(x=0.6716230906712326, y=132.66917251672101), b=point(x=133.67171493846269, y=133.32843245633427)), line(a=point(x=0.6716230906712326, y=132.66917251672101), b=point(x=133.67171493846269, y=133.32843245633427))]
Equals($c:number,Div(MeasureOf(Angle($point_3:point,$point_1:point,$point_2:point)),Degree())) None None
Ge(180,$c:number) None None
Ge(180,$a:number) None None
Equals($b:number,Div(MeasureOf(Angle($point_0:point,$point_3:point,$point_1:point)),Degree())) None None
Equals($a:number,$b:number) None None
Equals($b:number,$c:number) None None
Equals($a:number,Div(MeasureOf(Angle($point_0:point,$point_3:point,$point_1:point)),Degree())) None None
Ge(180,$b:number) None None
True($Which:ground) None None
Solving...
Given formulas: set([Equals(LengthOf(Line($point_3:point,$poERROR:root:1114
ERROR:root:'NoneType' object has no attribute 'iteritems'
Traceback (most recent call last):
  File "/home/alvaroh/geosolver/geosolver/run.py", line 164, in full_unit_test
    result = _full_unit_test(combined_model, question, label_data)
  File "/home/alvaroh/geosolver/geosolver/run.py", line 382, in _full_unit_test
    ans = solve(reduced_formulas, choice_formulas, assignment=None)#core_parse.variable_assignment)
  File "geosolver/solver/solve.py", line 82, in solve
    for key, choice_formula in choice_formulas.iteritems():
AttributeError: 'NoneType' object has no attribute 'iteritems'
int_2:point)),$line:number), Is(Line($point_1:point,$point_2:point),Line($point_1:point,$point_2:point)), Equals($c:number,Div(MeasureOf(Angle($point_3:point,$point_1:point,$point_2:point)),Degree())), Ge(180,$c:number), Ge(180,$a:number), Equals($b:number,Div(MeasureOf(Angle($point_0:point,$point_3:point,$point_1:point)),Degree())), Equals($a:number,$b:number), Equals($b:number,$c:number), Equals($a:number,Div(MeasureOf(Angle($point_0:point,$point_3:point,$point_1:point)),Degree())), Ge(180,$b:number), True($Which:ground)])
iteration 1:
    nfev: 44367
     fun: 1.0999870632133479e-06
       x: array([ 27.23024444,   1.60002314,  60.12322268,  13.11294354,
        27.23024458,  24.27256191,  27.23024481,  27.19468256,
        21.04170586,  39.02496402])
 message: ['requested number of basinhopping iterations completed successfully']
    njev: 3216
     nit: 100
Exceptiont in full_unit_test
RESULT: (e,p,c) = True, False, False 

(e,p,c) = True, False, False
--------------------------------------------------------------------------------
45/64 complete, 14 correct, 0 penalized, 27 error
--------------------------------------------------------------------------------
id: 1119
full unit_test entry
WWWWWWW opt_model
cc tree: CC@20[and]($EF:line@19[EF], $GH:line@21[GH]) 1.0
cc tree: CC@7[and]($EF:number@6[EF], $GH:number@8[GH]) 1.0
cc tree: CC@7[and]($EF:line@6[EF], $GH:line@8[GH]) 1.0
cc tree: CC@20[and]($EF:number@19[EF], $GH:number@21[GH]) 1.0
2.95, Perpendicular@16[perpendicular]($AB:line@14[AB], $EF:line@19[EF])
5.76, Parallel@10[parallel]($EF:line@6[EF], $GH:line@8[GH])
8.09, Is@9[are]($lines:line@5[lines], $lines:line@18[lines])
10.40, Is@15[is]($GH:line@21[GH], $line:line@13[line])

completed formulas:
Perpendicular($AB:line,{$EF:line,$GH:line})
Is({$GH:line,$EF:line},$line:line)
Parallel({$EF:line,$GH:line},{$GH:line,$EF:line})
Is($lines:line,$lines:line)

3.88, Is@1[is](LengthOf@3[length]($AB:line@6[AB]), $What:number@0[What])
4.82, IsLine@5[line]($AB:line@6[AB])

completed formulas:
Is(LengthOf($AB:line),$What:number)
IsLine($AB:line)

Is(Line($point_1:point,$point_2:point),Line($point_1:point,$point_2:point)) TV(norm=0.000, conf=1.00) [line(a=point(x=1.0, y=181.0), b=point(x=211.0, y=181.0)), line(a=point(x=1.0, y=181.0), b=point(x=211.0, y=181.0))]
Is(Line($point_6:point,$point_4:point),Line($point_1:point,$point_2:point)) TV(norm=inf, conf=0.00) [line(a=point(x=0.0, y=94.0), b=point(x=202.0, y=94.0)), line(a=point(x=1.0, y=181.0), b=point(x=211.0, y=181.0))]
Is(Line($point_5:point,$point_7:point),Line($point_5:point,$point_7:point)) TV(norm=0.000, conf=1.00) [line(a=point(x=49.0, y=0.0), b=point(x=151.71703296703296, y=181.5)), line(a=point(x=49.0, y=0.0), b=point(x=151.71703296703296, y=181.5))]
Is(Line($point_1:point,$point_7:point),Line($point_1:point,$point_7:point)) TV(norm=0.000, conf=1.00) [line(a=point(x=1.0, y=181.0), b=point(x=151.71703296703296, y=181.5)), line(a=point(x=1.0, y=181.0), b=point(x=151.71703296703296, y=181.5))]
PointLiesOnLine($point_3:point,Line($point_1:point,$point_2:point)) TV(norm=0.010, conf=1.00) [point(x=99.01111111111112, y=181.5), line(a=point(x=1.0, y=181.0), b=point(x=211.0, y=181.0))]
Equals(10(),LengthOf(Line($point_0:point,$point_7:point))) TV(norm=91.883, conf=0.00) [10.0, 101.88327468137788]
PointLiesOnLine($point_0:point,Line($point_4:point,$point_6:point)) TV(norm=0.020, conf=0.99) [point(x=101.28896223260973, y=92.971974257836834), line(a=point(x=202.0, y=94.0), b=point(x=0.0, y=94.0))]
Is(Line($point_2:point,$point_3:point),Line($point_2:point,$point_3:point)) TV(norm=0.000, conf=1.00) [line(a=point(x=211.0, y=181.0), b=point(x=99.01111111111112, y=181.5)), line(a=point(x=211.0, y=181.0), b=point(x=99.01111111111112, y=181.5))]
Is(Line($point_0:point,$point_6:point),Line($point_0:point,$point_6:point)) TV(norm=0.000, conf=1.00) [line(a=point(x=101.28896223260973, y=92.971974257836834), b=point(x=0.0, y=94.0)), line(a=point(x=101.28896223260973, y=92.971974257836834), b=point(x=0.0, y=94.0))]
Is(Line($point_0:point,$point_3:point),Line($point_0:point,$point_3:point)) TV(norm=0.000, conf=1.00) [line(a=point(x=101.28896223260973, y=92.971974257836834), b=point(x=99.01111111111112, y=181.5)), line(a=point(x=101.28896223260973, y=92.971974257836834), b=point(x=99.01111111111112, y=181.5))]
Ge(180,120()) TV(norm=0.000, conf=1.00) [180, 120.0]
Is(Line($point_1:point,$point_3:point),Line($point_1:point,$point_3:point)) TV(norm=0.000, conf=1.00) [line(a=point(x=1.0, y=181.0), b=point(x=99.01111111111112, y=181.5)), line(a=point(x=1.0, y=181.0), b=point(x=99.01111111111112, y=181.5))]
Is(Line($point_3:point,$point_7:point),Line($point_3:point,$point_7:point)) TV(norm=0.000, conf=1.00) [line(a=point(x=99.01111111111112, y=181.5), b=point(x=151.71703296703296, y=181.5)), line(a=point(x=99.01111111111112, y=181.5), b=point(x=151.71703296703296, y=181.5))]
Perpendicular(Line($point_0:point,$point_3:point),Line($point_6:point,$point_4:point)) TV(norm=0.026, conf=0.98) [line(a=point(x=101.28896223260973, y=92.971974257836834), b=point(x=99.01111111111112, y=181.5)), line(a=point(x=0.0, y=94.0), b=point(x=202.0, y=94.0))]
Is(LengthOf(Line($point_0:point,$point_3:point)),$What:number) None None
PointLiesOnLine($point_0:point,Line($point_5:point,$point_7:point)) TV(norm=0.005, conf=1.00) [point(x=101.28896223260973, y=92.971974257836834), line(a=point(x=49.0, y=0.0), b=point(x=151.71703296703296, y=181.5))]
Equals(120(),Div(MeasureOf(Angle($point_5:point,$point_0:point,$point_4:point)),Degree())) TV(norm=0.061, conf=1.00) [120.0, 119.93895088266946]
PointLiesOnLine($point_3:point,Line($point_1:point,$point_7:point)) TV(norm=0.005, conf=1.00) [point(x=99.01111111111112, y=181.5), line(a=point(x=1.0, y=181.0), b=point(x=151.71703296703296, y=181.5))]
Is(Line($point_0:point,$point_4:point),Line($point_0:point,$point_4:point)) TV(norm=0.000, conf=1.00) [line(a=point(x=101.28896223260973, y=92.971974257836834), b=point(x=202.0, y=94.0)), line(a=point(x=101.28896223260973, y=92.971974257836834), b=point(x=202.0, y=94.0))]
Parallel(Line($point_6:point,$point_4:point),Line($point_1:point,$point_2:point)) TV(norm=0.000, conf=1.00) [line(a=point(x=0.0, y=94.0), b=point(x=202.0, y=94.0)), line(a=point(x=1.0, y=181.0), b=point(x=211.0, y=181.0))]
Is(Line($point_4:point,$point_6:point),Line($point_4:point,$point_6:point)) TV(norm=0.000, conf=1.00) [line(a=point(x=202.0, y=94.0), b=point(x=0.0, y=94.0)), line(a=point(x=202.0, y=94.0), b=point(x=0.0, y=94.0))]
Is(Line($point_0:point,$point_5:point),Line($point_0:point,$point_5:point)) TV(norm=0.000, conf=1.00) [line(a=point(x=101.28896223260973, y=92.971974257836834), b=point(x=49.0, y=0.0)), line(a=point(x=101.28896223260973, y=92.971974257836834), b=point(x=49.0, y=0.0))]
PointLiesOnLine($point_7:point,Line($point_1:point,$point_2:point)) TV(norm=0.012, conf=1.00) [point(x=151.71703296703296, y=181.5), line(a=point(x=1.0, y=181.0), b=point(x=211.0, y=181.0))]
Perpendicular(Line($point_0:point,$point_3:point),Line($point_1:point,$point_2:point)) TV(norm=0.026, conf=0.98) [line(a=point(x=101.28896223260973, y=92.971974257836834), b=point(x=99.01111111111112, y=181.5)), line(a=point(x=1.0, y=181.0), b=point(x=211.0, y=181.0))]
Is(Line($point_0:point,$point_7:point),Line($point_0:point,$point_7:point)) TV(norm=0.000, conf=1.00) [line(a=point(x=101.28896223260973, y=92.971974257836834), b=point(x=151.71703296703296, y=181.5)), line(a=point(x=101.28896223260973, y=92.971974257836834), b=point(x=151.71703296703296, y=181.5))]
PointLiesOnLine($point_7:point,Line($point_2:point,$point_3:point)) TV(norm=0.008, conf=1.00) [point(x=151.71703296703296, y=181.5), line(a=point(x=211.0, y=181.0), b=point(x=99.01111111111112, y=181.5))]
Is(Line($point_2:point,$point_7:point),Line($point_2:point,$point_7:point)) TV(norm=0.000, conf=1.00) [line(a=point(x=211.0, y=181.0), b=point(x=151.71703296703296, y=181.5)), line(a=point(x=211.0, y=181.0), b=point(x=151.71703296703296, y=181.5))]
Solving...
Given formulas: set([Is(Line($point_1:point,$point_2:point),Line($point_1:point,$point_2:point)), Is(Line($point_6:point,$point_4:point),Line($point_1:point,$point_2:point)), Is(Line($point_5ERROR:root:1119
ERROR:root:Timeout
Traceback (most recent call last):
  File "/home/alvaroh/geosolver/geosolver/run.py", line 164, in full_unit_test
    result = _full_unit_test(combined_model, question, label_data)
  File "/home/alvaroh/geosolver/geosolver/run.py", line 382, in _full_unit_test
    ans = solve(reduced_formulas, choice_formulas, assignment=None)#core_parse.variable_assignment)
  File "geosolver/solver/solve.py", line 41, in solve
    ns.solve()
  File "geosolver/solver/numeric_solver.py", line 29, in solve
    self.assignment, self.confidence = find_assignment(self.variable_handler, self.atoms, self.max_num_resets, self.tol)
  File "geosolver/solver/numeric_solver.py", line 69, in find_assignment
    result = basinhopping(func, init, minimizer_kwargs=minimizer_kwargs)
  File "/usr/lib/python2.7/dist-packages/scipy/optimize/_basinhopping.py", line 576, in basinhopping
    new_global_min = bh.one_cycle()
  File "/usr/lib/python2.7/dist-packages/scipy/optimize/_basinhopping.py", line 121, in one_cycle
    xtrial, energy_trial, accept = self._monte_carlo_step()
  File "/usr/lib/python2.7/dist-packages/scipy/optimize/_basinhopping.py", line 72, in _monte_carlo_step
    minres = self.minimizer(x_after_step)
  File "/usr/lib/python2.7/dist-packages/scipy/optimize/_basinhopping.py", line 243, in __call__
    return self.minimizer(self.func, x0, **self.kwargs)
  File "/usr/lib/python2.7/dist-packages/scipy/optimize/_minimize.py", line 388, in minimize
    constraints, **options)
  File "/usr/lib/python2.7/dist-packages/scipy/optimize/slsqp.py", line 374, in _minimize_slsqp
    g = append(fprime(x),0.0)
  File "/usr/lib/python2.7/dist-packages/scipy/optimize/optimize.py", line 281, in function_wrapper
    return function(*(wrapper_args + args))
  File "/usr/lib/python2.7/dist-packages/scipy/optimize/slsqp.py", line 62, in approx_jacobian
    jac[i] = (func(*((x0+dx,)+args)) - f0)/epsilon
  File "/usr/lib/python2.7/dist-packages/scipy/optimize/optimize.py", line 281, in function_wrapper
    return function(*(wrapper_args + args))
  File "geosolver/solver/numeric_solver.py", line 62, in func
    return sum(evaluate(atom, variable_handler.vector_to_dict(vector)).norm for atom in atoms)
  File "geosolver/solver/numeric_solver.py", line 62, in <genexpr>
    return sum(evaluate(atom, variable_handler.vector_to_dict(vector)).norm for atom in atoms)
  File "geosolver/ontology/ontology_semantics.py", line 483, in evaluate
    if not formula.is_grounded(assignment.keys()):
  File "geosolver/ontology/ontology_definitions.py", line 287, in is_grounded
    return all(not isinstance(child, Node) or child.is_grounded(ids) for child in self.children)
  File "geosolver/ontology/ontology_definitions.py", line 287, in <genexpr>
    return all(not isinstance(child, Node) or child.is_grounded(ids) for child in self.children)
  File "geosolver/ontology/ontology_definitions.py", line 287, in is_grounded
    return all(not isinstance(child, Node) or child.is_grounded(ids) for child in self.children)
  File "geosolver/ontology/ontology_definitions.py", line 287, in <genexpr>
    return all(not isinstance(child, Node) or child.is_grounded(ids) for child in self.children)
  File "geosolver/ontology/ontology_definitions.py", line 287, in is_grounded
    return all(not isinstance(child, Node) or child.is_grounded(ids) for child in self.children)
  File "geosolver/ontology/ontology_definitions.py", line 287, in <genexpr>
    return all(not isinstance(child, Node) or child.is_grounded(ids) for child in self.children)
  File "geosolver/ontology/ontology_definitions.py", line 285, in is_grounded
    return self.signature.id in ids
  File "/home/alvaroh/geosolver/geosolver/run.py", line 158, in handler
    raise Exception("Timeout")
Exception: Timeout
:point,$point_7:point),Line($point_5:point,$point_7:point)), Is(Line($point_1:point,$point_7:point),Line($point_1:point,$point_7:point)), PointLiesOnLine($point_3:point,Line($point_1:point,$point_2:point)), Equals(10(),LengthOf(Line($point_0:point,$point_7:point))), PointLiesOnLine($point_0:point,Line($point_4:point,$point_6:point)), Is(Line($point_2:point,$point_3:point),Line($point_2:point,$point_3:point)), Is(Line($point_0:point,$point_6:point),Line($point_0:point,$point_6:point)), Is(Line($point_0:point,$point_3:point),Line($point_0:point,$point_3:point)), Ge(180,120()), Is(Line($point_1:point,$point_3:point),Line($point_1:point,$point_3:point)), Is(Line($point_3:point,$point_7:point),Line($point_3:point,$point_7:point)), Perpendicular(Line($point_0:point,$point_3:point),Line($point_6:point,$point_4:point)), Is(LengthOf(Line($point_0:point,$point_3:point)),$What:number), PointLiesOnLine($point_0:point,Line($point_5:point,$point_7:point)), Equals(120(),Div(MeasureOf(Angle($point_5:point,$point_0:point,$point_4:point)),Degree())), PointLiesOnLine($point_3:point,Line($point_1:point,$point_7:point)), Is(Line($point_0:point,$point_4:point),Line($point_0:point,$point_4:point)), Parallel(Line($point_6:point,$point_4:point),Line($point_1:point,$point_2:point)), Is(Line($point_4:point,$point_6:point),Line($point_4:point,$point_6:point)), Is(Line($point_0:point,$point_5:point),Line($point_0:point,$point_5:point)), PointLiesOnLine($point_7:point,Line($point_1:point,$point_2:point)), Perpendicular(Line($point_0:point,$point_3:point),Line($point_1:point,$point_2:point)), Is(Line($point_0:point,$point_7:point),Line($point_0:point,$point_7:point)), PointLiesOnLine($point_7:point,Line($point_2:point,$point_3:point)), Is(Line($point_2:point,$point_7:point),Line($point_2:point,$point_7:point))])
iteration 1:
    nfev: 274417
     fun: inf
       x: array([ nan,  nan,  nan,  nan,  nan,  nan,  nan,  nan,  nan,  nan,  nan,
        nan,  nan,  nan,  nan])
 message: ['requested number of basinhopping iterations completed successfully']
    njev: 10201
     nit: 100
iteration 2:
    nfev: 274417
     fun: inf
       x: array([ nan,  nan,  nan,  nan,  nan,  nan,  nan,  nan,  nan,  nan,  nan,
        nan,  nan,  nan,  nan])
 message: ['requested number of basinhopping iterations completed successfully']
    njev: 10201
     nit: 100
Exceptiont in full_unit_test
RESULT: (e,p,c) = True, False, False 

(e,p,c) = True, False, False
--------------------------------------------------------------------------------
46/64 complete, 14 correct, 0 penalized, 28 error
--------------------------------------------------------------------------------
id: 1120
full unit_test entry
WWWWWWW opt_model
cc tree: CC@19[and]($x:angle@15[x], $y:angle@17[y]) 1.0
cc tree: CC@19[and]($x:angle@15[x], $z:angle@20[z]) 1.0
4.77, Is@6[is](SumOf@8[sum](MeasureOf@11[measures]($angles:angle@14[angles])), $What:number@5[what])

completed formulas:
Is(SumOf(MeasureOf($angles:angle)),$What:number)

PointLiesOnLine($point_8:point,Line($point_0:point,$point_4:point)) TV(norm=0.000, conf=1.00) [point(x=87.084033613445371, y=184.0), line(a=point(x=56.0, y=238.0), b=point(x=193.0, y=0.0))]
PointLiesOnLine($point_1:point,Line($point_3:point,$point_7:point)) TV(norm=0.000, conf=1.00) [point(x=142.44153338257684, y=87.83149675143585), line(a=point(x=92.0, y=1.0), b=point(x=232.0, y=242.0))]
PointLiesOnLine($point_2:point,Line($point_1:point,$point_7:point)) TV(norm=0.000, conf=1.00) [point(x=198.30705394190869, y=184.0), line(a=point(x=142.44153338257684, y=87.83149675143585), b=point(x=232.0, y=242.0))]
PointLiesOnLine($point_8:point,Line($point_0:point,$point_1:point)) TV(norm=0.000, conf=1.00) [point(x=87.084033613445371, y=184.0), line(a=point(x=56.0, y=238.0), b=point(x=142.44153338257684, y=87.83149675143585))]
PointLiesOnLine($point_1:point,Line($point_2:point,$point_3:point)) TV(norm=0.000, conf=1.00) [point(x=142.44153338257684, y=87.83149675143585), line(a=point(x=198.30705394190869, y=184.0), b=point(x=92.0, y=1.0))]
Is(SumOf({MeasureOf(Angle($point_8:point,$point_2:point,$point_3:point)),MeasureOf(Angle($point_1:point,$point_2:point,$point_8:point)),MeasureOf(Angle($point_8:point,$point_1:point,$point_7:point)),MeasureOf(Angle($point_2:point,$point_8:point,$point_0:point)),MeasureOf(Angle($point_5:point,$point_2:point,$point_7:point)),MeasureOf(Angle($point_0:point,$point_1:point,$point_2:point)),MeasureOf(Angle($point_0:point,$point_8:point,$point_2:point)),MeasureOf(Angle($point_0:point,$point_1:point,$point_3:point)),MeasureOf(Angle($point_6:point,$point_2:point,$point_7:point)),MeasureOf(Angle($point_3:point,$point_1:point,$point_8:point)),MeasureOf(Angle($point_5:point,$point_8:point,$point_0:point)),MeasureOf(Angle($point_5:point,$point_2:point,$point_1:point)),MeasureOf(Angle($point_6:point,$point_8:point,$point_0:point)),MeasureOf(Angle($point_5:point,$point_8:point,$point_1:point)),MeasureOf(Angle($point_8:point,$point_2:point,$point_7:point)),MeasureOf(Angle($point_7:point,$point_1:point,$point_0:point)),MeasureOf(Angle($point_5:point,$point_8:point,$point_4:point)),MeasureOf(Angle($point_5:point,$point_2:point,$point_3:point)),MeasureOf(Angle($point_7:point,$point_2:point,$point_8:point)),MeasureOf(Angle($point_0:point,$point_1:point,$point_7:point)),MeasureOf(Angle($point_2:point,$point_1:point,$point_8:point)),MeasureOf(Angle($point_6:point,$point_2:point,$point_3:point)),MeasureOf(Angle($point_3:point,$point_1:point,$point_4:point)),MeasureOf(Angle($point_7:point,$point_1:point,$point_4:point)),MeasureOf(Angle($point_6:point,$point_2:point,$point_1:point)),MeasureOf(Angle($point_1:point,$point_8:point,$point_2:point)),MeasureOf(Angle($point_4:point,$point_1:point,$point_7:point)),MeasureOf(Angle($point_2:point,$point_1:point,$point_4:point)),MeasureOf(Angle($point_3:point,$point_1:point,$point_0:point)),MeasureOf(Angle($point_3:point,$point_2:point,$point_6:point)),MeasureOf(Angle($point_8:point,$point_1:point,$point_3:point)),MeasureOf(Angle($point_3:point,$point_2:point,$point_8:point)),MeasureOf(Angle($point_6:point,$point_8:point,$point_1:point)),MeasureOf(Angle($point_4:point,$point_1:point,$point_3:point)),MeasureOf(Angle($point_2:point,$point_1:point,$point_0:point)),MeasureOf(Angle($point_4:point,$point_1:point,$point_2:point)),MeasureOf(Angle($point_1:point,$point_2:point,$point_5:point)),MeasureOf(Angle($point_1:point,$point_8:point,$point_6:point)),MeasureOf(Angle($point_8:point,$point_1:point,$point_2:point)),MeasureOf(Angle($point_3:point,$point_2:point,$point_5:point)),MeasureOf(Angle($point_1:point,$point_2:point,$point_6:point)),MeasureOf(Angle($point_4:point,$point_8:point,$point_2:point)),MeasureOf(Angle($point_2:point,$point_8:point,$point_4:point)),MeasureOf(Angle($point_7:point,$point_2:point,$point_6:point)),MeasureOf(Angle($point_7:point,$point_1:point,$point_8:point)),MeasureOf(Angle($point_4:point,$point_8:point,$point_6:point)),MeasureOf(Angle($point_0:point,$point_8:point,$point_6:point)),MeasureOf(Angle($point_8:point,$point_2:point,$point_1:point)),MeasureOf(Angle($point_1:point,$point_8:point,$point_5:point)),MeasureOf(Angle($point_4:point,$point_8:point,$point_5:point)),MeasureOf(Angle($point_6:point,$point_8:point,$point_4:point)),MeasureOf(Angle($point_0:point,$point_8:point,$point_5:point)),MeasureOf(Angle($point_2:point,$point_8:point,$point_1:point)),MeasureOf(Angle($point_7:point,$point_2:point,$point_5:point))}),$What:number) None None
PointLiesOnLine($point_1:point,Line($point_0:point,$point_4:point)) TV(norm=0.000, conf=1.00) [point(x=142.44153338257684, y=87.83149675143585), line(a=point(x=56.0, y=238.0), b=point(x=193.0, y=0.0))]
Ge(Pi(),MeasureOf(Angle($point_1:point,$point_2:point,$point_5:point))) TV(norm=0.000, conf=1.00) [3.141592653589793, 2.097062925951132]
PointLiesOnLine($point_2:point,Line($point_3:point,$point_7:point)) TV(norm=0.000, conf=1.00) [point(x=198.30705394190869, y=184.0), line(a=point(x=92.0, y=1.0), b=point(x=232.0, y=242.0))]
PointLiesOnLine($point_8:point,Line($point_5:point,$point_6:point)) TV(norm=0.000, conf=1.00) [point(x=87.084033613445371, y=184.0), line(a=point(x=293.0, y=184.0), b=point(x=0.0, y=184.0))]
PointLiesOnLine($point_1:point,Line($point_4:point,$point_8:point)) TV(norm=0.000, conf=1.00) [point(x=142.44153338257684, y=87.83149675143585), line(a=point(x=193.0, y=0.0), b=point(x=87.084033613445371, y=184.0))]
PointLiesOnLine($point_2:point,Line($point_5:point,$point_6:point)) TV(norm=0.000, conf=1.00) [point(x=198.30705394190869, y=184.0), line(a=point(x=293.0, y=184.0), b=point(x=0.0, y=184.0))]
Ge(Pi(),MeasureOf(Angle($point_2:point,$point_8:point,$point_0:point))) TV(norm=0.000, conf=1.00) [3.141592653589793, 2.0931041287899994]
PointLiesOnLine($point_8:point,Line($point_2:point,$point_6:point)) TV(norm=0.000, conf=1.00) [point(x=87.084033613445371, y=184.0), line(a=point(x=198.30705394190869, y=184.0), b=point(x=0.0, y=184.0))]
Ge(Pi(),MeasureOf(Angle($point_0:point,$point_1:point,$point_3:point))) TV(norm=0.000, conf=1.00) [3.141592653589793, 2.0930182524384549]
PointLiesOnLine($point_2:point,Line($point_5:point,$point_8:point)) TV(norm=0.000, conf=1.00) [point(x=198.30705394190869, y=184.0), line(a=point(x=293.0, y=184.0), b=point(x=87.084033613445371, y=184.0))]
Solving...
Given formulas: set([PointLiesOnLine($point_8:point,Line($point_0:point,$point_4:point)), PointLiesOnLine($point_1:point,Line($point_3:point,$point_7:point)), PointLiesOnLine($point_2:point,Line($point_1:point,$point_7:point)), PointLiesOnLine($point_8:point,Line($point_0:point,$point_1:point)), PointLiesOnLine($point_1:point,Line($point_2:point,$point_3:point)), Is(SumOf({MeasureOf(Angle($point_8:point,$point_2:point,$point_3:point)),MeasureOf(Angle($point_1:point,$point_2:point,$point_8:point)),MeasureOf(Angle($point_8:point,$point_1:point,$point_7:point)),MeasureOf(Angle($point_2:point,$point_8:point,$point_0:point)),MeasureOf(Angle($point_5:point,$point_2:point,$point_7:point)),MeasureOf(Angle($point_0:point,$point_1:point,$point_2:point)),MeasureOf(Angle($point_0:point,$point_8:point,$point_2:point)),MeasureOf(Angle($point_0:point,$point_1:point,$point_3:point)),MeasureOf(Angle($point_6:point,$point_2:point,$point_7:point)),MeasureOf(Angle($point_3:point,$point_1:point,$point_8:point)),MeasureOf(Angle($point_5:point,$point_8:point,$point_0:point)),MeasureOf(Angle($point_5:point,$point_2:point,$point_1:point)),MeasureOf(Angle($point_6:point,$point_8:point,$point_0:point)),MeasureOf(Angle($point_5:point,$point_8:point,$point_1:point)),MeasureOf(Angle($point_8:point,$point_2:point,$point_7:point)),MeasureOf(Angle($point_7:point,$point_1:point,$point_0:point)),MeasureOf(Angle($point_5:point,$point_8:point,$point_4:point)),MeasureOf(Angle($point_5:point,$point_2:point,$point_3:point)),MeasureOf(Angle($point_7:point,$point_2:point,$point_8:point)),MeasureOf(Angle($point_0:point,$point_1:point,$point_7:point)),MeasureOf(Angle($point_2:point,$point_1:point,$point_8:point)),MeasureOf(Angle($point_6:point,$point_2:point,$point_3:point)),MeasureOf(Angle($point_3:point,$point_1:point,$point_4:point)),MeasureOf(Angle($point_7:point,$point_1:point,$point_4:point)),MeasureOf(Angle($point_6:point,$point_2:point,$point_1:point)),MeasureOf(Angle($point_1:point,$point_8:point,$point_2:point)),MeasureOf(Angle($point_4:point,$point_1:point,$point_7:point)),MeasureOf(Angle($point_2:point,$point_1:point,$point_4:point)),MeasureOf(Angle($point_3:point,$point_1:point,$point_0:point)),MeasureOf(Angle($point_3:point,$point_2:point,$point_6:point)),MeasureOf(Angle($point_8:point,$point_1:point,$point_3:point)),MeasureOf(Angle($point_3:point,$point_2:point,$point_8:point)),MeasureOf(Angle($point_6:point,$point_8:point,$point_1:point)),MeasureOf(Angle($point_4:point,$point_1:point,$point_3:point)),MeasureOf(Angle($point_2:point,$point_1:point,$point_0:point)),MeasureOf(Angle($point_4:point,$point_1:point,$point_2:point)),MeasureOf(Angle($point_1:point,$point_2:point,$point_5:point)),MeasureOf(Angle($point_1:point,$point_8:point,$point_6:point)),MeasureOf(Angle($point_8:point,$point_1:point,$point_2:point)),MeasureOf(Angle($point_3:point,$point_2:point,$point_5:point)),MeasureOf(Angle($point_1:point,$point_2:point,$point_6:point)),MeasureOf(Angle($point_4:point,ERROR:root:failed to ground variable: $secant:secant
ERROR:root:failed to ground variable: $secant:secant
ERROR:root:failed to ground variable: $secant:secant
ERROR:root:failed to ground variable: $secant:secant
ERROR:root:failed to ground variable: $secant:secant
ERROR:root:failed to ground variable: $secant:secant
ERROR:root:failed to ground variable: $tangent:tangent
ERROR:root:failed to ground variable: $tangent:tangent
ERROR:root:failed to ground variable: $secant:secant
ERROR:root:failed to ground variable: $secant:secant
ERROR:root:failed to ground variable: $tangent:tangent
ERROR:root:failed to ground variable: $tangent:tangent
ERROR:root:failed to ground variable: $tangent:tangent
ERROR:root:failed to ground variable: $tangent:tangent
ERROR:root:failed to ground variable: $tangent:tangent
ERROR:root:failed to ground variable: $tangent:tangent
ERROR:root:failed to ground variable: $tangent:tangent
ERROR:root:failed to ground variable: $tangent:tangent
ERROR:root:failed to ground variable: $secant:secant
ERROR:root:failed to ground variable: $secant:secant
ERROR:root:failed to ground variable: $secant:secant
ERROR:root:failed to ground variable: $secant:secant
ERROR:root:1121
ERROR:root:list index out of range
Traceback (most recent call last):
  File "/home/alvaroh/geosolver/geosolver/run.py", line 164, in full_unit_test
    result = _full_unit_test(combined_model, question, label_data)
  File "/home/alvaroh/geosolver/geosolver/run.py", line 325, in _full_unit_test
    local_entities = semantic_tree_to_serialized_entities(match_parse, t, number, value_expr_formulas)
  File "/home/alvaroh/geosolver/geosolver/run.py", line 181, in semantic_tree_to_serialized_entities
    grounded_formula = ground_formulas(match_parse, [formula], value_expr_formulas)[0]
IndexError: list index out of range
ERROR:root:failed to ground variable: $entity:entity
ERROR:root:failed to ground variable: $entity:entity
ERROR:root:failed to ground variable: $entity:entity
ERROR:root:failed to ground variable: $entity:entity
ERROR:root:failed to ground variable: $entity:entity
ERROR:root:failed to ground variable: $entity:entity
ERROR:root:failed to ground variable: $entity:entity
ERROR:root:failed to ground variable: $entity:entity
ERROR:root:failed to ground variable: $entity:entity
ERROR:root:failed to ground variable: $entity:entity
ERROR:root:failed to ground variable: $entity:entity
ERROR:root:failed to ground variable: $entity:entity
ERROR:root:failed to ground variable: $entity:entity
ERROR:root:failed to ground variable: $entity:entity
ERROR:root:failed to ground variable: $entity:entity
ERROR:root:failed to ground variable: $entity:entity
ERROR:root:failed to ground variable: $entity:entity
ERROR:root:failed to ground variable: $entity:entity
ERROR:root:failed to ground variable: $entity:entity
ERROR:root:failed to ground variable: $entity:entity
ERROR:root:failed to ground variable: $entity:entity
ERROR:root:1122
ERROR:root:list index out of range
Traceback (most recent call last):
  File "/home/alvaroh/geosolver/geosolver/run.py", line 164, in full_unit_test
    result = _full_unit_test(combined_model, question, label_data)
  File "/home/alvaroh/geosolver/geosolver/run.py", line 325, in _full_unit_test
    local_entities = semantic_tree_to_serialized_entities(match_parse, t, number, value_expr_formulas)
  File "/home/alvaroh/geosolver/geosolver/run.py", line 181, in semantic_tree_to_serialized_entities
    grounded_formula = ground_formulas(match_parse, [formula], value_expr_formulas)[0]
IndexError: list index out of range
ERROR:root:failed to ground variable: $entity:entity
ERROR:root:failed to ground variable: $entity:entity
ERROR:root:failed to ground variable: $entity:entity
ERROR:root:failed to ground variable: $entity:entity
ERROR:root:failed to ground variable: $entity:entity
ERROR:root:failed to ground variable: $entity:entity
ERROR:root:failed to ground variable: $entity:entity
ERROR:root:failed to ground variable: $entity:entity
ERROR:root:failed to ground variable: $entity:entity
ERROR:root:failed to ground variable: $entity:entity
ERROR:root:failed to ground variable: $entity:entity
ERROR:root:failed to ground variable: $entity:entity
ERROR:root:failed to ground variable: $entity:entity
ERROR:root:failed to ground variable: $entity:entity
ERROR:root:failed to ground variable: $entity:entity
ERROR:root:failed to ground variable: $entity:entity
ERROR:root:failed to ground variable: $entity:entity
ERROR:root:failed to ground variable: $entity:entity
ERROR:root:failed to ground variable: $entity:entity
ERROR:root:failed to ground variable: $entity:entity
ERROR:root:failed to ground variable: $entity:entity
ERROR:root:failed to ground variable: $entity:entity
ERROR:root:failed to ground variable: $entity:entity
ERROR:root:failed to ground variable: $entity:entity
ERROR:root:failed to ground variable: $entity:entity
ERROR:root:failed to ground variable: $entity:entity
ERROR:root:failed to ground variable: $entity:entity
ERROR:root:failed to ground variable: $entity:entity
ERROR:root:failed to ground variable: $entity:entity
ERROR:root:failed to ground variable: $entity:entity
ERROR:root:failed to ground variable: $entity:entity
ERROR:root:failed to ground variable: $entity:entity
ERROR:root:failed to ground variable: $entity:entity
ERROR:root:1123
ERROR:root:list index out of range
Traceback (most recent call last):
  File "/home/alvaroh/geosolver/geosolver/run.py", line 164, in full_unit_test
    result = _full_unit_test(combined_model, question, label_data)
  File "/home/alvaroh/geosolver/geosolver/run.py", line 325, in _full_unit_test
    local_entities = semantic_tree_to_serialized_entities(match_parse, t, number, value_expr_formulas)
  File "/home/alvaroh/geosolver/geosolver/run.py", line 181, in semantic_tree_to_serialized_entities
    grounded_formula = ground_formulas(match_parse, [formula], value_expr_formulas)[0]
IndexError: list index out of range
$point_8:point,$point_2:point)),MeasureOf(Angle($point_2:point,$point_8:point,$point_4:point)),MeasureOf(Angle($point_7:point,$point_2:point,$point_6:point)),MeasureOf(Angle($point_7:point,$point_1:point,$point_8:point)),MeasureOf(Angle($point_4:point,$point_8:point,$point_6:point)),MeasureOf(Angle($point_0:point,$point_8:point,$point_6:point)),MeasureOf(Angle($point_8:point,$point_2:point,$point_1:point)),MeasureOf(Angle($point_1:point,$point_8:point,$point_5:point)),MeasureOf(Angle($point_4:point,$point_8:point,$point_5:point)),MeasureOf(Angle($point_6:point,$point_8:point,$point_4:point)),MeasureOf(Angle($point_0:point,$point_8:point,$point_5:point)),MeasureOf(Angle($point_2:point,$point_8:point,$point_1:point)),MeasureOf(Angle($point_7:point,$point_2:point,$point_5:point))}),$What:number), PointLiesOnLine($point_1:point,Line($point_0:point,$point_4:point)), Ge(Pi(),MeasureOf(Angle($point_1:point,$point_2:point,$point_5:point))), PointLiesOnLine($point_2:point,Line($point_3:point,$point_7:point)), PointLiesOnLine($point_8:point,Line($point_5:point,$point_6:point)), PointLiesOnLine($point_1:point,Line($point_4:point,$point_8:point)), PointLiesOnLine($point_2:point,Line($point_5:point,$point_6:point)), Ge(Pi(),MeasureOf(Angle($point_2:point,$point_8:point,$point_0:point))), PointLiesOnLine($point_8:point,Line($point_2:point,$point_6:point)), Ge(Pi(),MeasureOf(Angle($point_0:point,$point_1:point,$point_3:point))), PointLiesOnLine($point_2:point,Line($point_5:point,$point_8:point))])
iteration 1:
    nfev: 73872
     fun: 1.3937501259775331e-06
       x: array([ -39.76457629,  -14.49516295,   28.60242356,   22.04142939,
         -1.50806683,   -1.31522197,   75.95742489,   24.59242897,
        169.64600326, -123.06414518,  -42.63140152,  -30.37311169,
        -81.49513332,   20.23085015,   51.50264989,  -42.75570299,
        -54.93153834])
 message: ['requested number of basinhopping iterations completed successfully']
    njev: 3607
     nit: 100
Equals(169.64600325970622,Mul(180(),Degree()))
169.64600326
Equals(169.64600325970622,Mul(360(),Degree()))
169.64600326
Equals(169.64600325970622,Mul(540(),Degree()))
169.64600326
Equals(169.64600325970622,Mul(720(),Degree()))
169.64600326
606.82 seconds
ans: {1: TV(norm=166.504, conf=0.00), 2: TV(norm=163.363, conf=0.00), 3: TV(norm=160.221, conf=0.00), 4: TV(norm=157.080, conf=0.00)}
RESULT: (e,p,c) = False, False, False 

(e,p,c) = False, False, False
--------------------------------------------------------------------------------
47/64 complete, 14 correct, 0 penalized, 28 error
--------------------------------------------------------------------------------
id: 1121
full unit_test entry
WWWWWWW opt_model
3.91, Is@16[is](MeasureOf@18[measure]($ABD:angle@21[ABD]), $What:number@15[what])
6.36, Secant@9[secant]($tangent:tangent@6[tangent], $circle:circle@13[circle])
7.32, IsAngle@20[angle]($ABD:angle@21[ABD])

Exceptiont in full_unit_test
RESULT: (e,p,c) = True, False, False 

(e,p,c) = True, False, False
--------------------------------------------------------------------------------
48/64 complete, 14 correct, 0 penalized, 29 error
--------------------------------------------------------------------------------
id: 1122
full unit_test entry
WWWWWWW opt_model
2.92, Congruent@8[congruent]($OA:line@6[OA], $OB:line@11[OB])
5.25, Is@7[is]($line:line@5[line], $line:line@10[line])

Exceptiont in full_unit_test
RESULT: (e,p,c) = True, False, False 

(e,p,c) = True, False, False
--------------------------------------------------------------------------------
49/64 complete, 14 correct, 0 penalized, 30 error
--------------------------------------------------------------------------------
id: 1123
full unit_test entry
WWWWWWW opt_model
2.72, Congruent@8[congruent]($is:quad@7[is], $BED:angle@11[BED])
5.45, Congruent@17[congruent]($is:quad@16[is], $D:angle@20[D])
7.41, IsAngle@5[angle]($A:angle@6[A])
8.85, IsAngle@14[angle]($C:angle@15[C])
9.81, IsAngle@19[angle]($D:angle@20[D])
10.77, IsAngle@10[angle]($BED:angle@11[BED])

Exceptiont in full_unit_test
RESULT: (e,p,c) = True, False, FalseERROR:root:1124
ERROR:root:can only concatenate tuple (not "long") to tuple
Traceback (most recent call last):
  File "/home/alvaroh/geosolver/geosolver/run.py", line 164, in full_unit_test
    result = _full_unit_test(combined_model, question, label_data)
  File "/home/alvaroh/geosolver/geosolver/run.py", line 325, in _full_unit_test
    local_entities = semantic_tree_to_serialized_entities(match_parse, t, number, value_expr_formulas)
  File "/home/alvaroh/geosolver/geosolver/run.py", line 188, in semantic_tree_to_serialized_entities
    coords = offset_coords(coords, tree_node.content.signature.return_type, offset)
  File "/home/alvaroh/geosolver/geosolver/run.py", line 222, in offset_coords
    coords = offset_point(coords, offset)
  File "/home/alvaroh/geosolver/geosolver/run.py", line 217, in offset_point
    return point[0]+offset[0], point[1]+offset[1]
TypeError: can only concatenate tuple (not "long") to tuple
 

(e,p,c) = True, False, False
--------------------------------------------------------------------------------
50/64 complete, 14 correct, 0 penalized, 31 error
--------------------------------------------------------------------------------
id: 1124
full unit_test entry
WWWWWWW opt_model
2.44, Parallel@10[parallel]($lines:line@5[lines], $lines:line@13[lines])
3.93, Parallel@18[parallel]($M:line@14[M])
4.41, Parallel@10[parallel]($K:line@6[K])
4.75, Is@9[are]($lines:line@5[lines], $lines:line@13[lines])
5.09, Is@17[are]($lines:line@13[lines], $lines:line@5[lines])

Exceptiont in full_unit_test
RESULT: (e,p,c) = True, False, False 

(e,p,c) = True, False, False
--------------------------------------------------------------------------------
51/64 complete, 14 correct, 0 penalized, 32 error
--------------------------------------------------------------------------------
id: 1127
full unit_test entry
WWWWWWW opt_model
1.94, IsLine@5[lines]($M:line@6[M])
2.42, Parallel@10[parallel]($M:line@6[M])
No legal next available.

completed formulas:
Parallel($M:line,$line:line)
IsLine($M:line)

1.67, True@5[true]($Except:ground@6[except])
No legal next available.

completed formulas:
True($Except:ground)

Equals($l:number,Div(MeasureOf(Angle($point_7:point,$point_5:point,$point_8:point)),Degree())) None None
Ge(180,$i:number) None None
Ge(180,$g:number) None None
PointLiesOnLine($point_10:point,Line($point_0:point,$point_1:point)) TV(norm=0.000, conf=1.00) [point(x=188.97197654774919, y=186.91851336579549), line(a=point(x=0.0, y=69.0), b=point(x=273.0, y=239.352))]
PointLiesOnLine($point_4:point,Line($point_0:point,$point_1:point)) TV(norm=0.000, conf=1.00) [point(x=97.0, y=129.52800000000002), line(a=point(x=0.0, y=69.0), b=point(x=273.0, y=239.352))]
PointLiesOnLine($point_10:point,Line($point_4:point,$point_6:point)) TV(norm=0.000, conf=1.00) [point(x=188.97197654774919, y=186.91851336579549), line(a=point(x=97.0, y=129.52800000000002), b=point(x=375.0, y=303.0))]
PointLiesOnLine($point_12:point,Line($point_2:point,$point_5:point)) TV(norm=0.000, conf=1.00) [point(x=97.0, y=256.09401709401709), line(a=point(x=24.0, y=311.0), b=point(x=273.0, y=123.71794871794873))]
Equals($g:number,Div(MeasureOf(Angle($point_0:point,$point_10:point,$point_5:point)),Degree())) None None
Equals($j:number,Div(MeasureOf(Angle($point_1:point,$point_5:point,$point_12:point)),Degree())) None None
Equals($k:number,Div(MeasureOf(Angle($point_3:point,$point_5:point,$point_7:point)),Degree())) None None
Parallel(Line($point_9:point,$point_11:point),Line($point_1:point,$point_3:point)) TV(norm=0.000, conf=1.00) [line(a=point(x=97.0, y=32.0), b=point(x=97.0, y=365.0)), line(a=point(x=273.0, y=239.352), b=point(x=273.0, y=0.0))]
PointLiesOnLine($point_1:point,Line($point_5:point,$point_8:point)) TV(norm=0.000, conf=1.00) [point(x=273.0, y=239.352), line(a=point(x=273.0, y=123.71794871794873), b=point(x=273.0, y=347.0))]
PointLiesOnLine($point_12:point,Line($point_4:point,$point_11:point)) TV(norm=0.000, conf=1.00) [point(x=97.0, y=256.09401709401709), line(a=point(x=97.0, y=129.52800000000002), b=point(x=97.0, y=365.0))]
True($Except:ground) None None
Equals($b:number,Div(MeasureOf(Angle($point_9:point,$point_4:point,$point_6:point)),Degree())) None None
PointLiesOnLine($point_5:point,Line($point_2:point,$point_7:point)) TV(norm=0.000, conf=1.00) [point(x=273.0, y=123.71794871794873), line(a=point(x=24.0, y=311.0), b=point(x=375.0, y=47.0))]
Ge(180,$d:number) None None
PointLiesOnLine($point_12:point,Line($point_9:point,$point_11:point)) TV(norm=0.000, conf=1.00) [point(x=97.0, y=256.09401709401709), line(a=point(x=97.0, y=32.0), b=point(x=97.0, y=365.0))]
Ge(180,$j:number) None None
PointLiesOnLine($point_1:point,Line($point_4:point,$point_6:point)) TV(norm=0.000, conf=1.00) [point(x=273.0, y=239.352), line(a=point(x=97.0, y=129.52800000000002), b=point(x=375.0, y=303.0))]
PointLiesOnLine($point_4:point,Line($point_9:point,$point_11:point)) TV(norm=0.000, conf=1.00) [point(x=97.0, y=129.52800000000002), line(a=point(x=97.0, y=32.0), b=point(x=97.0, y=365.0))]
Equals($e:number,Div(MeasureOf(Angle($point_2:point,$point_10:point,$point_4:point)),Degree())) None None
Equals($c:number,Div(MeasureOf(Angle($point_12:point,$point_4:point,$point_0:point)),Degree())) None None
Ge(180,$b:number) None None
PointLiesOnLine($point_10:point,Line($point_0:point,$point_6:point)) TV(norm=0.000, conf=1.00) [point(x=188.97197654774919, y=186.91851336579549), line(a=point(x=0.0, y=69.0), b=point(x=375.0, y=303.0))]
Equals($h:number,Div(MeasureOf(Angle($point_1:point,$point_10:point,$point_2:point)),Degree())) None None
PointLiesOnLine($point_1:point,Line($point_6:point,$point_10:point)) TV(norm=0.000, conf=1.00) [point(x=273.0, y=239.352), line(a=point(x=375.0, y=303.0), b=point(x=188.97197654774919, y=186.91851336579549))]
PointLiesOnLine($point_10:point,Line($point_7:point,$point_12:point)) TV(norm=0.000, conf=1.00) [point(x=188.97197654774919, y=186.91851336579549), line(a=point(x=375.0, y=47.0), b=point(x=97.0, y=256.09401709401709))]
PointLiesOnLine($point_5:point,Line($point_1:point,$point_3:point)) TV(norm=0.000, conf=1.00) [point(x=273.0, y=123.71794871794873), line(a=point(x=273.0, y=239.352), b=point(x=273.0, y=0.0))]
Ge(180,$k:number) None None
Equals($a:number,Div(MeasureOf(Angle($point_0:point,$point_4:point,$point_9:point)),Degree())) None None
PointLiesOnLine($point_10:point,Line($point_1:point,$point_4:point)) TV(norm=0.000, conf=1.00) [point(x=188.97197654774919, y=186.91851336579549), line(a=point(x=273.0, y=239.352), b=point(x=97.0, y=129.52800000000002))]
PointLiesOnLine($point_10:point,Line($point_5:point,$point_12:point)) TV(norm=0.000, conf=1.00) [point(x=188.97197654774919, y=186.91851336579549), line(a=point(x=273.0, y=123.71794871794873), b=point(x=97.0, y=256.09401709401709))]
PointLiesOnLine($point_4:point,Line($point_9:point,$point_12:point)) TV(norm=0.000, conf=1.00) [point(x=97.0, y=129.52800000000002), line(a=point(x=97.0, y=32.0), b=point(x=97.0, y=256.09401709401709))]
PointLiesOnLine($point_10:point,Line($point_2:point,$point_7:point)) TV(norm=0.000, conf=1.00) [point(x=188.97197654774919, y=186.91851336579549), line(a=point(x=24.0, y=311.0), b=point(x=375.0, y=47.0))]
PointLiesOnLine($point_5:point,Line($point_3:point,$point_8:point)) TV(norm=0.000, conf=1.00) [point(x=273.0, y=123.71794871794873), line(a=point(x=273.0, y=0.0), b=point(x=273.0, y=347.0))]
PointLiesOnLine($point_12:point,Line($point_2:point,$point_10:point)) TV(norm=0.000, conf=1.00) [point(x=97.0, y=256.09401709401709), line(a=point(x=24.0, y=311.0), b=point(x=188.97197654774919, y=186.91851336579549))]
PointLiesOnLine($point_4:point,Line($point_0:point,$point_10:point)) TV(norm=0.000, conf=1.00) [point(x=97.0, y=129.52800000000002), line(a=point(x=0.0, y=69.0), b=point(x=188.97197654774919, y=186.91851336579549))]
Ge(180,$e:number) None None
Ge(180,$h:number) None None
PointLiesOnLine($point_4:point,Line($point_0:point,$point_6:point)) TV(norm=0.000, conf=1.00) [point(x=97.0, y=129.52800000000002), line(a=point(x=0.0, y=69.0), b=point(x=375.0, y=303.0))]
Equals($i:number,Div(MeasureOf(Angle($point_12:point,$point_5:point,$point_3:point)),Degree())) None None
Equals($d:number,Div(MeasureOf(Angle($point_6:point,$point_4:point,$point_12:point)),Degree())) None None
PointLiesOnLine($point_1:point,Line($point_3:point,$point_8:point)) TV(norm=0.000, conf=1.00) [point(x=273.0, y=239.352), line(a=point(x=273.0, y=0.0), b=point(x=273.0, y=347.0))]
Ge(180,$l:number) None None
PointLiesOnLine($point_1:point,Line($point_0:point,$point_6:point)) TV(norm=0.000, conf=1.00) [point(x=273.0, y=239.352), line(a=point(x=0.0, y=69.0), b=point(x=375.0, y=303.0))]
Ge(180,$c:number) None None
Ge(180,$a:number) None None
PointLiesOnLine($point_10:point,Line($point_2:point,$point_5:point)) TV(norm=0.000, conf=1.00) [point(x=188.97197654774919, y=186.91851336579549), line(a=point(x=24.0, y=311.0), b=point(x=273.0, y=123.71794871794873))]
PointLiesOnLine($point_12:point,Line($point_2:point,$point_7:point)) TV(norm=0.000, conf=1.00) [point(x=97.0, y=256.09401709401709), line(a=point(x=24.0, y=311.0), b=point(x=375.0, y=ERROR:root:1127
ERROR:root:No query formula.
Traceback (most recent call last):
  File "/home/alvaroh/geosolver/geosolver/run.py", line 164, in full_unit_test
    result = _full_unit_test(combined_model, question, label_data)
  File "/home/alvaroh/geosolver/geosolver/run.py", line 382, in _full_unit_test
    ans = solve(reduced_formulas, choice_formulas, assignment=None)#core_parse.variable_assignment)
  File "geosolver/solver/solve.py", line 32, in solve
    raise Exception("No query formula.")
Exception: No query formula.
47.0))]
PointLiesOnLine($point_5:point,Line($point_7:point,$point_10:point)) TV(norm=0.000, conf=1.00) [point(x=273.0, y=123.71794871794873), line(a=point(x=375.0, y=47.0), b=point(x=188.97197654774919, y=186.91851336579549))]
Ge(180,$f:number) None None
PointLiesOnLine($point_5:point,Line($point_7:point,$point_12:point)) TV(norm=0.000, conf=1.00) [point(x=273.0, y=123.71794871794873), line(a=point(x=375.0, y=47.0), b=point(x=97.0, y=256.09401709401709))]
Equals($f:number,Div(MeasureOf(Angle($point_5:point,$point_10:point,$point_6:point)),Degree())) None None
Solving...
Given formulas: set([Equals($l:number,Div(MeasureOf(Angle($point_7:point,$point_5:point,$point_8:point)),Degree())), Ge(180,$i:number), Ge(180,$g:number), PointLiesOnLine($point_10:point,Line($point_0:point,$point_1:point)), PointLiesOnLine($point_4:point,Line($point_0:point,$point_1:point)), PointLiesOnLine($point_10:point,Line($point_4:point,$point_6:point)), PointLiesOnLine($point_12:point,Line($point_2:point,$point_5:point)), Equals($g:number,Div(MeasureOf(Angle($point_0:point,$point_10:point,$point_5:point)),Degree())), Equals($j:number,Div(MeasureOf(Angle($point_1:point,$point_5:point,$point_12:point)),Degree())), Equals($k:number,Div(MeasureOf(Angle($point_3:point,$point_5:point,$point_7:point)),Degree())), Parallel(Line($point_9:point,$point_11:point),Line($point_1:point,$point_3:point)), PointLiesOnLine($point_1:point,Line($point_5:point,$point_8:point)), PointLiesOnLine($point_12:point,Line($point_4:point,$point_11:point)), True($Except:ground), Equals($b:number,Div(MeasureOf(Angle($point_9:point,$point_4:point,$point_6:point)),Degree())), PointLiesOnLine($point_5:point,Line($point_2:point,$point_7:point)), Ge(180,$d:number), PointLiesOnLine($point_12:point,Line($point_9:point,$point_11:point)), Ge(180,$j:number), PointLiesOnLine($point_1:point,Line($point_4:point,$point_6:point)), PointLiesOnLine($point_4:point,Line($point_9:point,$point_11:point)), Equals($e:number,Div(MeasureOf(Angle($point_2:point,$point_10:point,$point_4:point)),Degree())), Equals($c:number,Div(MeasureOf(Angle($point_12:point,$point_4:point,$point_0:point)),Degree())), Ge(180,$b:number), PointLiesOnLine($point_10:point,Line($point_0:point,$point_6:point)), Equals($h:number,Div(MeasureOf(Angle($point_1:point,$point_10:point,$point_2:point)),Degree())), PointLiesOnLine($point_1:point,Line($point_6:point,$point_10:point)), PointLiesOnLine($point_10:point,Line($point_7:point,$point_12:point)), PointLiesOnLine($point_5:point,Line($point_1:point,$point_3:point)), Ge(180,$k:number), Equals($a:number,Div(MeasureOf(Angle($point_0:point,$point_4:point,$point_9:point)),Degree())), PointLiesOnLine($point_10:point,Line($point_1:point,$point_4:point)), PointLiesOnLine($point_10:point,Line($point_5:point,$point_12:point)), PointLiesOnLine($point_4:point,Line($point_9:point,$point_12:point)), PointLiesOnLine($point_10:point,Line($point_2:point,$point_7:point)), PointLiesOnLine($point_5:point,Line($point_3:point,$point_8:point)), PointLiesOnLine($point_12:point,Line($point_2:point,$point_10:point)), PointLiesOnLine($point_4:point,Line($point_0:point,$point_10:point)), Ge(180,$e:number), Ge(180,$h:number), PointLiesOnLine($point_4:point,Line($point_0:point,$point_6:point)), Equals($i:number,Div(MeasureOf(Angle($point_12:point,$point_5:point,$point_3:point)),Degree())), Equals($d:number,Div(MeasureOf(Angle($point_6:point,$point_4:point,$point_12:point)),Degree())), PointLiesOnLine($point_1:point,Line($point_3:point,$point_8:point)), Ge(180,$l:number), PointLiesOnLine($point_1:point,Line($point_0:point,$point_6:point)), Ge(180,$c:number), Ge(180,$a:number), PointLiesOnLine($point_10:point,Line($point_2:point,$point_5:point)), PointLiesOnLine($point_12:point,Line($point_2:point,$point_7:point)), PointLiesOnLine($point_5:point,Line($point_7:point,$point_10:point)), Ge(180,$f:number), PointLiesOnLine($point_5:point,Line($point_7:point,$point_12:point)), Equals($f:number,Div(MeasureOf(Angle($point_5:point,$point_10:point,$point_6:point)),Degree()))])
Exceptiont in full_unit_test
RESULT: (e,p,c) = ERROR:root:1140
ERROR:root:list index out of range
Traceback (most recent call last):
  File "/home/alvaroh/geosolver/geosolver/run.py", line 164, in full_unit_test
    result = _full_unit_test(combined_model, question, label_data)
  File "/home/alvaroh/geosolver/geosolver/run.py", line 325, in _full_unit_test
    local_entities = semantic_tree_to_serialized_entities(match_parse, t, number, value_expr_formulas)
  File "/home/alvaroh/geosolver/geosolver/run.py", line 181, in semantic_tree_to_serialized_entities
    grounded_formula = ground_formulas(match_parse, [formula], value_expr_formulas)[0]
IndexError: list index out of range
ERROR:root:1141
ERROR:root:global name 'quetion' is not defined
Traceback (most recent call last):
  File "/home/alvaroh/geosolver/geosolver/run.py", line 164, in full_unit_test
    result = _full_unit_test(combined_model, question, label_data)
  File "/home/alvaroh/geosolver/geosolver/run.py", line 388, in _full_unit_test
    print("Correct for non-multiple choice: {0}, golden: {1}".format(ans, quetion.answer))
NameError: global name 'quetion' is not defined
ERROR:root:1142
ERROR:root:global name 'quetion' is not defined
Traceback (most recent call last):
  File "/home/alvaroh/geosolver/geosolver/run.py", line 164, in full_unit_test
    result = _full_unit_test(combined_model, question, label_data)
  File "/home/alvaroh/geosolver/geosolver/run.py", line 388, in _full_unit_test
    print("Correct for non-multiple choice: {0}, golden: {1}".format(ans, quetion.answer))
NameError: global name 'quetion' is not defined
True, False, False 

(e,p,c) = True, False, False
--------------------------------------------------------------------------------
52/64 complete, 14 correct, 0 penalized, 33 error
--------------------------------------------------------------------------------
id: 1140
full unit_test entry
WWWWWWW opt_model
1.08, Is@1[is](AreaOf@3[area]($is:quad@1[is]), $What:number@0[What])

Exceptiont in full_unit_test
RESULT: (e,p,c) = True, False, False 

(e,p,c) = True, False, False
--------------------------------------------------------------------------------
53/64 complete, 14 correct, 0 penalized, 34 error
--------------------------------------------------------------------------------
id: 1141
full unit_test entry
WWWWWWW opt_model
3.85, Is@1[is](ValueOf@3[value]($x:number@5[x]), $What:number@0[What])

completed formulas:
Is(ValueOf($x:number),$What:number)

Ge(180,Mul(4(),$x:number)) None None
Is(ValueOf($x:number),$What:number) None None
Ge(180,Mul(6(),$x:number)) None None
Equals(Mul(4(),$x:number),Div(MeasureOf(Angle($point_1:point,$point_2:point,$point_0:point)),Degree())) None None
Ge(180,Mul(8(),$x:number)) None None
Equals(Mul(6(),$x:number),Div(MeasureOf(Angle($point_0:point,$point_1:point,$point_2:point)),Degree())) None None
Equals(Mul(8(),$x:number),Div(MeasureOf(Angle($point_2:point,$point_0:point,$point_1:point)),Degree())) None None
Solving...
Given formulas: set([Ge(180,Mul(4(),$x:number)), Is(ValueOf($x:number),$What:number), Ge(180,Mul(6(),$x:number)), Equals(Mul(4(),$x:number),Div(MeasureOf(Angle($point_1:point,$point_2:point,$point_0:point)),Degree())), Ge(180,Mul(8(),$x:number)), Equals(Mul(6(),$x:number),Div(MeasureOf(Angle($point_0:point,$point_1:point,$point_2:point)),Degree())), Equals(Mul(8(),$x:number),Div(MeasureOf(Angle($point_2:point,$point_0:point,$point_1:point)),Degree()))])
iteration 1:
    nfev: 30784
     fun: 7.2790567529068539e-07
       x: array([ 10.        ,  16.53621682,   4.92865413,   9.99999999,
         3.13334504,  11.11227413])
 message: ['requested number of basinhopping iterations completed successfully']
    njev: 3083
     nit: 100
21.24 seconds
ans: 10.0000000032
Exceptiont in full_unit_test
RESULT: (e,p,c) = True, False, False 

(e,p,c) = True, False, False
--------------------------------------------------------------------------------
54/64 complete, 14 correct, 0 penalized, 35 error
--------------------------------------------------------------------------------
id: 1142
full unit_test entry
WWWWWWW opt_model
3.85, Is@1[is](ValueOf@3[value]($x:number@5[x]), $What:number@0[What])

completed formulas:
Is(ValueOf($x:number),$What:number)

Equals($x:number,LengthOf(Line($point_0:point,$point_2:point))) None None
Ge(180,90()) TV(norm=0.000, conf=1.00) [180, 90.0]
Equals(60(),LengthOf(Line($point_0:point,$point_1:point))) TV(norm=62.681, conf=0.31) [60.0, 122.68056033783641]
Equals(25(),LengthOf(Line($point_1:point,$point_2:point))) TV(norm=71.083, conf=0.00) [25.0, 96.08338135389431]
Is(ValueOf($x:number),$What:number) None None
Equals(90(),Div(MeasureOf(Angle($point_2:point,$point_1:point,$point_0:point)),Degree())) TV(norm=1.012, conf=0.99) [90.0, 91.01169617519332]
Solving...
Given formulas: set([Equals($x:number,LengthOf(Line($point_0:point,$point_2:point))), Ge(180,90()), Equals(60(),LengthOf(Line($point_0:point,$point_1:point))), Equals(25(),LengthOf(Line($point_1:point,$point_2:point))), Is(ValueOf($x:number),$What:number), Equals(90(),Div(MeasureOf(Angle($point_2:point,$point_1:point,$point_0:point)),Degree()))])
iteration 1:
    nfev: 30298
     fun: 1.2666258122351337e-06
       x: array([ -0.55727908,  60.35784832,  59.95180514, -25.55398124,
        64.99999892,  64.99999911])
 message: ['requested number of basinhopping iterations completed successfully']
    njev: 3070
     nit: 100
17.93 seconds
ans: 64.9999989182
Exceptiont in full_unit_test
RESULT: (e,p,c) = True, False, False 

(e,p,c) = True, False, False
--------------------------------------------------------------------------------
55/64 complete, 14 correct, 0 penalized, 36 error
--------------------------------------------------------------------------------
id: 1143
full unit_test entry
WWWWWWW opt_model
3.85, Is@1[is](ValueOf@3[value]($x:number@5[x]), $What:number@0[What])

completed formulas:
Is(ValueOf($x:number),$What:number)

Equals(130(),Div(MeasureOf(Angle($point_3:point,$point_1:point,$point_0:point)),Degree())) TV(norm=1.785, conf=0.99) [130.0, 128.21484325680788]
Equals($x:number,Div(MeasureOf(Angle($point_2:point,$point_0:point,$point_1:point)),Degree())) None None
Is(ValueOf($x:number),$What:number) None None
Ge(180,70()) TV(norm=0.000, conf=1.00) [180, 70.0]
Ge(180,130()) TV(norm=0.000, conf=1.00) [180, 130.0]
Equals(70(),Div(MeasureOf(Angle($point_3:point,$point_2:point,$point_0:point)),Degree())) TV(norm=6.106, conf=0.91) [70.0, 63.89435693952511]
PointLiesOnLine($point_1:point,Line($point_2:point,$point_3:point)) TV(norm=0.001, conf=1.00) [point(x=72.134480062548874, y=109.8295543393276), line(a=point(x=211.17084509854254, y=109.33567211431506), b=point(x=0.0, y=110.0))]
Ge(180,$x:number) None None
Solving...
Given formulas: set([Equals(130(),Div(MeasureOf(Angle($point_3:point,$point_1:point,$point_0:point)),Degree())), Equals($x:number,Div(MeasureOf(Angle($point_2:point,$point_0:point,$point_1:point)),Degree())), Is(ValueOf($x:number),$What:number), Ge(180,70()), Ge(180,130()), Equals(70(),Div(MeasureOf(Angle($point_3:point,$point_2:point,$point_0:point)),Degree())), PointLiesOnLine($point_1:point,Line($point_2:point,$point_3:point)), Ge(180,$x:number)])
iteration 1:
    nfev: 41569
     fun: 6.4514833653106507e-07
       x: array([  4.01880638,  -6.09257756, -36.89442211,  18.26645951,
        59.99998439,  59.99998427, -39.41854616, -11.64666805])
 message: ['requested number of basinhopping iterations completed successfully']
    njev: 3567
     nit: 100
Equals(59.999984385226391,60())
59.9999843852
Equals(59.999984385226391,70())
59.9999843852
Equals(59.999984385226391,80())
59.9999843852
Equals(59.999984385226391,90())
59.9999843852
Equals(59.999984385226391,100())
59.9999843852
29.38 seconds
ans: {1: TV(norm=0.000, conf=1.00), 2: TV(norm=10.000, conf=0.85), 3: TV(norm=20.000, conf=0.71), 4: TV(norm=30.000, conf=0.60), 5: TV(norm=40.000, conf=0.50)}
idx 1, answeri: 1.0
Correct for multiple choice: index: 1 value: TV(norm=0.000, conf=1.00), golden: 1.0
RESULT: (e,p,c) = False, False, True 

(e,p,c) = False, False, True
--------------------------------------------------------------------------------
56/64 complete, 15 correct, 0 penalized, 36 error
--------------------------------------------------------------------------------
id: 1144
full unit_test entry
WWWWWWW opt_model
3.92, Is@1[is](MeasureOf@3[measure]($ABC:angle@6[ABC]), $What:number@0[What])
4.88, IsAngle@5[angle]($ABC:angle@6[ABC])

completed formulas:
Is(MeasureOf($ABC:angle),$What:number)
IsAngle($ABC:angle)

Ge(180,Mul(4(),$x:number)) None None
Equals(Mul(3(),$x:number),Div(MeasureOf(Angle($point_2:point,$point_1:point,$point_0:point)),Degree())) None None
Equals(Mul(4(),$x:number),Div(MeasureOf(Angle($point_0:point,$point_2:point,$point_1:point)),Degree())) None None
Ge(180,Mul(3(),$x:number)) None None
Ge(180,Mul(5(),$x:number)) None None
Is(MeasureOf(Angle($point_1:point,$point_0:point,$point_2:point)),$What:number) None None
Equals(Mul(5(),$x:number),Div(MeasureOf(Angle($point_1:point,$point_0:point,$point_2:point)),Degree())) None None
Solving...
Given formulas: set([Ge(180,Mul(4(),$x:number)), Equals(Mul(3(),$x:number),Div(MeasureOf(Angle($point_2:point,$point_1:point,$point_0:point)),Degree())), Equals(Mul(4(),$x:number),Div(MeasureOf(Angle($point_0:point,$point_2:point,$point_1:point)),Degree())), Ge(180,Mul(3(),$x:number)), Ge(180,Mul(5(),$x:number)), Is(MeasureOf(Angle($point_1:point,$point_0:point,$point_2:point)),$What:number), Equals(Mul(5(),$x:number),Div(MeasureOf(Angle($point_1:point,$point_0:point,$point_2:point)),Degree()))])
iteration 1:
    nfev: 28977
     fun: 5.9329141643971184e-07
       x: array([  8.6406128 , -16.47165101,   1.30899679,  15.00000001,
       -10.73417429,  -7.66583558])
 message: ['requestedERROR:root:1146
ERROR:root:list index out of range
Traceback (most recent call last):
  File "/home/alvaroh/geosolver/geosolver/run.py", line 164, in full_unit_test
    result = _full_unit_test(combined_model, question, label_data)
  File "/home/alvaroh/geosolver/geosolver/run.py", line 325, in _full_unit_test
    local_entities = semantic_tree_to_serialized_entities(match_parse, t, number, value_expr_formulas)
  File "/home/alvaroh/geosolver/geosolver/run.py", line 181, in semantic_tree_to_serialized_entities
    grounded_formula = ground_formulas(match_parse, [formula], value_expr_formulas)[0]
IndexError: list index out of range
 number of basinhopping iterations completed successfully']
    njev: 2935
     nit: 100
22.76 seconds
ans: 1.30899679332
RESULT: (e,p,c) = False, False, False 

(e,p,c) = False, False, False
--------------------------------------------------------------------------------
57/64 complete, 15 correct, 0 penalized, 36 error
--------------------------------------------------------------------------------
id: 1145
full unit_test entry
WWWWWWW opt_model
No legal next available.
f and t: Equals(Sub($y:number,$x:number),$What:number) Equals@0[@s_0](Sub@0[@s_0]($y:number@0[@s_0], $x:number@0[@s_0]), $What:number@0[@s_0])
local entities: []
completed formulas:

Ge(180,40()) TV(norm=0.000, conf=1.00) [180, 40.0]
Ge(180,$x:number) None None
Ge(180,$y:number) None None
Equals(40(),Div(MeasureOf(Angle($point_2:point,$point_0:point,$point_1:point)),Degree())) TV(norm=13.421, conf=0.60) [40.0, 26.57888447625556]
Ge(180,90()) TV(norm=0.000, conf=1.00) [180, 90.0]
Equals(Sub($y:number,$x:number),$What:number) None None
Equals($x:number,Div(MeasureOf(Angle($point_0:point,$point_1:point,$point_3:point)),Degree())) None None
Equals(90(),Div(MeasureOf(Angle($point_2:point,$point_3:point,$point_1:point)),Degree())) TV(norm=1.151, conf=0.99) [90.0, 91.15130421984912]
PointLiesOnLine($point_3:point,Line($point_0:point,$point_2:point)) TV(norm=0.004, conf=1.00) [point(x=68.012096774193552, y=123.5), line(a=point(x=317.0, y=123.0), b=point(x=0.19086021505376038, y=123.33333333333334))]
Equals($y:number,Div(MeasureOf(Angle($point_1:point,$point_2:point,$point_0:point)),Degree())) None None
Equals(20(),Div(MeasureOf(Angle($point_3:point,$point_1:point,$point_2:point)),Degree())) TV(norm=8.527, conf=0.65) [20.0, 28.526733470689436]
Ge(180,20()) TV(norm=0.000, conf=1.00) [180, 20.0]
Equals(90(),Div(MeasureOf(Angle($point_1:point,$point_3:point,$point_0:point)),Degree())) TV(norm=1.407, conf=0.98) [90.0, 88.59283788230728]
Solving...
Given formulas: set([Ge(180,40()), Ge(180,$x:number), Ge(180,$y:number), Equals(40(),Div(MeasureOf(Angle($point_2:point,$point_0:point,$point_1:point)),Degree())), Ge(180,90()), Equals(Sub($y:number,$x:number),$What:number), Equals($x:number,Div(MeasureOf(Angle($point_0:point,$point_1:point,$point_3:point)),Degree())), Equals(90(),Div(MeasureOf(Angle($point_2:point,$point_3:point,$point_1:point)),Degree())), PointLiesOnLine($point_3:point,Line($point_0:point,$point_2:point)), Equals($y:number,Div(MeasureOf(Angle($point_1:point,$point_2:point,$point_0:point)),Degree())), Equals(20(),Div(MeasureOf(Angle($point_3:point,$point_1:point,$point_2:point)),Degree())), Ge(180,20()), Equals(90(),Div(MeasureOf(Angle($point_1:point,$point_3:point,$point_0:point)),Degree()))])
iteration 1:
    nfev: 53671
     fun: 1.1073332304434302e-06
       x: array([-31.10235508, -37.13593242,  20.00000036,   9.14704308,
       -14.46786581,  70.0000007 ,  50.00000011, -62.43523079,  36.16179298])
 message: ['requested number of basinhopping iterations completed successfully']
    njev: 4164
     nit: 100
Equals(20.000000359820167,60())
20.0000003598
Equals(20.000000359820167,50())
20.0000003598
Equals(20.000000359820167,40())
20.0000003598
Equals(20.000000359820167,30())
20.0000003598
Equals(20.000000359820167,20())
20.0000003598
65.56 seconds
ans: {1: TV(norm=40.000, conf=0.00), 2: TV(norm=30.000, conf=0.14), 3: TV(norm=20.000, conf=0.33), 4: TV(norm=10.000, conf=0.60), 5: TV(norm=0.000, conf=1.00)}
idx 5, answeri: 5.0
Correct for multiple choice: index: 5 value: TV(norm=0.000, conf=1.00), golden: 5.0
RESULT: (e,p,c) = False, False, True 

(e,p,c) = False, False, True
--------------------------------------------------------------------------------
58/64 complete, 16 correct, 0 penalized, 36 error
--------------------------------------------------------------------------------
id: 1146
full unit_test entry
WWWWWWW opt_model
1.57, True@6[correct]($Which:ground@0[Which])

Exceptiont in full_unit_test
RESULT: (e,p,c) = True, False, False 

(e,p,c) = True, False, False
--------------------------------------------------------------------------------
59ERROR:root:1147
ERROR:root:list index out of range
Traceback (most recent call last):
  File "/home/alvaroh/geosolver/geosolver/run.py", line 164, in full_unit_test
    result = _full_unit_test(combined_model, question, label_data)
  File "/home/alvaroh/geosolver/geosolver/run.py", line 325, in _full_unit_test
    local_entities = semantic_tree_to_serialized_entities(match_parse, t, number, value_expr_formulas)
  File "/home/alvaroh/geosolver/geosolver/run.py", line 181, in semantic_tree_to_serialized_entities
    grounded_formula = ground_formulas(match_parse, [formula], value_expr_formulas)[0]
IndexError: list index out of range
ERROR:root:1148
ERROR:root:global name 'quetion' is not defined
Traceback (most recent call last):
  File "/home/alvaroh/geosolver/geosolver/run.py", line 164, in full_unit_test
    result = _full_unit_test(combined_model, question, label_data)
  File "/home/alvaroh/geosolver/geosolver/run.py", line 388, in _full_unit_test
    print("Correct for non-multiple choice: {0}, golden: {1}".format(ans, quetion.answer))
NameError: global name 'quetion' is not defined
ERROR:root:1149
ERROR:root:list index out of range
Traceback (most recent call last):
  File "/home/alvaroh/geosolver/geosolver/run.py", line 164, in full_unit_test
    result = _full_unit_test(combined_model, question, label_data)
  File "/home/alvaroh/geosolver/geosolver/run.py", line 325, in _full_unit_test
    local_entities = semantic_tree_to_serialized_entities(match_parse, t, number, value_expr_formulas)
  File "/home/alvaroh/geosolver/geosolver/run.py", line 181, in semantic_tree_to_serialized_entities
    grounded_formula = ground_formulas(match_parse, [formula], value_expr_formulas)[0]
IndexError: list index out of range
/64 complete, 16 correct, 0 penalized, 37 error
--------------------------------------------------------------------------------
id: 1147
full unit_test entry
WWWWWWW opt_model
3.90, Is@1[is](AreaOf@3[area]($triangle:triangle@6[triangle]), $What:number@0[What])

Exceptiont in full_unit_test
RESULT: (e,p,c) = True, False, False 

(e,p,c) = True, False, False
--------------------------------------------------------------------------------
60/64 complete, 16 correct, 0 penalized, 38 error
--------------------------------------------------------------------------------
id: 1148
full unit_test entry
WWWWWWW opt_model
3.35, Equals@5[equals](MeasureOf@1[measure]($BAC:angle@4[BAC]), $@v_0:number@6[@v_0])
4.31, IsAngle@3[angle]($BAC:angle@4[BAC])

f and t: Mul($x:number,Degree()) Mul@6[@v_0]($x:number@6[@v_0], Degree@6[@v_0])
local entities: []
completed formulas:
Equals(MeasureOf($BAC:angle),$@v_0:number)
IsAngle($BAC:angle)

3.85, Is@1[is](ValueOf@3[value]($x:number@5[x]), $What:number@0[What])

completed formulas:
Is(ValueOf($x:number),$What:number)

Is(ValueOf($x:number),$What:number) None None
Equals(Mul(4(),Sqrt(3())),LengthOf(Line($point_0:point,$point_2:point))) TV(norm=128.072, conf=0.00) [6.9282032302755088, 135.0]
Equals(MeasureOf(Angle($point_0:point,$point_1:point,$point_2:point)),Mul($x:number,Degree())) None None
Equals(Mul(8(),Sqrt(3())),LengthOf(Line($point_0:point,$point_1:point))) TV(norm=234.557, conf=0.00) [13.856406460551018, 248.41385719086693]
Equals(12(),LengthOf(Line($point_1:point,$point_2:point))) TV(norm=195.013, conf=0.00) [12.0, 207.0131504142779]
Solving...
Given formulas: set([Is(ValueOf($x:number),$What:number), Equals(Mul(4(),Sqrt(3())),LengthOf(Line($point_0:point,$point_2:point))), Equals(MeasureOf(Angle($point_0:point,$point_1:point,$point_2:point)),Mul($x:number,Degree())), Equals(Mul(8(),Sqrt(3())),LengthOf(Line($point_0:point,$point_1:point))), Equals(12(),LengthOf(Line($point_1:point,$point_2:point)))])
iteration 1:
    nfev: 30425
     fun: 6.3507986824973273e-07
       x: array([ 29.99999485, -12.4013047 ,  -0.82055721,  -2.94742882,
        -6.09167625,  29.99999488])
 message: ['requested number of basinhopping iterations completed successfully']
    njev: 3163
     nit: 100
18.72 seconds
ans: 29.9999948483
Exceptiont in full_unit_test
RESULT: (e,p,c) = True, False, False 

(e,p,c) = True, False, False
--------------------------------------------------------------------------------
61/64 complete, 16 correct, 0 penalized, 39 error
--------------------------------------------------------------------------------
id: 1149
full unit_test entry
WWWWWWW opt_model
3.92, Is@6[is](AreaOf@1[area]($triangle:triangle@4[triangle]), 56@7[56])

Exceptiont in full_unit_test
RESULT: (e,p,c) = True, False, False 

(e,p,c) = True, False, False
--------------------------------------------------------------------------------
62/64 complete, 16 correct, 0 penalized, 40 error
--------------------------------------------------------------------------------
id: 1150
full unit_test entry
WWWWWWW opt_model
No legal next available.
f and t: Equals(Sub($y:number,$x:number),$What:number) Equals@0[@s_0](Sub@0[@s_0]($y:number@0[@s_0], $x:number@0[@s_0]), $What:number@0[@s_0])
local entities: []
completed formulas:

Equals(50(),Div(MeasureOf(Angle($point_1:point,$point_4:point,$point_3:point)),Degree())) TV(norm=14.363, conf=0.75) [50.0, 64.36250620173993]
Ge(180,70()) TV(norm=0.000, conf=1.00) [180, 70.0]
Equals(80(),Div(MeasureOf(Angle($point_3:point,$point_1:point,$point_4:point)),Degree())) TV(norm=10.709, conf=0.86) [80.0, 69.29108731320628]
Ge(180,$x:number) None None
Equals(Sub($y:number,$x:number),$What:number) None None
Equals($x:number,Div(MeasureOf(Angle($point_0:point,$point_3:point,$point_1:point)),Degree())) None None
Ge(180,50()) TV(norm=0.000, conf=1.00) [180, 50.0]
Equals(70(),Div(MeasureOf(Angle($point_4:point,$point_0:point,$point_2:point)),Degree())) TV(norm=1.644, conf=0.98) [70.0, 68.35558684341447]
PointLiesOnLine($point_4:point,Line($point_0:point,$point_3:point)) TV(norm=0.002, conf=1.00) [point(x=61.52041528171037, y=104.12877015880832), line(a=point(x=0.20328616409106814, y=188.38622079065783), b=point(x=137.0, y=0.0))]
Ge(180,80()) TV(norm=0.000, conf=1.00) [180, 80.0]
Ge(180,$y:number) None None
PointLiesOnLine($point_4:point,Line($point_1:point,$point_2:point)) TV(norm=0.004, conf=1.00) [point(x=61.52041528171037, y=104.12877015880832), line(a=point(x=14.167272457532825, y=16.643547709121478), b=point(x=123.72105816181471, y=220.10087150009269))]
Equals($y:number,Div(MeasureOf(Angle($point_0:point,$point_2:point,$point_1:point)),Degree())) None None
Solving...
Given formulas: set([Equals(50(),Div(MeasureOf(Angle($point_1:point,$point_4:point,$point_3:point)),Degree())), Ge(180,70()), Equals(80(),Div(MeasureOf(Angle($point_3:point,$point_1:point,$point_4:point)),Degree())), Ge(180,$x:number), Equals(Sub($y:number,$x:number),$What:number), Equals($x:number,Div(MeasureOf(Angle($point_0:point,$point_3:point,$point_1:point)),Degree())), Ge(180,50()), Equals(70(),Div(MeasureOf(Angle($point_4:point,$point_0:point,$point_2:point)),Degree())), PointLiesOnLine($point_4:point,Line($point_0:point,$point_3:point)), Ge(180,80()), Ge(180,$y:number), PointLiesOnLine($point_4:point,Line($point_1:point,$point_2:point)), Equals($y:number,Div(MeasureOf(Angle($point_0:point,$point_2:point,$point_1:point)),Degree()))])
iteration 1:
    nfev: 73825
     fun: 1.6345048168275866e-06
       x: array([  10.00000668,   63.78538394,  311.52621709,   39.79715878,
        -98.07605623,   22.01793628,  105.16081901,   60.00000296,
         49.99999638,  192.45280392,  197.92352294])
 message: ['requested number of basinhopping iterations completed successfully']
    njev: 5113
     nit: 100
Equals(10.000006679018863,80())
10.000006679
Equals(10.000006679018863,70())
10.000006679
Equals(10.000006679018863,30())
10.000006679
Equals(10.000006679018863,20())
10.000006679
Equals(10.000006679018863,10())
10.000006679
86.83 seconds
ans: {1: TV(norm=70.000, conf=0.00), 2: TV(norm=60.000, conf=0.00), 3: TV(norm=20.000, conf=0.00), 4: TV(norm=10.000, conf=0.33), 5: TV(norm=0.000, conf=1.00)}
idx 5, answeri: 5.0
Correct for multiple choice: index: 5 value: TV(norm=0.000, conf=1.00), golden: 5.0
RESULT: (e,p,c) = False, False, True 

(e,p,c) = False, False, True
--------------------------------------------------------------------------------
63/64 complete, 17 correct, 0 penalized, 40 error
--------------------------------------------------------------------------------
id: 1151
full unit_test entry
WWWWWWW opt_model
3.92, Is@1[is](MeasureOf@3[measure]($CBA:angle@6[CBA]), $What:number@0[What])
4.88, IsAngle@5[angle]($CBA:angle@6[CBA])

completed formulas:
Is(MeasureOf($CBA:angle),$What:number)
IsAngle($CBA:angle)

Ge(180,Mul(3(),$x:number)) None None
PointLiesOnLine($point_3:point,Line($point_1:point,$point_2:point)) TV(norm=0.003, conf=1.00) [point(x=73.193121693121697, y=96.855538890971957), line(a=point(x=0.0, y=97.0), b=point(x=254.0, y=96.0))]
Ge(180,50()) TV(norm=0.000, conf=1.00) [180, 50.0]
Is(MeasureOf(Angle($point_2:point,$point_0:point,$point_3:point)),$What:number) None None
Equals(Mul(5(),$x:number),Div(MeasureOf(Angle($point_1:point,$point_3:point,$point_0:point)),Degree())) None None
Ge(180,Mul(5(),$x:number)) None None
Equals(50(),Div(MeasureOf(Angle($point_1:point,$point_2:point,$point_0:point)),Degree())) TV(norm=10.394, conf=0.81) [50.0, 60.39431876115896]
Equals(Mul(3(),$x:number),Div(MeasureOf(Angle($point_2:point,$point_0:point,$point_3:point)),Degree())) None None
Solving...
Given formulas: set([Ge(180,Mul(3(),$x:number)), PointLiesOnLine($point_3:point,Line($point_1:point,$point_2:point)), Ge(180,50()), Is(MeasureOf(Angle($point_2:point,$point_0:point,$point_3:point)),$What:number), Equals(Mul(5(),$x:number),Div(MeasureOf(Angle($point_1:point,$point_3:point,$point_0:point)),Degree())), Ge(180,Mul(5(),$x:number)), Equals(50(),Div(MeasureOf(Angle($point_1:point,$point_2:point,$point_0:point)),Degree())), Equals(Mul(3(),$x:number),Div(MeasureOf(Angle($point_2:point,$point_0:point,$point_3:point)),Degree()))])
iteration 1:
    nfev: 37553
     fun: 1.0549188105279939e-06
       x: array([  1.20548917,  23.50696267, -33.70289147,  -1.07620015,
         1.30899733,  25.00000862, -14.18659033, -22.53644193])
 message: ['requested number of basinhopping iterations completed successfully']
    njev: 3186
     nit: 100
Equals(1.3089973308414997,Mul(125(),Degree()))
1.30899733084
Equals(1.3089973308414997,Mul(105(),Degree()))
1.30899733084
Equals(1.3089973308414997,Mul(75(),Degree()))
1.30899733084
Equals(1.3089973308414997,Mul(50(),Degree()))
1.30899733084
Equals(1.3089973308414997,Mul(25(),Degree()))
1.30899733084
32.34 seconds
ans: {1: TV(norm=0.873, conf=0.50), 2: TV(norm=0.524, conf=0.67), 3: TV(norm=0.000, conf=1.00), 4: TV(norm=0.436, conf=0.60), 5: TV(norm=0.873, conf=0.00)}
idx 3, answeri: 3.0
Correct for multiple choice: index: 3 value: TV(norm=0.000, conf=1.00), golden: 3.0
RESULT: (e,p,c) = False, False, True 

(e,p,c) = False, False, True
--------------------------------------------------------------------------------
64/64 complete, 18 correct, 0 penalized, 40 error
--------------------------------------------------------------------------------
duration:	11492.6
total:		64
penalized:	0
correct:	18
error:		40
11412.24user 0.74system 3:11:33elapsed 99%CPU (0avgtext+0avgdata 716672maxresident)k
0inputs+33896outputs (0major+205524minor)pagefaults 0swaps
